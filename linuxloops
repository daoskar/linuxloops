#!/bin/bash

usage()
{
cat << USAGE
LinuxLoops: Custom Linux distribution instraller.
Usage: sudo bash linuxloops -distro <distribution name> [-env <desktop environment>] -dst <disk name or disk image path> [-s <total install size>] [-z <swap size>] [-b] [-e] [-n] [-S]
-distro, --distribution <distribution name>			(Distribution to install)
-env, --environment <desktop environment>			(Desktop environment to install)
-dst, --destination <disk name or disk image path>		(e.g. /dev/sda or /ubuntu.img)
-s, --size <total install size>					(number in GB, minimum 14GB)
-z, --swapsize <swap size>					(number in GB)
-b, --btrfs							(Use btrfs format for the root filesystem)
-e, --encrypt							(Encrypt the root filesystem)
-n, --nvidia							(Install nvidia drivers)
-S, --surface							(Add patches for Surface devices from github.com/linux-surface)
-l, --list							(List available distros and desktop environments)
-h, --help							(Display this menu)
USAGE
}

available_distros="almalinux archlinux artixlinux brunch chromeos-flex debian devuan elementary fedora gentoo-openrc gentoo-systemd kali kde-neon manjaro mint mint-lmde mxlinux nixos opensuse parrot pop rockylinux steamos-like tails ubuntu ubuntu-lts voidlinux zorin"
btrfs_supported="archlinux artixlinux debian devuan elementary fedora gentoo-openrc gentoo-systemd kali kde-neon manjaro mint mint-lmde mxlinux nixos opensuse parrot pop steamos-like ubuntu ubuntu-lts voidlinux zorin"
nvidia_supported="archlinux artixlinux debian devuan elementary fedora gentoo-openrc gentoo-systemd kali kde-neon manjaro mint mint-lmde mxlinux nixos opensuse parrot pop steamos-like ubuntu ubuntu-lts voidlinux zorin"
surface_supported="archlinux debian elementary fedora kali kde-neon manjaro mint mint-lmde mxlinux parrot pop steamos-like ubuntu ubuntu-lts zorin"
list_desktops()
{
case "$1" in
	'almalinux')
	available_desktops="none full"
	bootloader_id="almalinux"
	bootloader_name="shimx64.efi"
	distro_name="AlmaLinux"
	;;
	'archlinux')
	available_desktops="none budgie cinnamon deepin deepin-full enlightenment gnome gnome-full i3 kde kde-full lxde lxde-full lxqt lxqt-full mate mate-full xfce xfce-full"
	bootloader_id="archlinux"
	bootloader_name="shimx64.efi"
	distro_name="Arch"
	;;
	'artixlinux')
	available_desktops="none budgie cinnamon deepin deepin-full enlightenment gnome gnome-full i3 kde kde-full lxde lxde-full lxqt lxqt-full mate mate-full xfce xfce-full"
	bootloader_id="artixlinux"
	bootloader_name="shimx64.efi"
	distro_name="Artix"
	;;
	'brunch')
	available_desktops="stable-rammus stable-volteer stable-zork unstable-rammus unstable-volteer unstable-zork"
	bootloader_id="boot"
	bootloader_name="bootx64.efi"
	distro_name="Brunch"
	;;
	'chromeos-flex')
	available_desktops="full full-devmode"
	bootloader_id="boot"
	bootloader_name="bootx64.efi"
	distro_name="ChromeOS Flex"
	;;
	'debian')
	available_desktops="none budgie cinnamon cinnamon-full enlightenment gnome gnome-full kde kde-full lxde lxde-full lxqt lxqt-full mate mate-full xfce xfce-full"
	bootloader_id="debian"
	bootloader_name="shimx64.efi"
	distro_name="Debian"
	;;
	'devuan')
	available_desktops="none budgie cinnamon cinnamon-full enlightenment gnome gnome-full kde kde-full lxde lxde-full lxqt lxqt-full mate mate-full xfce xfce-full"
	bootloader_id="debian"
	bootloader_name="shimx64.efi"
	distro_name="Devuan"
	;;
	'elementary')
	available_desktops="none full"
	bootloader_id="ubuntu"
	bootloader_name="shimx64.efi"
	distro_name="elementary"
	;;
	'fedora')
	available_desktops="none cinnamon cinnamon-full gnome gnome-full kde kde-full lxde lxqt mate mate-full xfce xfce-full"
	bootloader_id="fedora"
	bootloader_name="shimx64.efi"
	distro_name="Fedora"
	;;
	'gentoo-openrc')
	available_desktops="none cinnamon enlightenment gnome kde lxqt mate xfce"
	bootloader_id="gentoo"
	bootloader_name="grubx64.efi"
	distro_name="Gentoo"
	;;
	'gentoo-systemd')
	available_desktops="none cinnamon enlightenment gnome kde lxqt mate xfce"
	bootloader_id="gentoo"
	bootloader_name="grubx64.efi"
	distro_name="Gentoo"
	;;
	'kali')
	available_desktops="none budgie budgie-full cinnamon cinnamon-full enlightenment enlightenment-full gnome gnome-full i3 i3-full kde kde-full lxde lxde-full mate mate-full xfce xfce-full"
	bootloader_id="kali"
	bootloader_name="grubx64.efi"
	distro_name="Kali"
	grub_theme="/boot/grub/themes/kali/theme.txt"
	;;
	'kde-neon')
	available_desktops="none essentials full"
	bootloader_id="ubuntu"
	bootloader_name="shimx64.efi"
	distro_name="Neon"
	grub_theme="/boot/grub/themes/breeze/theme.txt"
	;;
	'manjaro')
	available_desktops="none budgie cinnamon deepin enlightenment gnome gnome-full kde kde-full lxde lxqt mate mate-full xfce xfce-full"
	bootloader_id="manjaro"
	bootloader_name="shimx64.efi"
	distro_name="Manjaro"
	;;
	'mint')
	available_desktops="none cinnamon cinnamon-full mate mate-full xfce xfce-full"
	bootloader_id="ubuntu"
	bootloader_name="shimx64.efi"
	distro_name="Linux Mint"
	grub_theme="/boot/grub/themes/linuxmint/theme.txt"
	;;
	'mint-lmde')
	available_desktops="none cinnamon cinnamon-full"
	bootloader_id="debian"
	bootloader_name="shimx64.efi"
	distro_name="Linux Mint Debian Edition"
	grub_theme="/boot/grub/themes/linuxmint/theme.txt"
	;;
	'mxlinux')
	available_desktops="none budgie cinnamon cinnamon-full enlightenment gnome gnome-full kde kde-full lxde lxde-full lxqt lxqt-full mate mate-full xfce xfce-full"
	bootloader_id="debian"
	bootloader_name="shimx64.efi"
	distro_name="MX Linux"
	;;
	'nixos')
	available_desktops="none budgie-full cinnamon-full deepin-full gnome-full kde-full lxqt-full mate-full pantheon-full xfce-full"
	bootloader_id="nixos"
	bootloader_name="grubx64.efi"
	distro_name="NixOS"
	;;
	'opensuse')
	available_desktops="none budgie budgie-full cinnamon cinnamon-full deepin deepin-full enlightenment enlightenment-full gnome gnome-full kde kde-full lxde lxde-full lxqt lxqt-full mate mate-full xfce xfce-full"
	bootloader_id="opensuse"
	bootloader_name="shim.efi"
	distro_name="openSUSE Tumbleweed"
	;;
	'parrot')
	available_desktops="none budgie budgie-full cinnamon cinnamon-full enlightenment enlightenment-full gnome gnome-full i3 i3-full kde kde-full lxde lxde-full mate mate-full xfce xfce-full"
	bootloader_id="parrot"
	bootloader_name="grubx64.efi"
	distro_name="Parrot"
	;;
	'pop')
	available_desktops="none full"
	bootloader_id="ubuntu"
	bootloader_name="shimx64.efi"
	distro_name="Pop!_OS"
	;;
	'rockylinux')
	available_desktops="none full"
	bootloader_id="rockylinux"
	bootloader_name="shimx64.efi"
	distro_name="Rocky Linux"
	;;
	'steamos-like')
	available_desktops="core full"
	bootloader_id="archlinux"
	bootloader_name="shimx64.efi"
	distro_name="Arch"
	;;
	'tails')
	available_desktops="full"
	bootloader_id="boot"
	bootloader_name="bootx64.efi"
	distro_name="Tails"
	;;
	'ubuntu')
	available_desktops="none budgie budgie-full cinnamon cinnamon-full enlightenment gnome gnome-full kde kde-full lxde lxde-full lxqt lxqt-full mate mate-full studio-full ubuntu ubuntu-full unity unity-full xfce xfce-full"
	bootloader_id="ubuntu"
	bootloader_name="shimx64.efi"
	distro_name="Ubuntu"
	;;
	'ubuntu-lts')
	available_desktops="none budgie budgie-full cinnamon cinnamon-full enlightenment gnome gnome-full kde kde-full lxde lxde-full lxqt lxqt-full mate mate-full studio-full ubuntu ubuntu-full xfce xfce-full"
	bootloader_id="ubuntu"
	bootloader_name="shimx64.efi"
	distro_name="Ubuntu"
	;;
	'voidlinux')
	available_desktops="none gnome gnome-full kde kde-full lxde lxqt mate mate-full xfce"
	bootloader_id="voidlinux"
	bootloader_name="grubx64.efi"
	distro_name="Void"
	;;
	'zorin')
	available_desktops="none core lite"
	bootloader_id="ubuntu"
	bootloader_name="shimx64.efi"
	distro_name="Zorin"
	;;
esac
}

list_all()
{
echo "Here is the list of available distros and desktop environments:"
for distro in $available_distros; do
list_desktops "$distro"
echo "- \"$distro\" -> desktops: $available_desktops"
done
}

exit_with_error()
{
if [ ! -z "$zenity" ]; then
	zenity --height=480 --width=640 --title="LinuxLoops installer" --error --text "$1\nInstallation failed."
else
	echo -e "$1\nInstallation failed."
fi
exit 1
}

download_lxc_image()
{
local found=0
available_builds=$(curl -L https://us.lxd.images.canonical.com/images/"$1"/"$2"/amd64/"$3"/ | grep 'alt="\[DIR]"' | tr '>' '\n' | grep '<a href' | cut -d'/' -f 2 | sort -r)
for build in $available_builds; do
	echo "Trying to download rootfs image from https://us.lxd.images.canonical.com/images/$1/$2/amd64/$3/$build/rootfs.tar.xz..."
	if curl -L --output /dev/null --silent --head --fail https://us.lxd.images.canonical.com/images/"$1"/"$2"/amd64/"$3"/"$build"/rootfs.tar.xz; then
		found=1
		curl -L https://us.lxd.images.canonical.com/images/"$1"/"$2"/amd64/"$3"/"$build"/rootfs.tar.xz -o "$linuxloopsdir"/"$1".tar.xz
		if ! xz -t "$linuxloopsdir"/"$1".tar.xz; then rm -f "$linuxloopsdir"/"$1".tar.xz; continue; fi
		mkdir -p "$linuxloopsdir"/chroot"$4"
		tar xf "$linuxloopsdir"/"$1".tar.xz -C "$linuxloopsdir"/chroot"$4"/
		rm "$linuxloopsdir"/"$1".tar.xz
		break
	else
		echo "Downloading rootfs image from https://us.lxd.images.canonical.com/images/$1/$2/amd64/$3/$build/rootfs.tar.xz failed."
	fi
done
if [ -z "$found" ]; then exit_with_error "The rootfs image could not be downloaded, the LXC images server might be down."; fi
}

write_partition_table()
{
if [ "$distro" != "tails" ]; then
	if [ "$distro" == "brunch" ]; then
		(echo "g"; echo "n"; echo "2"; echo ""; echo "+32M"; echo "n"; echo "3"; echo ""; echo "+4G"; echo "n"; echo "4"; echo ""; echo "+32M"; echo "n"; echo "5"; echo ""; echo "+4G"; echo "n"; echo "6"; echo ""; echo "+1K"; echo "n"; echo "7"; echo ""; echo "+1G"; echo "n"; echo "8"; echo ""; echo "+16M"; echo "n"; echo "9"; echo ""; echo "+1K"; echo "n"; echo "10"; echo ""; echo "+1K"; echo "n"; echo "11"; echo ""; echo "+8M"; echo "n"; echo "12"; echo ""; echo "+32M"; echo "n"; echo "1"; echo ""; echo "+$((install_sizeMB-9338-3))M"; echo "t"; echo "1"; echo "0FC63DAF-8483-4772-8E79-3D69D8477DE4"; echo "t"; echo "2"; echo "FE3A2A5D-4F32-41A7-B725-ACCC3285A309"; echo "t"; echo "3"; echo "3CB8E202-3B7E-47DD-8A3C-7FF2A13CFCEC"; echo "t"; echo "4"; echo "FE3A2A5D-4F32-41A7-B725-ACCC3285A309"; echo "t"; echo "5"; echo "3CB8E202-3B7E-47DD-8A3C-7FF2A13CFCEC"; echo "t"; echo "6"; echo "FE3A2A5D-4F32-41A7-B725-ACCC3285A309"; echo "t"; echo "7"; echo "3CB8E202-3B7E-47DD-8A3C-7FF2A13CFCEC"; echo "t"; echo "8"; echo "0FC63DAF-8483-4772-8E79-3D69D8477DE4"; echo "t"; echo "9"; echo "2E0A753D-9E48-43B0-8337-B15192CB1B5E"; echo "t"; echo "10"; echo "2E0A753D-9E48-43B0-8337-B15192CB1B5E"; echo "t"; echo "11"; echo "CAB6E88E-ABF3-4102-A07A-D4BB9BE3C1D3"; echo "t"; echo "12"; echo "C12A7328-F81F-11D2-BA4B-00A0C93EC93B"; echo "x"; echo "n"; echo "1"; echo "STATE"; echo "n"; echo "2"; echo "KERN-A"; echo "n"; echo "3"; echo "ROOT-A"; echo "n"; echo "4"; echo "KERN-B"; echo "n"; echo "5"; echo "ROOT-B"; echo "n"; echo "6"; echo "KERN-C"; echo "n"; echo "7"; echo "ROOT-C"; echo "n"; echo "8"; echo "OEM"; echo "n"; echo "9"; echo "reserved"; echo "n"; echo "10"; echo "reserved"; echo "n"; echo "11"; echo "RWFW"; echo "n"; echo "12"; echo "EFI-SYSTEM"; echo "r"; sleep 5; echo "w") | fdisk -w always -W always "$1" || exit_with_error "The partition table creation failed."
	elif [ "$distro" == "chromeos-flex" ]; then
		(echo "g"; echo "n"; echo "2"; echo ""; echo "+32M"; echo "n"; echo "3"; echo ""; echo "+4G"; echo "n"; echo "4"; echo ""; echo "+32M"; echo "n"; echo "5"; echo ""; echo "+4G"; echo "n"; echo "6"; echo ""; echo "+1K"; echo "n"; echo "7"; echo ""; echo "+1G"; echo "n"; echo "8"; echo ""; echo "+16M"; echo "n"; echo "9"; echo ""; echo "+1K"; echo "n"; echo "10"; echo ""; echo "+1K"; echo "n"; echo "11"; echo ""; echo "+8M"; echo "n"; echo "12"; echo ""; echo "+64M"; echo "n"; echo "1"; echo ""; echo "+$((install_sizeMB-9370-3))M"; echo "t"; echo "1"; echo "0FC63DAF-8483-4772-8E79-3D69D8477DE4"; echo "t"; echo "2"; echo "FE3A2A5D-4F32-41A7-B725-ACCC3285A309"; echo "t"; echo "3"; echo "3CB8E202-3B7E-47DD-8A3C-7FF2A13CFCEC"; echo "t"; echo "4"; echo "FE3A2A5D-4F32-41A7-B725-ACCC3285A309"; echo "t"; echo "5"; echo "3CB8E202-3B7E-47DD-8A3C-7FF2A13CFCEC"; echo "t"; echo "6"; echo "FE3A2A5D-4F32-41A7-B725-ACCC3285A309"; echo "t"; echo "7"; echo "3CB8E202-3B7E-47DD-8A3C-7FF2A13CFCEC"; echo "t"; echo "8"; echo "0FC63DAF-8483-4772-8E79-3D69D8477DE4"; echo "t"; echo "9"; echo "2E0A753D-9E48-43B0-8337-B15192CB1B5E"; echo "t"; echo "10"; echo "2E0A753D-9E48-43B0-8337-B15192CB1B5E"; echo "t"; echo "11"; echo "CAB6E88E-ABF3-4102-A07A-D4BB9BE3C1D3"; echo "t"; echo "12"; echo "C12A7328-F81F-11D2-BA4B-00A0C93EC93B"; echo "x"; echo "n"; echo "1"; echo "STATE"; echo "n"; echo "2"; echo "KERN-A"; echo "n"; echo "3"; echo "ROOT-A"; echo "n"; echo "4"; echo "KERN-B"; echo "n"; echo "5"; echo "ROOT-B"; echo "n"; echo "6"; echo "KERN-C"; echo "n"; echo "7"; echo "ROOT-C"; echo "n"; echo "8"; echo "OEM"; echo "n"; echo "9"; echo "reserved"; echo "n"; echo "10"; echo "reserved"; echo "n"; echo "11"; echo "RWFW"; echo "n"; echo "12"; echo "EFI-SYSTEM"; echo "r"; sleep 5; echo "w") | fdisk -w always -W always "$1" || exit_with_error "The partition table creation failed."
	else
		(echo "g"; echo "n"; echo "1"; echo ""; echo "+512M"; echo "n"; echo "2"; echo ""; echo "+1536M"; echo "n"; echo "3"; echo ""; echo "+$((install_sizeMB-2048-3))M"; echo "t"; echo "1"; echo "C12A7328-F81F-11D2-BA4B-00A0C93EC93B"; echo "t"; echo "2"; echo "0FC63DAF-8483-4772-8E79-3D69D8477DE4"; echo "t"; echo "3"; echo "0FC63DAF-8483-4772-8E79-3D69D8477DE4"; echo "x"; echo "n"; echo "1"; echo "EFI"; echo "n"; echo "2"; echo "BOOT"; echo "n"; echo "3"; echo "ROOT"; echo "r"; sleep 5; echo "w") | fdisk -w always -W always "$1" || exit_with_error "The partition table creation failed."
	fi
fi
sleep 5
}

create_swap()
{
if [ "$swap_size" -ne 0 ]; then
	if [ -z "$1" ]; then
		echo "Please wait while the swap file is being generated..."
		mkdir -p "$linuxloopsdir"/chroot/var/swap
		truncate -s 0 "$linuxloopsdir"/chroot/var/swap/swapfile
		if [ "$fstype" == "btrfs" ]; then chattr +C "$linuxloopsdir"/chroot/var/swap/swapfile; fi
		fallocate -l "$swap_size"G "$linuxloopsdir"/chroot/var/swap/swapfile
		chmod 0600 "$linuxloopsdir"/chroot/var/swap/swapfile
		mkswap "$linuxloopsdir"/chroot/var/swap/swapfile
	else
		echo "Please wait while the swap file is being generated..."
		mkdir -p "$linuxloopsdir"/chroot"$1"/mnt/var/swap
		truncate -s 0 "$linuxloopsdir"/chroot"$1"/mnt/var/swap/swapfile
		if [ "$fstype" == "btrfs" ]; then chattr +C "$linuxloopsdir"/chroot"$1"/mnt/var/swap/swapfile; fi
		fallocate -l "$swap_size"G "$linuxloopsdir"/chroot"$1"/mnt/var/swap/swapfile
		chmod 0600 "$linuxloopsdir"/chroot"$1"/mnt/var/swap/swapfile
		mkswap "$linuxloopsdir"/chroot"$1"/mnt/var/swap/swapfile
	fi
fi
}

terminate()
{
for ROOT in $(find /proc/*/root 2>/dev/null)
do
        LINK="$(readlink -f $ROOT)"
        if echo "$LINK" | grep -q "$linuxloopsdir"/chroot
        then
                PID=$(basename $(dirname "$ROOT"))
                kill -9 $PID
        fi
done
sleep 5
}

umount_chroot()
{
terminate
if mountpoint -q "$linuxloopsdir"/chroot"$1"/isomount/data; then umount "$linuxloopsdir"/chroot"$1"/isomount/data; fi
if mountpoint -q "$linuxloopsdir"/chroot"$1"/isomount/efi; then umount "$linuxloopsdir"/chroot"$1"/isomount/efi; fi
if mountpoint -q "$linuxloopsdir"/chroot"$1"/isomount/roota; then umount "$linuxloopsdir"/chroot"$1"/isomount/roota; fi
if mountpoint -q "$linuxloopsdir"/chroot"$1"/isomount/rootc; then umount "$linuxloopsdir"/chroot"$1"/isomount/rootc; fi
if mountpoint -q "$linuxloopsdir"/chroot"$1"/isomount/tmp; then umount "$linuxloopsdir"/chroot"$1"/isomount/tmp; fi
if mountpoint -q "$linuxloopsdir"/chroot"$1"/isomount; then umount "$linuxloopsdir"/chroot"$1"/isomount; fi
if [ -z "$1" ]; then
	if mountpoint -q "$linuxloopsdir"/chroot/var/swap; then umount "$linuxloopsdir"/chroot/var/swap; fi
	if mountpoint -q "$linuxloopsdir"/chroot/home; then umount "$linuxloopsdir"/chroot/home; fi
	if mountpoint -q "$linuxloopsdir"/chroot/boot/efi; then umount "$linuxloopsdir"/chroot/boot/efi; fi
	if mountpoint -q "$linuxloopsdir"/chroot/boot; then umount "$linuxloopsdir"/chroot/boot; fi
else
	if mountpoint -q "$linuxloopsdir"/chroot"$1"/mnt/var/swap; then umount "$linuxloopsdir"/chroot"$1"/mnt/var/swap; fi
	if mountpoint -q "$linuxloopsdir"/chroot"$1"/mnt/home; then umount "$linuxloopsdir"/chroot"$1"/mnt/home; fi
	if mountpoint -q "$linuxloopsdir"/chroot"$1"/mnt/boot/efi; then umount "$linuxloopsdir"/chroot"$1"/mnt/boot/efi; fi
	if mountpoint -q "$linuxloopsdir"/chroot"$1"/mnt/boot; then umount "$linuxloopsdir"/chroot"$1"/mnt/boot; fi
fi
if mountpoint -q "$linuxloopsdir"/chroot"$1"/tmp; then umount "$linuxloopsdir"/chroot"$1"/tmp; fi
if mountpoint -q "$linuxloopsdir"/chroot"$1"/dev/shm; then umount "$linuxloopsdir"/chroot"$1"/dev/shm; fi
if mountpoint -q "$linuxloopsdir"/chroot"$1"/dev/pts; then umount "$linuxloopsdir"/chroot"$1"/dev/pts; fi
if mountpoint -q "$linuxloopsdir"/chroot"$1"/dev; then umount "$linuxloopsdir"/chroot"$1"/dev; fi
if mountpoint -q "$linuxloopsdir"/chroot"$1"/sys; then umount "$linuxloopsdir"/chroot"$1"/sys; fi
if mountpoint -q "$linuxloopsdir"/chroot"$1"/proc; then umount "$linuxloopsdir"/chroot"$1"/proc; fi
rm -rf "$linuxloopsdir"/chroot/run/{*,.*} 2>/dev/null
}

mount_chroot()
{
mkdir -p "$linuxloopsdir"/chroot"$1"/dev/pts "$linuxloopsdir"/chroot"$1"/dev/shm "$linuxloopsdir"/chroot"$1"/etc "$linuxloopsdir"/chroot"$1"/proc "$linuxloopsdir"/chroot"$1"/sys "$linuxloopsdir"/chroot"$1"/tmp
chmod 1777 "$linuxloopsdir"/chroot"$1"/tmp
mount -t proc none "$linuxloopsdir"/chroot"$1"/proc
mount -t sysfs none "$linuxloopsdir"/chroot"$1"/sys
mount -t devtmpfs none "$linuxloopsdir"/chroot"$1"/dev
mount -t devpts none "$linuxloopsdir"/chroot"$1"/dev/pts
mount -t tmpfs -o mode=1777,nosuid,nodev,strictatime none "$linuxloopsdir"/chroot"$1"/dev/shm
mount -t tmpfs none "$linuxloopsdir"/chroot"$1"/tmp
if [ "$distro" == "brunch" ] || [ "$distro" == "chromeos-flex" ] || [ "$distro" == "tails" ]; then return; fi
if [ -z "$1" ]; then
	mkdir -p "$linuxloopsdir"/chroot/boot
	mount "$partition_path"2 "$linuxloopsdir"/chroot/boot
	mkdir -p "$linuxloopsdir"/chroot/boot/efi
	mount "$partition_path"1 "$linuxloopsdir"/chroot/boot/efi
	if [ "$fstype" == "btrfs" ]; then
		if [ "$encryption" == "Yes" ]; then
			mkdir -p "$linuxloopsdir"/chroot/home
			mount -o subvol=@home,compress=zstd /dev/mapper/luks-"$(blkid -s UUID -o value "$partition_path"3)" "$linuxloopsdir"/chroot/home
			if [ "$swap_size" -ne 0 ]; then
				mkdir -p "$linuxloopsdir"/chroot/var/swap
				mount -o subvol=@swap /dev/mapper/luks-"$(blkid -s UUID -o value "$partition_path"3)" "$linuxloopsdir"/chroot/var/swap
			fi
		else
			mkdir -p "$linuxloopsdir"/chroot/home
			mount -o subvol=@home,compress=zstd "$partition_path"3 "$linuxloopsdir"/chroot/home
			if [ "$swap_size" -ne 0 ]; then
				mkdir -p "$linuxloopsdir"/chroot/var/swap
				mount -o subvol=@swap "$partition_path"3 "$linuxloopsdir"/chroot/var/swap
			fi
		fi
	fi
else
	mkdir -p "$linuxloopsdir"/chroot"$1"/mnt/boot
	mount "$partition_path"2 "$linuxloopsdir"/chroot"$1"/mnt/boot
	mkdir -p "$linuxloopsdir"/chroot"$1"/mnt/boot/efi
	mount "$partition_path"1 "$linuxloopsdir"/chroot"$1"/mnt/boot/efi
	if [ "$fstype" == "btrfs" ]; then
		if [ "$encryption" == "Yes" ]; then
			mkdir -p "$linuxloopsdir"/chroot"$1"/mnt/home
			mount -o subvol=@home,compress=zstd /dev/mapper/luks-"$(blkid -s UUID -o value "$partition_path"3)" "$linuxloopsdir"/chroot"$1"/mnt/home
			if [ "$swap_size" -ne 0 ]; then
				mkdir -p "$linuxloopsdir"/chroot"$1"/mnt/var/swap
				mount -o subvol=@swap /dev/mapper/luks-"$(blkid -s UUID -o value "$partition_path"3)" "$linuxloopsdir"/chroot"$1"/mnt/var/swap
			fi
		else
			mkdir -p "$linuxloopsdir"/chroot"$1"/mnt/home
			mount -o subvol=@home,compress=zstd "$partition_path"3 "$linuxloopsdir"/chroot"$1"/mnt/home
			if [ "$swap_size" -ne 0 ]; then
				mkdir -p "$linuxloopsdir"/chroot"$1"/mnt/var/swap
				mount -o subvol=@swap "$partition_path"3 "$linuxloopsdir"/chroot"$1"/mnt/var/swap
			fi
		fi
	fi
fi
}

add_linuxloops_pre()
{
touch "$linuxloopsdir"/chroot"$1"/tmp/install_initramfs
cat >>"$linuxloopsdir"/chroot"$1"/tmp/install_initramfs <<'INITSCRIPT'
#!/bin/sh
export PATH=/sbin:/bin:/usr/sbin:/usr/bin

mkdir -p /dev /proc /sys /run
mount -n -t devtmpfs devtmpfs /dev  -o mode=0755,nosuid
mount -n -t proc     proc     /proc -o nosuid,noexec,nodev
mount -n -t sysfs    sysfs    /sys  -o nosuid,noexec,nodev
mount -n -t tmpfs    tmpfs    /run  -o nosuid,nodev,mode=0755

echo "linuxloops: boot sequence started." > /dev/kmsg
echo "linuxloops: img_uuid=$img_uuid" > /dev/kmsg
echo "linuxloops: img_path=$img_path" > /dev/kmsg

INITSCRIPT
}

add_linuxloops_recovery()
{
touch "$linuxloopsdir"/chroot"$1"/tmp/install_initramfs
cat >>"$linuxloopsdir"/chroot"$1"/tmp/install_initramfs <<'INITSCRIPT'
recovery_shell()
{
	printk_levels="$(cat /proc/sys/kernel/printk)"
	echo 0 0 0 0 > /proc/sys/kernel/printk
	echo -e "\n\nYou are in the recovery shell, you can notably use the included tools to obtain data on your partitions ("blkid" or "lsblk") or to perform an fscheck ("e2fsck" or "ntfsfix").\nOnce you are done with your modifications, type \"exit\" to reboot the computer.\n\n"
	sh
	reboot -f
}

INITSCRIPT
}

add_linuxloops_udev_start()
{
touch "$linuxloopsdir"/chroot"$1"/tmp/install_initramfs
cat >>"$linuxloopsdir"/chroot"$1"/tmp/install_initramfs <<'INITSCRIPT'
if [ -z "$img_uuid" ] || [ -z "$img_path" ]; then echo "linuxloops: invalid GRUB configuration." > /dev/kmsg; recovery_shell; fi

if [ -x /sbin/udevd ]; then
	UDEVD=/sbin/udevd
	UDEVD_BIN="udevd"
elif [ -x /lib/udev/udevd ]; then
	UDEVD=/lib/udev/udevd
	UDEVD_BIN="udevd"
elif [ -x /lib/systemd/systemd-udevd ]; then
	UDEVD=/lib/systemd/systemd-udevd
	UDEVD_BIN="systemd-udevd"
elif [ -x /usr/lib/systemd/systemd-udevd ]; then
	UDEVD=/usr/lib/systemd/systemd-udevd
	UDEVD_BIN="systemd-udevd"
elif [ -x /usr/lib64/systemd/systemd-udevd ]; then
	UDEVD=/usr/lib64/systemd/systemd-udevd
	UDEVD_BIN="systemd-udevd"
else
	echo "linuxloops: Cannot find udevd nor systemd-udevd." > /dev/kmsg
	recovery_shell
fi

$UDEVD --daemon --resolve-names=never >/linuxloops_udev.log 2>&1
udevadm trigger --action=add --type=subsystems
udevadm trigger --action=add --type=devices
udevadm settle

INITSCRIPT
}

add_linuxloops_main()
{
touch "$linuxloopsdir"/chroot"$1"/tmp/install_initramfs
cat >>"$linuxloopsdir"/chroot"$1"/tmp/install_initramfs <<'INITSCRIPT'
sleep 1

if [ ! -z "$img_uuid" ] && [ ! -z "$img_path" ]; then

if [ ! -b /dev/disk/by-partuuid/"$img_uuid" ]; then echo "linuxloops: Boot partition was not found." > /dev/kmsg; recovery_shell; fi

mkdir /linuxloops_root || { echo "linuxloops: Root directory cannot be created." > /dev/kmsg; recovery_shell; }

if [ ! -z "$linuxloops_debug" ]; then recovery_shell; fi

fstype=$(blkid -s TYPE -o value /dev/disk/by-partuuid/"$img_uuid")
if [ "$fstype" = "ntfs" ]; then
	ntfs-3g /dev/disk/by-partuuid/"$img_uuid" /linuxloops_root || { echo "linuxloops: The boot partition could not be mounted." > /dev/kmsg; recovery_shell; }
else
	mount -n -t "$fstype" /dev/disk/by-partuuid/"$img_uuid" /linuxloops_root || { echo "linuxloops: The boot partition could not be mounted." > /dev/kmsg; recovery_shell; }
fi

if [ -f /linuxloops_root/"$img_path" ]; then
	modprobe loop || { echo "linuxloops: Loop module is not available." > /dev/kmsg; recovery_shell; }
	if [ ! -b /dev/loop0 ]; then mknod -m 660 /dev/loop0 b 7 0 || { echo "linuxloops: The loop device could not be created." > /dev/kmsg; recovery_shell; }; fi
	losetup --direct-io=off -P /dev/loop0 /linuxloops_root"$img_path" || { echo "linuxloops: The loop device could not be configured." > /dev/kmsg; recovery_shell; }
else
	echo "linuxloops: The rootfs image file was not found, it might be due to an incorrect GRUB config or unsupported configuration." > /dev/kmsg
	recovery_shell
fi

udevadm trigger --action=add --type=subsystems
udevadm trigger --action=add --type=devices
udevadm settle

fi
INITSCRIPT
}

add_linuxloops_udev_end()
{
touch "$linuxloopsdir"/chroot"$1"/tmp/install_initramfs
cat >>"$linuxloopsdir"/chroot"$1"/tmp/install_initramfs <<'INITSCRIPT'
udevadm control --exit
udevadm info --cleanup-db

timer=0
while ps | grep -q '[u]devd'; do
	echo "linuxloops: udevd is not yet killed, sleeping 1s" > /dev/kmsg
	if [ $timer -eq 3 ]; then echo "linuxloops: udevd could not be killed, continuing anyway..." > /dev/kmsg; break; fi
	sleep 1
	timer=$((timer+1))
done

INITSCRIPT
}

add_linuxloops_post()
{
touch "$linuxloopsdir"/chroot"$1"/tmp/install_initramfs
cat >>"$linuxloopsdir"/chroot"$1"/tmp/install_initramfs <<'INITSCRIPT'
if [ -z "$linuxloops_init" ]; then
	if [ -x /init ]; then
		linuxloops_init="/init"
	elif [ -x /sbin/init ]; then
		linuxloops_init="/sbin/init"
	else
		echo "linuxloops: No init system found." > /dev/kmsg
		recovery_shell
	fi
fi

echo "linuxloops: boot sequence finished." > /dev/kmsg

umount /run
umount /sys
umount /proc
umount /dev > /dev/null 2>&1 || umount -l /dev > /dev/null 2>&1 || echo "linuxloops: /dev was not properly unmounted" > /dev/kmsg

#sh

exec "$linuxloops_init"
INITSCRIPT
}

install_initcpio()
{
if [ "$install_type" == "image" ]; then linuxloops_args="\\\\\\\$linuxloops_args"; fi
if [ "$encryption" == "Yes" ]; then
	bootargs="$linuxloops_args cryptdevice=UUID=$(blkid -s UUID -o value "$partition_path"3):luks-$(blkid -s UUID -o value "$partition_path"3) rd.luks.uuid=$(blkid -s UUID -o value "$partition_path"3)"
else
	bootargs="$linuxloops_args"
fi
cat >"$linuxloopsdir"/chroot"$1"/tmp/install_initramfs <<INITCPIOSTART
#!/bin/bash
set -e
if [ "$encryption" == "Yes" ]; then
sed -i 's@HOOKS=(base udev@HOOKS=(base udev linuxloops encrypt@g' /etc/mkinitcpio.conf
else
sed -i 's@HOOKS=(base udev@HOOKS=(base udev linuxloops@g' /etc/mkinitcpio.conf
fi
cat >/etc/initcpio/install/linuxloops <<'INSTALLHOOK'
#!/bin/bash

build() {
	add_module "8250_dw"
	add_module "aes"
	add_module "atkbd"
	add_module "btrfs"
	add_module "cbc"
	add_module "dm_crypt"
	add_module "exfat"
	add_module "ext4"
	add_module "fuse"
	add_module "i8042"
	add_module "intel_lpss"
	add_module "intel_lpss_pci"
	add_module "loop"
	add_module "ntfs3"
	add_module "nvme"
	add_module "pinctrl_amd"
	add_module "quota_v1"
	add_module "quota_v2"
	add_module "serio"
	add_module "sha256"
	add_module "surface_aggregator"
	add_module "surface_aggregator_registry"
	add_module "surface_hid"
	add_module "surface_hid_core"
	add_module "usbhid"
	add_module "xhci_pci"

	add_binary "bash"
	add_binary "blkid"
	add_binary "cryptsetup"
	add_binary "cut"
	add_binary "e2fsck"
	add_binary "find"
	add_binary "grep"
	add_binary "losetup"
	add_binary "lsblk"
	add_binary "ntfs-3g"
	add_binary "ntfsfix"
	add_binary "ps"
	add_binary "setsid"
	add_binary "swapon"

	cp "/usr/lib/linuxloops/linuxloops" "\$BUILDROOT/linuxloops"

	if ls /boot/vmlinuz-* >/dev/null 2>&1 && [ -f /etc/secureboot_key/MOK.key ] && [ -f /etc/secureboot_key/MOK.crt ] && [ ! -z "\$(command -v sbsign)" ] && [ ! -z "\$(command -v sbverify)" ]; then
		for i in /boot/vmlinuz-*; do
			if ! sbverify --list \$i | grep -q 'CN=Linuxloops Machine Owner Key'; then
				sbsign --key /etc/secureboot_key/MOK.key --cert /etc/secureboot_key/MOK.crt --output \$i \$i
			fi
		done
	fi
}

help() {
    cat <<HELPEOF
Installs the linuxloops hook.
HELPEOF
}
INSTALLHOOK
chmod 0755 /etc/initcpio/install/linuxloops
mkdir -p /usr/lib/linuxloops
cat >/usr/lib/linuxloops/linuxloops <<'LINUXLOOPSBINARY'
INITCPIOSTART
add_linuxloops_pre "$1"
add_linuxloops_recovery "$1"
add_linuxloops_udev_start "$1"
add_linuxloops_main "$1"
add_linuxloops_udev_end "$1"
add_linuxloops_post "$1"
echo -e "LINUXLOOPSBINARY" >> "$linuxloopsdir"/chroot"$1"/tmp/install_initramfs
echo -e "chmod 0755 /usr/lib/linuxloops/linuxloops" >> "$linuxloopsdir"/chroot"$1"/tmp/install_initramfs
echo -e "mkinitcpio -P" >> "$linuxloopsdir"/chroot"$1"/tmp/install_initramfs
chmod 0755 "$linuxloopsdir"/chroot"$1"/tmp/install_initramfs
}

install_initramfstools()
{
if [ "$install_type" == "image" ]; then linuxloops_args="\\\\\\\$linuxloops_args"; fi
if [ "$encryption" == "Yes" ]; then
	bootargs="$linuxloops_args cryptopts=target=luks-$(blkid -s UUID -o value "$partition_path"3),source=/dev/disk/by-uuid/$(blkid -s UUID -o value "$partition_path"3),luks"
else
	bootargs="$linuxloops_args"
fi
cat >"$linuxloopsdir"/chroot"$1"/tmp/install_initramfs <<INITRAMFSTOOLSSTART
#!/bin/bash
set -e
cat >/etc/initramfs-tools/hooks/linuxloops <<'INSTALLHOOK'
#!/bin/bash
PREREQ=""
prereqs()
{
   echo "\$PREREQ"
}

case \$1 in
prereqs)
   prereqs
   exit 0
   ;;
esac

. /usr/share/initramfs-tools/hook-functions
# Begin real processing below this line

	rm -f "\$DESTDIR/bin/losetup" "\$DESTDIR/sbin/losetup"

	manual_add_modules "8250_dw"
	manual_add_modules "aes"
	manual_add_modules "atkbd"
	manual_add_modules "btrfs"
	manual_add_modules "cbc"
	manual_add_modules "dm-crypt"
	manual_add_modules "exfat"
	manual_add_modules "ext4"
	manual_add_modules "fuse"
	manual_add_modules "i8042"
	manual_add_modules "intel_lpss"
	manual_add_modules "intel_lpss_pci"
	manual_add_modules "loop"
	manual_add_modules "ntfs3"
	manual_add_modules "nvme"
	manual_add_modules "pinctrl_amd"
	manual_add_modules "quota_v1"
	manual_add_modules "quota_v2"
	manual_add_modules "serio"
	manual_add_modules "sha256"
	manual_add_modules "surface_aggregator"
	manual_add_modules "surface_aggregator_registry"
	manual_add_modules "surface_hid"
	manual_add_modules "surface_hid_core"
	manual_add_modules "usbhid"
	manual_add_modules "xhci_pci"

	copy_exec "\$(command -v bash)"
	copy_exec "\$(command -v blkid)"
	copy_exec "\$(command -v cryptsetup)"
	copy_exec "\$(command -v cut)"
	copy_exec "\$(command -v e2fsck)"
	copy_exec "\$(command -v find)"
	copy_exec "\$(command -v grep)"
	copy_exec "\$(command -v losetup)"
	copy_exec "\$(command -v lsblk)"
	copy_exec "\$(command -v ntfs-3g)"
	copy_exec "\$(command -v ntfsfix)"
	copy_exec "\$(command -v ps)"
	copy_exec "\$(command -v setsid)"
	copy_exec "\$(command -v swapon)"

	cp "/usr/lib/linuxloops/linuxloops" "\$DESTDIR/linuxloops"

	if ls /boot/vmlinuz-* >/dev/null 2>&1 && [ -f /etc/secureboot_key/MOK.key ] && [ -f /etc/secureboot_key/MOK.crt ] && [ ! -z "\$(command -v sbsign)" ] && [ ! -z "\$(command -v sbverify)" ]; then
		for i in /boot/vmlinuz-*; do
			if ! sbverify --list \$i | grep -q 'CN=Linuxloops Machine Owner Key'; then
				sbsign --key /etc/secureboot_key/MOK.key --cert /etc/secureboot_key/MOK.crt --output \$i \$i
			fi
		done
	fi
INSTALLHOOK
chmod 0755 /etc/initramfs-tools/hooks/linuxloops
mkdir -p /usr/lib/linuxloops
cat >/usr/lib/linuxloops/linuxloops <<'LINUXLOOPSBINARY'
INITRAMFSTOOLSSTART
add_linuxloops_pre "$1"
add_linuxloops_recovery "$1"
add_linuxloops_udev_start "$1"
add_linuxloops_main "$1"
add_linuxloops_udev_end "$1"
add_linuxloops_post "$1"
echo -e "LINUXLOOPSBINARY" >> "$linuxloopsdir"/chroot"$1"/tmp/install_initramfs
echo -e "chmod 0755 /usr/lib/linuxloops/linuxloops" >> "$linuxloopsdir"/chroot"$1"/tmp/install_initramfs
echo -e "update-initramfs -u -k all" >> "$linuxloopsdir"/chroot"$1"/tmp/install_initramfs
chmod 0755 "$linuxloopsdir"/chroot"$1"/tmp/install_initramfs
}

install_dracut()
{
if [ "$install_type" == "image" ]; then linuxloops_args="\\\\\\\$linuxloops_args"; fi
if [ "$encryption" == "Yes" ]; then
	bootargs="$linuxloops_args rd.luks.uuid=$(blkid -s UUID -o value "$partition_path"3)"
else
	bootargs="$linuxloops_args"
fi
cat >"$linuxloopsdir"/chroot"$1"/tmp/install_initramfs <<INITDRACUTSTART
#!/bin/bash
set -e
mkdir /usr/lib/dracut/modules.d/99linuxloops
cat >/usr/lib/dracut/modules.d/99linuxloops/module-setup.sh <<'INSTALLHOOK'
#!/bin/bash

check() {
	return 0
}

installkernel() {
	instmods "8250_dw"
	instmods "aes"
	instmods "atkbd"
	instmods "btrfs"
	instmods "cbc"
	instmods "dm-crypt"
	instmods "exfat"
	instmods "ext4"
	instmods "fuse"
	instmods "i8042"
	instmods "intel_lpss"
	instmods "intel_lpss_pci"
	instmods "loop"
	instmods "ntfs3"
	instmods "nvme"
	instmods "pinctrl_amd"
	instmods "quota_v1"
	instmods "quota_v2"
	instmods "serio"
	instmods "sha256"
	instmods "surface_aggregator"
	instmods "surface_aggregator_registry"
	instmods "surface_hid"
	instmods "surface_hid_core"
	instmods "usbhid"
	instmods "xhci_pci"
}

install() {
	inst "\$(command -v bash)" "/usr/bin/bash"
	inst "\$(command -v blkid)" "/usr/sbin/blkid"
	inst "\$(command -v cryptsetup)" "/usr/sbin/cryptsetup"
	inst "\$(command -v cut)" "/usr/sbin/cut"
	inst "\$(command -v e2fsck)" "/usr/sbin/e2fsck"
	inst "\$(command -v find)" "/usr/bin/find"
	inst "\$(command -v grep)" "/usr/sbin/grep"
	inst "\$(command -v losetup)" "/usr/sbin/losetup"
	inst "\$(command -v lsblk)" "/usr/sbin/lsblk"
	inst "\$(command -v ntfs-3g)" "/usr/sbin/ntfs-3g"
	inst "\$(command -v ntfsfix)" "/usr/sbin/ntfsfix"
	inst "\$(command -v ps)" "/usr/bin/ps"
	inst "\$(command -v setsid)" "/usr/sbin/setsid"
	inst "\$(command -v swapon)" "/usr/sbin/swapon"

	cp "/usr/lib/linuxloops/linuxloops" "\${initdir}/linuxloops"

	if ls /boot/vmlinuz-* >/dev/null 2>&1 && [ -f /etc/secureboot_key/MOK.key ] && [ -f /etc/secureboot_key/MOK.crt ] && [ ! -z "\$(command -v sbsign)" ] && [ ! -z "\$(command -v sbverify)" ]; then
		for i in /boot/vmlinuz-*; do
			if ! sbverify --list \$i | grep -q 'CN=Linuxloops Machine Owner Key'; then
				sbsign --key /etc/secureboot_key/MOK.key --cert /etc/secureboot_key/MOK.crt --output \$i \$i
			fi
		done
	fi
}
INSTALLHOOK
chmod 0755 /usr/lib/dracut/modules.d/99linuxloops/module-setup.sh
mkdir -p /usr/lib/linuxloops
cat >/usr/lib/linuxloops/linuxloops <<'LINUXLOOPSBINARY'
INITDRACUTSTART
add_linuxloops_pre "$1"
add_linuxloops_recovery "$1"
add_linuxloops_udev_start "$1"
add_linuxloops_main "$1"
add_linuxloops_udev_end "$1"
add_linuxloops_post "$1"
echo -e "LINUXLOOPSBINARY" >> "$linuxloopsdir"/chroot"$1"/tmp/install_initramfs
echo -e "chmod 0755 /usr/lib/linuxloops/linuxloops" >> "$linuxloopsdir"/chroot"$1"/tmp/install_initramfs
echo -e "dracut --no-hostonly --regenerate-all --force" >> "$linuxloopsdir"/chroot"$1"/tmp/install_initramfs
chmod 0755 "$linuxloopsdir"/chroot"$1"/tmp/install_initramfs
}

install_nixos_config()
{
if [ ! -z "$cmdline_extra" ]; then
	if [ "$install_type" == "image" ]; then linuxloops_args=$(echo "\$linuxloops_args allowShell=1 $cmdline_extra" | sed 's@ @" "@g'); else linuxloops_args=$(echo "allowShell=1 $cmdline_extra" | sed 's@ @" "@g'); fi
else
	if [ "$install_type" == "image" ]; then linuxloops_args=$(echo "\$linuxloops_args allowShell=1" | sed 's@ @" "@g'); else linuxloops_args=$(echo "allowShell=1" | sed 's@ @" "@g'); fi
fi
add_linuxloops_recovery /installroot
add_linuxloops_main /installroot
mkdir -p "$linuxloopsdir"/chroot/installroot/mnt/etc/nixos
cat >"$linuxloopsdir"/chroot/installroot/mnt/etc/nixos/configuration.nix <<NIXOSCONFIGURATION
# Edit this configuration file to define what should be installed on
# your system.  Help is available in the configuration.nix(5) man page
# and in the NixOS manual (accessible by running ‘nixos-help’).

{ config, pkgs, ... }:

{
imports = [ ./linuxloops.nix ];

boot.loader = {
	efi = {
		canTouchEfiVariables = false;
		efiSysMountPoint = "/boot/efi";
	};
	grub = {
		configurationLimit = 3;
		device = "nodev";
		efiInstallAsRemovable = true;
		efiSupport = true;
		enable = true;
		extraGrubInstallArgs = [ "--modules=all_video boot btrfs cat chain configfile echo efifwsetup efinet ext2 fat font gettext gfxmenu gfxterm gfxterm_background gzio halt help hfsplus iso9660 jpeg keystatus linux loadenv loopback ls lsefi lsefimmap lsefisystab lssal memdisk minicmd normal ntfs part_apple part_msdos part_gpt password_pbkdf2 png probe reboot regexp search search_fs_uuid search_fs_file search_label sleep smbios squash4 terminal test true video xfs zfs zfscrypt zfsinfo" ];
		fsIdentifier = "uuid";
		useOSProber = false;
	};
};

console.keyMap = "$CUSTOM_KEYMAP";
i18n.defaultLocale = "$(echo "$CUSTOM_LOCALE" | cut -d' ' -f1)";
time.timeZone = "$CUSTOM_TIMEZONE";

hardware.cpu.intel.updateMicrocode = true;
hardware.cpu.amd.updateMicrocode = true;
hardware.enableAllFirmware = true;
boot.kernelPackages = pkgs.linuxPackages_latest;

networking.hostName = "$hostname";
networking.networkmanager.enable = true;

hardware.bluetooth.enable = true;
hardware.sensor.iio.enable = true;
hardware.pulseaudio.enable = false;
security.rtkit.enable = true;
services.pipewire = {
  enable = true;
  alsa.enable = true;
  alsa.support32Bit = true;
  pulse.enable = true;
};

services.avahi.enable = true;
services.avahi.nssmdns = true;
services.logrotate.checkConfig = false;
services.printing.enable = true;

boot.plymouth.enable = true;

environment.systemPackages = with pkgs; [ gnome.zenity ntfs3g openssl sbsigntool $CUSTOM_PACKAGES ];

$nixos_desktop
$nixos_nvidia

$(cat "$linuxloopsdir"/chroot/installroot/tmp/install_custom_script 2>/dev/null)

nixpkgs.config.allowUnfree = true;

# This value determines the NixOS release from which the default
# settings for stateful data, like file locations and database versions
# on your system were taken. It‘s perfectly fine and recommended to leave
# this value at the release version of the first install of this system.
# Before changing this value read the documentation for this option
# (e.g. man configuration.nix or on https://nixos.org/nixos/options.html).
system.stateVersion = "23.05"; # Did you read the comment?
}
NIXOSCONFIGURATION
if [ "$encryption" == "Yes" ]; then
	if [ "$fstype" == "btrfs" ]; then
		fstab="
boot.initrd.luks.devices = {
	luks-$(blkid -s UUID -o value "$partition_path"3) = {
		device = \"/dev/disk/by-uuid/$(blkid -s UUID -o value "$partition_path"3)\";
	};
};

fileSystems.\"/\" = {
	device = \"/dev/disk/by-uuid/$(blkid -s UUID -o value /dev/mapper/luks-$(blkid -s UUID -o value "$partition_path"3))\";
	fsType = \"btrfs\";
	options = [ \"subvol=@\" \"compress=zstd\" ];
};

fileSystems.\"/home\" = {
	device = \"/dev/disk/by-uuid/$(blkid -s UUID -o value /dev/mapper/luks-$(blkid -s UUID -o value "$partition_path"3))\";
	fsType = \"btrfs\";
	options = [ \"subvol=@home\" \"compress=zstd\" ];
};

fileSystems.\"/var/swap\" = {
	device = \"/dev/disk/by-uuid/$(blkid -s UUID -o value /dev/mapper/luks-$(blkid -s UUID -o value "$partition_path"3))\";
	fsType = \"btrfs\";
	options = [ \"subvol=@swap\" ];
};
"
	else
		fstab="
boot.initrd.luks.devices = {
	luks-$(blkid -s UUID -o value "$partition_path"3) = {
		device = \"/dev/disk/by-uuid/$(blkid -s UUID -o value "$partition_path"3)\";
	};
};

fileSystems.\"/\" = {
	device = \"/dev/disk/by-uuid/$(blkid -s UUID -o value /dev/mapper/luks-$(blkid -s UUID -o value "$partition_path"3))\";
	fsType = \"ext4\";
};
"
	fi
else
	if [ "$fstype" == "btrfs" ]; then
		fstab="
fileSystems.\"/\" = {
	device = \"/dev/disk/by-uuid/$(blkid -s UUID -o value "$partition_path"3)\";
	fsType = \"btrfs\";
	options = [ \"subvol=@\" \"compress=zstd\" ];
};

fileSystems.\"/home\" = {
	device = \"/dev/disk/by-uuid/$(blkid -s UUID -o value "$partition_path"3)\";
	fsType = \"btrfs\";
	options = [ \"subvol=@home\" \"compress=zstd\" ];
};

fileSystems.\"/var/swap\" = {
	device = \"/dev/disk/by-uuid/$(blkid -s UUID -o value "$partition_path"3)\";
	fsType = \"btrfs\";
	options = [ \"subvol=@swap\" ];
};
"
	else
		fstab="
fileSystems.\"/\" = {
	device = \"/dev/disk/by-uuid/$(blkid -s UUID -o value "$partition_path"3)\";
	fsType = \"ext4\";
};
"
	fi
fi
fstab="$fstab

fileSystems.\"/boot\" = {
	device = \"/dev/disk/by-uuid/$(blkid -s UUID -o value "$partition_path"2)\";
	fsType = \"ext4\";
};

fileSystems.\"/boot/efi\" = {
	device = \"/dev/disk/by-uuid/$(blkid -s UUID -o value "$partition_path"1)\";
	fsType = \"vfat\";
};
"
if [ "$swap_size" -ne 0 ]; then
fstab="$fstab

swapDevices =
[
  {
	device = \"/var/swap/swapfile\";
  }
];
"
fi
cat >"$linuxloopsdir"/chroot/installroot/mnt/etc/nixos/linuxloops.nix <<NIXOSLINUXLOOPS
# Do not modify this file which contains the linuxloops configuration.
# Please make changes to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:

{
$fstab

boot.kernelParams = [ "$linuxloops_args" ];

#https://github.com/NixOS/nixpkgs/blob/master/nixos/modules/profiles/all-hardware.nix
boot.initrd.availableKernelModules = [ "3w-9xxx" "3w-xxxx" "8250_dw" "aes" "ahci" "aic79xx" "aic7xxx" "arcmsr" "ata_piix" "atkbd" "btrfs" "cbc" "dm_crypt" "ehci_hcd" "encrypted_keys" "exfat" "ext4" "fuse" "hv_storvsc" "i8042" "intel_lpss" "intel_lpss_pci" "loop" "mmc_block" "mptspi" "ntfs3" "nvme" "ohci1394" "pata_ali" "pata_amd" "pata_artop" "pata_atiixp" "pata_efar" "pata_hpt366" "pata_hpt37x" "pata_hpt3x2n" "pata_hpt3x3" "pata_it8213" "pata_it821x" "pata_jmicron" "pata_marvell" "pata_mpiix" "pata_netcell" "pata_ns87410" "pata_oldpiix" "pata_pcmcia" "pata_pdc2027x" "pata_qdi" "pata_rz1000" "pata_serverworks" "pata_sil680" "pata_sis" "pata_sl82c105" "pata_triflex" "pata_via" "pata_winbond" "pinctrl_amd" "quota_v1" "quota_v2" "sata_inic162x" "sata_nv" "sata_promise" "sata_qstor" "sata_sil" "sata_sil24" "sata_sis" "sata_svw" "sata_sx4" "sata_uli" "sata_via" "sata_vsc" "sbp2" "sd_mod" "sdhci_acpi" "sdhci_pci" "serio" "sha256" "sr_mod" "surface_aggregator" "surface_aggregator_registry" "surface_hid" "surface_hid_core" "uas" "uhci_hcd" "usbhid" "usb_storage" "virtio_net" "virtio_pci" "virtio_mmio" "virtio_blk" "virtio_scsi" "virtio_balloon" "virtio_console" "vmxnet3" "vsock" "vmw_balloon" "vmw_vmci" "vmwgfx" "vmw_vsock_vmci_transport" "xhci_pci" ];

boot.initrd.compressor="gzip";
boot.initrd.extraUtilsCommands = ''
copy_bin_and_libs "\${pkgs.bash}/bin/bash"
copy_bin_and_libs "\${pkgs.util-linux}/bin/blkid"
copy_bin_and_libs "\${pkgs.coreutils}/bin/coreutils"
copy_bin_and_libs "\${pkgs.cryptsetup}/bin/cryptsetup"
copy_bin_and_libs "\${pkgs.coreutils}/bin/cut"
copy_bin_and_libs "\${pkgs.e2fsprogs}/bin/e2fsck"
copy_bin_and_libs "\${pkgs.gnugrep}/bin/grep"
copy_bin_and_libs "\${pkgs.util-linux}/bin/losetup"
copy_bin_and_libs "\${pkgs.util-linux}/bin/lsblk"
copy_bin_and_libs "\${pkgs.ntfs3g}/bin/ntfs-3g"
copy_bin_and_libs "\${pkgs.ntfs3g}/bin/ntfsfix"
copy_bin_and_libs "\${pkgs.util-linux}/bin/setsid"
copy_bin_and_libs "\${pkgs.util-linux}/bin/swapon"
'';

boot.loader.grub.extraInstallCommands = ''
	if \${pkgs.coreutils}/bin/ls /boot/kernels/*-linux-*Image >/dev/null 2>&1 && [ -f /etc/secureboot_key/MOK.key ] && [ -f /etc/secureboot_key/MOK.crt ] && [ -x \${pkgs.sbsigntool}/bin/sbsign ] && [ -x \${pkgs.sbsigntool}/bin/sbverify ]; then
		for i in /boot/kernels/*-linux-*Image; do
			if ! \${pkgs.sbsigntool}/bin/sbverify --list \$i | \${pkgs.gnugrep}/bin/grep -q 'CN=Linuxloops Machine Owner Key'; then
				\${pkgs.sbsigntool}/bin/sbsign --key /etc/secureboot_key/MOK.key --cert /etc/secureboot_key/MOK.crt --output \$i \$i
			fi
		done
	fi
	\${pkgs.coreutils}/bin/mkdir -p /boot/efi/EFI/nixos
	\${pkgs.coreutils}/bin/cp /boot/efi/EFI/BOOT/BOOTX64.EFI /boot/efi/EFI/nixos/grubx64.efi
'';

boot.initrd.preLVMCommands = ''
$(cat "$linuxloopsdir"/chroot/installroot/tmp/install_initramfs)
'';
}
NIXOSLINUXLOOPS
}

install_iso_init ()
{
add_linuxloops_pre "$1"
add_linuxloops_recovery "$1"
add_linuxloops_udev_start "$1"
add_linuxloops_main "$1"
add_linuxloops_udev_end "$1"
add_linuxloops_post "$1"
}

install_surface()
{
if [ "$distro" == "debian" ] || [ "$distro" == "elementary" ] || [ "$distro" == "kali" ] || [ "$distro" == "kde-neon" ] || [ "$distro" == "mint" ] || [ "$distro" == "mint-lmde" ] || [ "$distro" == "mxlinux" ] || [ "$distro" == "parrot" ] || [ "$distro" == "pop" ] || [ "$distro" == "ubuntu" ] || [ "$distro" == "ubuntu-lts" ] || [ "$distro" == "zorin" ]; then
cat >"$linuxloopsdir"/chroot/tmp/install_surface <<SURFACEAPT
#!/bin/bash
set -e
curl https://raw.githubusercontent.com/linux-surface/linux-surface/master/pkg/keys/surface.asc | gpg --dearmor | dd of=/etc/apt/trusted.gpg.d/linux-surface.gpg
echo "deb [arch=amd64] https://pkg.surfacelinux.com/debian release main" > /etc/apt/sources.list.d/linux-surface.list
apt update
yes | DEBIAN_FRONTEND=noninteractive apt purge $1
yes | DEBIAN_FRONTEND=noninteractive apt install linux-image-surface linux-headers-surface iptsd libwacom-surface surface-control surface-dtx-daemon git build-essential cmake meson ninja-build pkg-config libgnutls28-dev python3-pip python3-yaml python3-ply python3-jinja2 qtbase5-dev libqt5core5a libqt5gui5 libqt5widgets5 qttools5-dev-tools libtiff-dev libevent-dev gstreamer1.0-tools libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev v4l2loopback-dkms
git clone https://git.libcamera.org/libcamera/libcamera.git /tmp/libcamera
cd /tmp/libcamera
meson build -Dpipelines=uvcvideo,ipu3 -Dprefix=/usr -Dgstreamer=enabled -Dv4l2=true
ninja -C build
ninja -C build install
cd /
usermod -aG video '$username'
SURFACEAPT
elif [ "$distro" == "archlinux" ] || [ "$distro" == "manjaro" ] || [ "$distro" == "steamos-like" ]; then
cat >"$linuxloopsdir"/chroot/tmp/install_surface <<SURFACEPACMAN
#!/bin/bash
set -e
curl -s https://raw.githubusercontent.com/linux-surface/linux-surface/master/pkg/keys/surface.asc | pacman-key --add -
pacman-key --finger 56C464BAAC421453
pacman-key --lsign-key 56C464BAAC421453
cat >>/etc/pacman.conf <<'SURFACEREPO'
[linux-surface]
Server = https://pkg.surfacelinux.com/arch/
SURFACEREPO
pacman -Syu
pacman -R --noconfirm $1
pacman -S --noconfirm linux-surface linux-surface-headers iptsd base-devel git fakeroot meson python-pytest python-libevdev python-pyudev libc++ gst-plugins-base-libs python-yaml python-ply python-jinja gstreamer qt5-tools libevent clang v4l2loopback-dkms
git clone https://aur.archlinux.org/libwacom-surface.git /tmp/libwacom-surface
chown -R 'nobody':'nobody' /tmp/libwacom-surface
su -s /bin/bash nobody -c "HOME=/tmp gpg --recv-keys 594ABBA066118C7A02D10A80A8AF906D9307FBAD"
su -s /bin/bash nobody -c "HOME=/tmp gpg --recv-keys 3C2C43D9447D5938EF4551EBE23B7E70B467F0BF"
su -s /bin/bash nobody -c "cd /tmp/libwacom-surface && HOME=/tmp makepkg -s"
yes | pacman -U /tmp/libwacom-surface/*.pkg.tar.*
git clone https://git.libcamera.org/libcamera/libcamera.git /tmp/libcamera
cd /tmp/libcamera
meson build -Dpipelines=uvcvideo,ipu3 -Dprefix=/usr -Dgstreamer=enabled -Dv4l2=true
ninja -C build
ninja -C build install
cd /
usermod -aG video '$username'
SURFACEPACMAN
elif [ "$distro" == "fedora" ]; then
cat >"$linuxloopsdir"/chroot/tmp/install_surface <<SURFACEDNF
#!/bin/bash
set -e
dnf config-manager --add-repo=https://pkg.surfacelinux.com/fedora/linux-surface.repo
dnf remove -y $1
dnf update -y
dnf install -y --allowerasing kernel-surface kernel-surface-devel iptsd libwacom-surface surface-control surface-dtx-daemon
dnf install -y git make automake gcc gcc-c++ kernel-devel libatomic dkms meson ninja-build pkg-config gnutls-devel python3-pip python3-yaml python3-ply python3-jinja2 qt5-qtbase-devel libtiff-devel libevent-devel gstreamer1-devel gstreamer1-plugins-base-devel
curl -L https://github.com/umlaeute/v4l2loopback/archive/v0.12.5.tar.gz | tar xvz -C /usr/src
dkms add -m v4l2loopback -v 0.12.5
ls /usr/lib/modules/*/vmlinuz | sed 's@/usr/lib/modules/@@g' | sed 's@/vmlinuz@@g' | xargs -n1 /usr/lib/dkms/dkms_autoinstaller start
git clone https://git.libcamera.org/libcamera/libcamera.git /tmp/libcamera
cd /tmp/libcamera
meson build -Dpipelines=uvcvideo,ipu3 -Dprefix=/usr -Dgstreamer=enabled -Dv4l2=true
ninja -C build
ninja -C build install
cd /
usermod -aG video '$username'
SURFACEDNF
fi
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_surface
}

install_nvidia()
{
if [ "$distro" == "elementary" ] || [ "$distro" == "kde-neon" ] || [ "$distro" == "mint" ] || [ "$distro" == "ubuntu" ] || [ "$distro" == "ubuntu-lts" ] || [ "$distro" == "zorin" ]; then
cat >"$linuxloopsdir"/chroot/tmp/install_nvidia <<INSTALLNVIDIA
#!/bin/bash
set -e
yes | DEBIAN_FRONTEND=noninteractive apt install \$(apt search nvidia | grep nvidia-driver | grep -v '\-bin' | grep -v '\-open' | grep -v '\-server' | tail -1 | grep -o -P '(nvidia-driver-).*' | cut -d' ' -f1 | cut -d '/' -f1)
INSTALLNVIDIA
elif [ "$distro" == "debian" ] || [ "$distro" == "devuan" ] || [ "$distro" == "kali" ] || [ "$distro" == "mint-lmde" ] || [ "$distro" == "mxlinux" ] || [ "$distro" == "parrot" ]; then
cat >"$linuxloopsdir"/chroot/tmp/install_nvidia <<INSTALLNVIDIA
#!/bin/bash
set -e
yes | DEBIAN_FRONTEND=noninteractive apt install nvidia-driver
INSTALLNVIDIA
elif [ "$distro" == "archlinux" ] || [ "$distro" == "artixlinux" ] || [ "$distro" == "manjaro" ]; then
cat >"$linuxloopsdir"/chroot/tmp/install_nvidia <<INSTALLNVIDIA
#!/bin/bash
set -e
pacman -S --noconfirm nvidia-dkms
INSTALLNVIDIA
elif [ "$distro" == "gentoo-openrc" ] || [ "$distro" == "gentoo-systemd" ]; then
cat >"$linuxloopsdir"/chroot/tmp/install_nvidia <<INSTALLNVIDIA
#!/bin/bash
set -e
emerge -uN x11-drivers/nvidia-drivers
INSTALLNVIDIA
elif [ "$distro" == "fedora" ]; then
cat >"$linuxloopsdir"/chroot/tmp/install_nvidia <<INSTALLNVIDIA
#!/bin/bash
set -e
dnf install -y akmod-nvidia
INSTALLNVIDIA
elif [ "$distro" == "nixos" ]; then
nixos_nvidia="
hardware.opengl.enable = true;
services.xserver.videoDrivers = [ \"nvidia\" ];
"
elif [ "$distro" == "opensuse" ]; then
cat >"$linuxloopsdir"/chroot/tmp/install_nvidia <<INSTALLNVIDIA
#!/bin/bash
set -e
zypper --non-interactive addrepo https://download.nvidia.com/opensuse/tumbleweed NVIDIA
zypper --non-interactive --gpg-auto-import-keys refresh
zypper --non-interactive install nvidia-glG06 x11-video-nvidiaG06
INSTALLNVIDIA
elif [ "$distro" == "pop" ]; then
cat >"$linuxloopsdir"/chroot/tmp/install_nvidia <<INSTALLNVIDIA
#!/bin/bash
set -e
yes | DEBIAN_FRONTEND=noninteractive apt install system76-driver-nvidia
INSTALLNVIDIA
elif [ "$distro" == "steamos-like" ]; then
cat >"$linuxloopsdir"/chroot/tmp/install_nvidia <<INSTALLNVIDIA
#!/bin/bash
set -e
pacman -S --noconfirm nvidia-dkms lib32-nvidia-utils
INSTALLNVIDIA
elif [ "$distro" == "voidlinux" ]; then
cat >"$linuxloopsdir"/chroot/tmp/install_nvidia <<INSTALLNVIDIA
#!/bin/bash
set -e
xbps-install -y nvidia
INSTALLNVIDIA
fi
if [ -f "$linuxloopsdir"/chroot/tmp/install_nvidia ]; then
cat >>"$linuxloopsdir"/chroot/tmp/install_nvidia <<INSTALLNVIDIA

if [ -d /etc/systemd ]; then
	mkdir -p /etc/systemd/system-shutdown
	cat >/etc/systemd/system-shutdown/nvidia.shutdown <<'SHUTDOWNFIX'
#!/bin/sh
for MODULE in nvidia_drm nvidia_modeset nvidia_uvm nvidia; do
	if lsmod | grep "\$MODULE" &> /dev/null; then rmmod \$MODULE; fi
done
SHUTDOWNFIX
	chmod 0755 /etc/systemd/system-shutdown/nvidia.shutdown
fi
INSTALLNVIDIA
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_nvidia
fi
if [ ! -z "$CUSTOM_CMDLINE_PARAMS" ]; then CUSTOM_CMDLINE_PARAMS="module_blacklist=nouveau nvidia-drm.modeset=1 ibt=off $CUSTOM_CMDLINE_PARAMS"; else CUSTOM_CMDLINE_PARAMS="module_blacklist=nouveau nvidia-drm.modeset=1 ibt=off"; fi
}

install_secureboot()
{
cat >"$linuxloopsdir"/chroot"$1"/tmp/install_secureboot <<SECUREBOOT
#!/bin/bash
set -e
mkdir $2/etc/secureboot_key
if [ "$distro" == "almalinux" ] || [ "$distro" == "rockylinux" ]; then
	cp /usr/share/pki/sb-certs/secureboot-kernel-x86_64.cer $2/etc/secureboot_key/MOK.der
elif [ "$distro" == "opensuse" ]; then
	cp /usr/share/efi/x86_64/grub.der $2/etc/secureboot_key/MOK.der
else
	openssl req -newkey rsa:4096 -nodes -keyout $2/etc/secureboot_key/MOK.key -new -x509 -sha256 -days 36500 -subj "/CN=Linuxloops Machine Owner Key/" -out $2/etc/secureboot_key/MOK.crt
	openssl x509 -outform DER -in $2/etc/secureboot_key/MOK.crt -out $2/etc/secureboot_key/MOK.der
	chmod 0640 $2/etc/secureboot_key/*
	cp $2/etc/secureboot_key/MOK.der $2/boot/efi/
	if [ "$distro" == "nixos" ]; then
		exit 0
	elif [ "$distro" == "debian" ] || [ "$distro" == "devuan" ] || [ "$distro" == "elementary" ] || [ "$distro" == "kali" ] || [ "$distro" == "kde-neon" ] || [ "$distro" == "mint" ] || [ "$distro" == "mint-lmde" ] || [ "$distro" == "mxlinux" ] || [ "$distro" == "parrot" ] || [ "$distro" == "pop" ] || [ "$distro" == "ubuntu" ] || [ "$distro" == "ubuntu-lts" ] || [ "$distro" == "zorin" ]; then
		mkdir -p /var/lib/shim-signed/mok
		rm -rf /var/lib/shim-signed/mok/MOK.der /var/lib/shim-signed/mok/MOK.priv
		ln -s /etc/secureboot_key/MOK.der /var/lib/shim-signed/mok/MOK.der
		ln -s /etc/secureboot_key/MOK.key /var/lib/shim-signed/mok/MOK.priv
	else
		mkdir -p /var/lib/dkms
		rm -rf /var/lib/dkms/mok.pub /var/lib/dkms/mok.key
		ln -s /etc/secureboot_key/MOK.der /var/lib/dkms/mok.pub
		ln -s /etc/secureboot_key/MOK.key /var/lib/dkms/mok.key
		if [ "$distro" == "fedora" ]; then
			chown root:akmods /etc/secureboot_key/*
			mkdir -p /etc/pki/akmods/certs /etc/pki/akmods/private
			rm -rf /etc/pki/akmods/certs/public_key.der /etc/pki/akmods/private/private_key.priv
			ln -s /etc/secureboot_key/MOK.der /etc/pki/akmods/certs/public_key.der
			ln -s /etc/secureboot_key/MOK.key /etc/pki/akmods/private/private_key.priv
		fi
	fi
fi
SECUREBOOT
chmod 0755 "$linuxloopsdir"/chroot"$1"/tmp/install_secureboot
}

install_efi()
{
cat >"$linuxloopsdir"/chroot/usr/sbin/reinstall-bootloader <<REINSTALLBOOTLOADER
#!/bin/bash
set -e
cat >/etc/default/grub <<GRUBDEFAULTS
GRUB_DISTRIBUTOR="$distro_name"
GRUB_CMDLINE_LINUX="$bootargs"
GRUB_CMDLINE_LINUX_DEFAULT="quiet splash $cmdline_extra"
GRUB_TIMEOUT_STYLE=menu
GRUB_TIMEOUT=5
GRUB_DISABLE_OS_PROBER=true
GRUB_ENABLE_BLSCFG=false
GRUB_THEME=$grub_theme
GRUBDEFAULTS
if [ -d "/etc/default/grub.d" ]; then for cfgfile in /etc/default/grub.d/*.cfg; do echo '' > \$cfgfile; done; fi
if [ -f /etc/grub.d/05_debian_theme ]; then chmod 0644 /etc/grub.d/05_debian_theme; fi
if [ "$install_type" == "image" ] && [ -f /etc/grub.d/30_uefi-firmware ]; then chmod 0644 /etc/grub.d/30_uefi-firmware; fi
if [ -d /boot/grub2 ]; then
	grub2-mkconfig -o /boot/grub2/grub.cfg
	if [ "$distro" == "almalinux" ] || [ "$distro" == "rockylinux" ]; then exit 0; fi
	if [ "$distro" == "opensuse" ]; then
		shim-install --no-nvram --bootloader-id=$bootloader_id
		exit 0
	fi
else
	if [ ! -z \$(command -v debconf-set-selections) ]; then
		echo "grub-efi-amd64 grub2/update_nvram boolean false" | debconf-set-selections
		echo "grub-efi-amd64 grub-efi/install_devices multiselect /dev/disk/by-uuid/$(blkid -s UUID -o value "$partition_path"1)" | debconf-set-selections
		dpkg-divert --local --rename --add /usr/sbin/grub-install
		cat >/usr/sbin/grub-install <<'GRUBINSTALL'
#!/bin/sh
grub-install.distrib "\$@" --bootloader-id=$bootloader_id
if [ -f /boot/efi/EFI/$bootloader_id/mmx64.efi ] && [ ! -f /boot/efi/EFI/BOOT/mmx64.efi ]; then cp /boot/efi/EFI/$bootloader_id/mmx64.efi /boot/efi/EFI/BOOT/mmx64.efi; fi
GRUBINSTALL
		chmod 0755 /usr/sbin/grub-install
		if grub-install --help | grep -q force-extra-removable; then
			echo "grub-efi-amd64 grub2/force_efi_extra_removable boolean true" | debconf-set-selections
			grub-install --target=x86_64-efi --efi-directory=/boot/efi --no-nvram --force-extra-removable
		else
			grub-install --target=x86_64-efi --efi-directory=/boot/efi --no-nvram
		fi
	elif [ -f /usr/share/grub/sbat.csv ]; then
		if [ "$distro" == "archlinux" ] || [ "$distro" == "artixlinux" ] || [ "$distro" == "manjaro" ] || [ "$distro" == "steamos-like" ]; then
			pacman -Syu --noconfirm git fakeroot
			git clone https://aur.archlinux.org/shim-signed.git /tmp/shim-signed
			chown -R 'nobody':'nobody' /tmp/shim-signed
			su -s /bin/bash nobody -c "cd /tmp/shim-signed && makepkg -s"
			yes | pacman -U /tmp/shim-signed/*.pkg.tar.*
			mkdir -p /etc/pacman.d/hooks
			cat >/etc/pacman.d/hooks/99-secureboot-grub.hook <<PACMANHOOK
[Trigger]
Operation = Install
Operation = Upgrade
Type = File
Target = usr/lib/grub/*

[Action]
Description = Installing GRUB with grub-install
Depends = grub
When = PostTransaction
Exec = /bin/sh -c secureboot-install
PACMANHOOK
			cat >/usr/sbin/secureboot-install <<'SECUREBOOTINSTALL'
#!/bin/bash
grub-install --target=x86_64-efi --efi-directory=/boot/efi --no-nvram --bootloader-id=$bootloader_id --sbat=/usr/share/grub/sbat.csv --modules="all_video boot btrfs cat chain configfile echo efifwsetup efinet ext2 fat font gettext gfxmenu gfxterm gfxterm_background gzio halt help hfsplus iso9660 jpeg keystatus linux loadenv loopback ls lsefi lsefimmap lsefisystab lssal memdisk minicmd normal ntfs part_apple part_msdos part_gpt password_pbkdf2 png probe reboot regexp search search_fs_uuid search_fs_file search_label sleep smbios squash4 terminal test true video xfs zfs zfscrypt zfsinfo"
mkdir -p /boot/efi/EFI/boot
cp /boot/efi/EFI/$bootloader_id/grubx64.efi /boot/efi/EFI/boot/grubx64.efi
cp /usr/share/shim-signed/shimx64.efi /boot/efi/EFI/boot/BOOTX64.EFI
cp /usr/share/shim-signed/shimx64.efi /boot/efi/EFI/$bootloader_id/shimx64.efi
cp /usr/share/shim-signed/mmx64.efi /boot/efi/EFI/boot/mmx64.efi
cp /usr/share/shim-signed/mmx64.efi /boot/efi/EFI/$bootloader_id/mmx64.efi
if [ ! -z "\$(command -v sbverify)" ] && [ ! -z "\$(command -v sbattach)" ] && [ ! -z "\$(command -v sbsign)" ]; then
	for grubefi in \$(find /boot/efi -iname "grubx64.efi"); do
		for sig in \$(sbverify --list \$grubefi | grep '^signature' | sed 's@signature @@g' | sort -r); do sbattach --signum \$sig --remove \$grubefi; done
		sbsign --key /etc/secureboot_key/MOK.key --cert /etc/secureboot_key/MOK.crt --output \$grubefi \$grubefi
	done
fi
SECUREBOOTINSTALL
			chmod 0755 /usr/sbin/secureboot-install
			secureboot-install
		else
			grub-install --target=x86_64-efi --efi-directory=/boot/efi --no-nvram --removable --sbat=/usr/share/grub/sbat.csv --modules="all_video boot btrfs cat chain configfile echo efifwsetup efinet ext2 fat font gettext gfxmenu gfxterm gfxterm_background gzio halt help hfsplus iso9660 jpeg keystatus linux loadenv loopback ls lsefi lsefimmap lsefisystab lssal memdisk minicmd normal ntfs part_apple part_msdos part_gpt password_pbkdf2 png probe reboot regexp search search_fs_uuid search_fs_file search_label sleep smbios squash4 terminal test true video xfs zfs zfscrypt zfsinfo"
		fi
	else
		grub-install --target=x86_64-efi --efi-directory=/boot/efi --no-nvram --removable --modules="all_video boot btrfs cat chain configfile echo efifwsetup efinet ext2 fat font gettext gfxmenu gfxterm gfxterm_background gzio halt help hfsplus iso9660 jpeg keystatus linux loadenv loopback ls lsefi lsefimmap lsefisystab lssal memdisk minicmd normal ntfs part_apple part_msdos part_gpt password_pbkdf2 png probe reboot regexp search search_fs_uuid search_fs_file search_label sleep smbios squash4 terminal test true video xfs zfs zfscrypt zfsinfo"
	fi
	mkdir -p /boot/grub
	grub-mkconfig -o /boot/grub/grub.cfg
fi
for grubefi in \$(find /boot/efi -iname "grubx64.efi"); do
	for sig in \$(sbverify --list \$grubefi | grep '^signature' | sed 's@signature @@g' | sort -r); do sbattach --signum \$sig --remove \$grubefi; done
	sbsign --key /etc/secureboot_key/MOK.key --cert /etc/secureboot_key/MOK.crt --output \$grubefi \$grubefi
done
find /boot/efi -type f -iname fbx64.efi -exec rm {} \;
find /boot/efi -type f -iname bootx64.csv -exec rm {} \;
REINSTALLBOOTLOADER
chmod 0755 "$linuxloopsdir"/chroot/usr/sbin/reinstall-bootloader
cat >"$linuxloopsdir"/chroot/tmp/install_efi <<INSTALLEFI
#!/bin/bash
set -e
reinstall-bootloader
INSTALLEFI
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_efi
}

selinux_fix()
{
cat >"$linuxloopsdir"/chroot/tmp/selinux_fix <<SELINUXFIX
#!/bin/bash
set -e
echo "Please wait while selinux permissions are being applied..."
if [ "$swap_size" -ne 0 ]; then
	mkdir -p /var/swap
	truncate -s 0 /var/swap/swapfile
	setfiles -c /etc/selinux/targeted/policy/policy.* /etc/selinux/targeted/contexts/files/file_contexts /
	chcon -h system_u:object_r:swapfile_t:s0 /var/swap/swapfile
else
	setfiles -c /etc/selinux/targeted/policy/policy.* /etc/selinux/targeted/contexts/files/file_contexts /
fi
SELINUXFIX
chmod 0755 "$linuxloopsdir"/chroot/tmp/selinux_fix
}

cleanup_container()
{
cat >"$linuxloopsdir"/chroot"$1"/tmp/cleanup_container <<CLEANCONTAINER
#!/bin/bash
set -e
if [ -f /etc/pacman.conf ]; then echo -e '[options]\nDisableDownloadTimeout' >> /etc/pacman.conf; fi
rm -rf /etc/cron* /etc/netplan/* /etc/network/* /etc/NetworkManager/* /etc/rc* /etc/runit/* /etc/systemd/* /etc/udev/rules.d/* /usr/lib/NetworkManager/* /usr/lib/systemd/* /usr/lib/udev/rules.d/*
if [ -d /etc/netplan ]; then echo -e 'network:\n    version: 2\n    renderer: NetworkManager\n    ethernets:\n        zz-all-en:\n            match:\n                name: "en*"\n            dhcp4: true\n        zz-all-eth:\n            match:\n                name: "eth*"\n            dhcp4: true' > /etc/netplan/01-netcfg.yaml; fi
if [ "$desktop" == "enlightenment" ] || [ "$desktop" == "enlightenment-full" ]; then
	ln -sf /run/connman/resolv.conf /etc/resolv.conf
	mkdir -p /run/connman
else
	(if [ -L /etc/resolv.conf ]; then cd /etc && mkdir -p \$(dirname \$(readlink resolv.conf)); elif [ ! -z "\$(command -v systemctl)" ]; then mkdir -p /run/systemd/resolve; ln -sf /run/systemd/resolve/stub-resolv.conf /etc/resolv.conf; fi)
fi
echo -e "nameserver 1.1.1.1\nnameserver 9.9.9.9" > /etc/resolv.conf
mkdir -p /etc/network
echo -e "auto lo\niface lo inet loopback" > /etc/network/interfaces
echo "$hostname" > /etc/hostname
echo -e "127.0.0.1 localhost\n127.0.1.1 \$(cat /etc/hostname)\n\n::1 ip6-localhost ip6-loopback\nfe00::0 ip6-localnet\nff00::0 ip6-mcastprefix\nff02::1 ip6-allnodes\nff02::2 ip6-allrouters\nff02::3 ip6-allhosts" > /etc/hosts
mkdir -p /etc/modprobe.d
echo 'blacklist pcspkr' > /etc/modprobe.d/pcspkr.conf
CLEANCONTAINER
chmod 0755 "$linuxloopsdir"/chroot"$1"/tmp/cleanup_container
}

set_locale_and_timezone()
{
cat >"$linuxloopsdir"/chroot"$1"/tmp/set_locale_and_timezone <<SETLOCALE
#!/bin/bash
set -e
if [ ! -f /etc/locale.gen ]; then echo "$CUSTOM_LOCALE" > /etc/locale.gen; else sed -i 's@#"$CUSTOM_LOCALE"@"$CUSTOM_LOCALE"@g' /etc/locale.gen; fi
localedef -i $(echo "$CUSTOM_LOCALE" | cut -d'.' -f1) -f $(echo "$CUSTOM_LOCALE" | cut -d' ' -f2) $(echo "$CUSTOM_LOCALE" | cut -d' ' -f1)
echo "LANG=$(echo "$CUSTOM_LOCALE" | cut -d' ' -f1)" > /etc/locale.conf
echo "KEYMAP=$CUSTOM_KEYMAP" > /etc/vconsole.conf
ln -sf /usr/share/zoneinfo/"$CUSTOM_TIMEZONE" /etc/localtime
SETLOCALE
chmod 0755 "$linuxloopsdir"/chroot"$1"/tmp/set_locale_and_timezone
}

generate_fstab()
{
cat >"$linuxloopsdir"/chroot"$1"/tmp/generate_fstab <<GENERATEFSTAB
#!/bin/bash
set -e
touch /etc/fstab
chmod 0644 /etc/fstab
if [ "$encryption" == "Yes" ]; then
	if [ "$fstype" == "btrfs" ]; then
		echo -e '/dev/disk/by-uuid/$(blkid -s UUID -o value /dev/mapper/luks-$(blkid -s UUID -o value "$partition_path"3)) / btrfs subvol=@,compress=zstd 0 0' >> /etc/fstab
		echo -e '/dev/disk/by-uuid/$(blkid -s UUID -o value /dev/mapper/luks-$(blkid -s UUID -o value "$partition_path"3)) /home btrfs subvol=@home,compress=zstd 0 0' >> /etc/fstab
		if [ "$swap_size" -ne 0 ]; then echo -e '/dev/disk/by-uuid/$(blkid -s UUID -o value /dev/mapper/luks-$(blkid -s UUID -o value "$partition_path"3)) /var/swap btrfs subvol=@swap 0 0' >> /etc/fstab; fi
	else
		echo -e '/dev/disk/by-uuid/$(blkid -s UUID -o value /dev/mapper/luks-$(blkid -s UUID -o value "$partition_path"3)) / ext4 errors=remount-ro 0 1' >> /etc/fstab
	fi
else
	if [ "$fstype" == "btrfs" ]; then
		echo -e '/dev/disk/by-uuid/$(blkid -s UUID -o value "$partition_path"3) / btrfs subvol=@,compress=zstd 0 0' >> /etc/fstab
		echo -e '/dev/disk/by-uuid/$(blkid -s UUID -o value "$partition_path"3) /home btrfs subvol=@home,compress=zstd 0 0' >> /etc/fstab
		if [ "$swap_size" -ne 0 ]; then echo -e '/dev/disk/by-uuid/$(blkid -s UUID -o value "$partition_path"3) /var/swap btrfs subvol=@swap 0 0' >> /etc/fstab; fi
	else
		echo -e '/dev/disk/by-uuid/$(blkid -s UUID -o value "$partition_path"3) / ext4 errors=remount-ro 0 1' >> /etc/fstab
	fi
fi
echo -e '/dev/disk/by-uuid/$(blkid -s UUID -o value "$partition_path"2) /boot ext4 defaults 0 2' >> /etc/fstab
echo -e '/dev/disk/by-uuid/$(blkid -s UUID -o value "$partition_path"1) /boot/efi vfat defaults 0 2' >> /etc/fstab
if [ "$swap_size" -ne 0 ]; then echo -e '/var/swap/swapfile none swap sw 0 0' >> /etc/fstab; fi
GENERATEFSTAB
chmod 0755 "$linuxloopsdir"/chroot"$1"/tmp/generate_fstab
}

cleanup()
{
cat >"$linuxloopsdir"/chroot"$1"/tmp/cleanup <<CLEANUP
#!/bin/bash
set -e
if [ ! -L /etc/resolv.conf ]; then echo '' > /etc/resolv.conf; fi
rm -f /usr/share/xsessions/lightdm-xsession.desktop
CLEANUP
chmod 0755 "$linuxloopsdir"/chroot"$1"/tmp/cleanup
}

chroot_almalinux()
{
return_value=0

download_lxc_image almalinux 9 default

mount_chroot

cat >"$linuxloopsdir"/chroot/tmp/init <<'ALMALINUXINIT'
#!/bin/bash
set -e
export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
export LD_LIBRARY_PATH=/usr/local/lib64:/usr/local/lib:/usr/lib64:/usr/lib:/lib64:/lib
/tmp/cleanup_container
dnf update -y
dnf install -y ca-certificates openssl
dnf reinstall -y "*"
dnf install -y epel-release
rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL*
dnf update -y
dnf install -y kernel kernel-headers dkms linux-firmware iwl100-firmware iwl1000-firmware iwl105-firmware iwl135-firmware iwl2000-firmware iwl2030-firmware iwl3160-firmware iwl5000-firmware iwl5150-firmware iwl6000g2a-firmware iwl6000g2b-firmware iwl6050-firmware iwl7260-firmware wireless-regdb glibc-locale-source ntfs-3g bash sudo ModemManager NetworkManager-bluetooth NetworkManager-wifi wpa_supplicant bluez cryptsetup e2fsprogs ntfsprogs nano acpid curl thermald bash-completion gpg polkit xdg-user-dirs zstd fwupd patchutils net-tools usb_modeswitch upower efibootmgr bind nss-mdns systemd-networkd systemd-resolved dbus-daemon grub2-efi os-prober shim microcode_ctl mokutil selinux-policy-targeted dosfstools zenity
dnf --enablerepo=crb install -y almalinux-sb-certs
systemctl enable dbus.socket dbus-daemon.service named.service NetworkManager.service systemd-resolved.service
systemctl disable systemd-networkd.service systemd-networkd-wait-online.service
systemctl mask systemd-networkd.service systemd-networkd-wait-online.service
systemctl enable --global dbus.socket dbus-daemon.service
/tmp/set_locale_and_timezone
/tmp/install_desktop
/tmp/install_user
/tmp/install_secureboot
if [ -f /tmp/install_custom_packages ]; then /tmp/install_custom_packages; fi
if [ -f /tmp/install_custom_script ]; then /tmp/install_custom_script; fi
/tmp/generate_fstab
/tmp/install_initramfs
/tmp/install_efi
dnf autoremove -y
/tmp/selinux_fix
touch /.autorelabel
/tmp/cleanup
exit
ALMALINUXINIT
chmod 0755 "$linuxloopsdir"/chroot/tmp/init

cleanup_container
set_locale_and_timezone

cat >"$linuxloopsdir"/chroot/tmp/install_user <<ALMALINUXUSER
#!/bin/bash
set -e
useradd -s /bin/bash -m '$username'
echo -e '$userpass\n$userpass' | passwd '$username'
usermod -aG wheel '$username'
echo "%wheel      ALL=(ALL) ALL" > /etc/sudoers.d/90-wheel
ALMALINUXUSER
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_user

case "$desktop" in
	'full')
	install_desktop="
dnf install -y @\"Server with GUI\"
systemctl enable cups-browsed.service
systemctl set-default graphical
"
	;;
esac
cat >"$linuxloopsdir"/chroot/tmp/install_desktop <<ALMALINUXDESKTOP
#!/bin/bash
set -e
if [ "$desktop" == "none" ]; then exit 0; fi
$install_desktop
ALMALINUXDESKTOP
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_desktop

install_secureboot

if [ ! -z "$CUSTOM_PACKAGES" ]; then
	echo -e "#!/bin/bash\nset -e\ndnf install -y $CUSTOM_PACKAGES" > "$linuxloopsdir"/chroot/tmp/install_custom_packages
	chmod 0755 "$linuxloopsdir"/chroot/tmp/install_custom_packages
fi

if [ -f ./custom_script ]; then
	cp ./custom_script "$linuxloopsdir"/chroot/tmp/install_custom_script
	chmod 0755 "$linuxloopsdir"/chroot/tmp/install_custom_script
fi

generate_fstab

cmdline_extra="$CUSTOM_CMDLINE_PARAMS"
install_dracut

install_efi

selinux_fix

cleanup

chroot "$linuxloopsdir"/chroot /tmp/init || return_value=1

[ "$return_value" -eq 0 ] && create_swap

umount_chroot

return $return_value
}

chroot_archlinux()
{
return_value=0

download_lxc_image archlinux current default

mount_chroot

cat >"$linuxloopsdir"/chroot/tmp/init <<'ARCHLINUXINIT'
#!/bin/bash
set -e
export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
export LD_LIBRARY_PATH=/usr/local/lib64:/usr/local/lib:/usr/lib64:/usr/lib:/lib64:/lib
/tmp/cleanup_container
pacman-key --init
pacman-key --populate
pacman -Syu --noconfirm ca-certificates openssl
pacman -Qnq | pacman -Syu --noconfirm -
pacman -Syu --noconfirm linux linux-headers dkms linux-firmware sof-firmware wireless-regdb bash sudo modemmanager networkmanager wpa_supplicant bluez cryptsetup e2fsprogs ntfs-3g nano acpid curl thermald bash-completion gnupg polkit xdg-user-dirs zstd fwupd patchutils net-tools usb_modeswitch upower efibootmgr grub os-prober shim bind amd-ucode intel-ucode sbsigntools mokutil dosfstools btrfs-progs zenity
systemctl enable bluetooth.service ModemManager.service NetworkManager.service systemd-resolved.service
systemctl disable systemd-networkd.service systemd-networkd-wait-online.service
systemctl mask systemd-networkd.service systemd-networkd-wait-online.service
/tmp/set_locale_and_timezone
/tmp/install_desktop
/tmp/install_user
/tmp/install_secureboot
if [ -f /tmp/install_nvidia ]; then /tmp/install_nvidia; fi
if [ -f /tmp/install_surface ]; then /tmp/install_surface; fi
if [ -f /tmp/install_custom_packages ]; then /tmp/install_custom_packages; fi
if [ -f /tmp/install_custom_script ]; then /tmp/install_custom_script; fi
/tmp/generate_fstab
/tmp/install_initramfs
/tmp/install_efi
/tmp/cleanup
exit
ARCHLINUXINIT
chmod 0755 "$linuxloopsdir"/chroot/tmp/init

cleanup_container
set_locale_and_timezone

cat >"$linuxloopsdir"/chroot/tmp/install_user <<ARCHLINUXUSER
#!/bin/bash
set -e
useradd -s /bin/bash -m '$username'
echo -e '$userpass\n$userpass' | passwd '$username'
usermod -aG wheel '$username'
echo "%wheel      ALL=(ALL) ALL" > /etc/sudoers.d/90-wheel
cat >/etc/polkit-1/rules.d/50-default.rules <<'POLKIT'
polkit.addAdminRule(function(action, subject) {
    return ["unix-group:wheel"];
});
POLKIT
ARCHLINUXUSER
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_user

hardware_support="alsa-lib alsa-utils alsa-topology-conf alsa-ucm-conf at-spi2-core avahi cups nss-mdns pulseaudio system-config-printer xorg-server"
basic_packages="gvfs packagekit udisks2 xdg-user-dirs-gtk"
basic_themes="adobe-source-code-pro-fonts adwaita-icon-theme breeze-gtk breeze-icons gnome-backgrounds materia-gtk-theme noto-fonts oxygen-icons papirus-icon-theme ttf-dejavu ttf-roboto"
specific_packages="archlinux-wallpaper"
desktop_base="$hardware_support $basic_packages $basic_themes $specific_packages"
desktop_services="avahi-daemon.service cups.service cups-browsed.service"
case "$desktop" in
	'budgie')
	install_desktop="
pacman -S --noconfirm $desktop_base lightdm lightdm-slick-greeter budgie-desktop nemo tilix network-manager-applet arc-gtk-theme gnome-control-center
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
systemctl enable lightdm.service
"
	;;
	'cinnamon')
	install_desktop="
pacman -S --noconfirm $desktop_base lightdm lightdm-slick-greeter cinnamon gnome-terminal nemo network-manager-applet blueman
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
systemctl enable lightdm.service
"
	;;
	'deepin')
	install_desktop="
pacman -S --noconfirm $desktop_base lightdm lightdm-slick-greeter deepin deepin-terminal network-manager-applet
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
systemctl enable lightdm.service
"
	;;
	'deepin-full')
	install_desktop="
pacman -S --noconfirm $desktop_base lightdm lightdm-slick-greeter deepin deepin-terminal deepin-extra network-manager-applet
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
systemctl enable lightdm.service
"
	;;
	'enlightenment')
	install_desktop="
systemctl disable NetworkManager.service
pacman -S --noconfirm $desktop_base lightdm lightdm-slick-greeter enlightenment connman terminology
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
systemctl enable lightdm.service connman.service
"
	;;
	'gnome')
	install_desktop="
pacman -S --noconfirm $desktop_base gdm gnome-shell gnome-control-center gnome-keyring gnome-backgrounds gnome-terminal nautilus
systemctl enable gdm.service
"
	;;
	'gnome-full')
	install_desktop="
pacman -S --noconfirm $desktop_base gdm gnome
systemctl enable gdm.service
"
	;;
	'i3')
	install_desktop="
pacman -S --noconfirm $desktop_base lightdm lightdm-slick-greeter i3-wm i3status dmenu rxvt-unicode
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
systemctl enable lightdm.service
"
	;;
	'kde')
	install_desktop="
pacman -S --noconfirm $desktop_base sddm qt5-virtualkeyboard plasma-desktop plasma-nm plasma-pa kwin dolphin konsole bluedevil powerdevil systemsettings discover kwallet-pam packagekit-qt5
systemctl enable sddm.service
"
	;;
	'kde-full')
	install_desktop="
pacman -S --noconfirm $desktop_base sddm qt5-virtualkeyboard plasma dolphin konsole packagekit-qt5
systemctl enable sddm.service
"
	;;
	'lxde')
	install_desktop="
pacman -S --noconfirm $desktop_base lightdm lightdm-slick-greeter lxde-common lxde-icon-theme lxappearance lxpanel lxsession lxterminal openbox pcmanfm network-manager-applet blueman
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
systemctl enable lightdm.service
"
	;;
	'lxde-full')
	install_desktop="
pacman -S --noconfirm $desktop_base lightdm lightdm-slick-greeter lxde network-manager-applet blueman
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
systemctl enable lightdm.service
"
	;;
	'lxqt')
	install_desktop="
pacman -S --noconfirm $desktop_base lightdm lightdm-slick-greeter lxqt-config lxqt-notificationd lxqt-panel lxqt-policykit lxqt-powermanagement lxqt-qtplugin lxqt-session lxqt-themes openbox pcmanfm-qt qterminal network-manager-applet blueman breeze-icons oxygen-icons
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
systemctl enable lightdm.service
"
	;;
	'lxqt-full')
	install_desktop="
pacman -S --noconfirm $desktop_base lightdm lightdm-slick-greeter lxqt network-manager-applet blueman breeze-icons oxygen-icons
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
systemctl enable lightdm.service
"
	;;
	'mate')
	install_desktop="
pacman -S --noconfirm $desktop_base lightdm lightdm-slick-greeter mate mate-terminal network-manager-applet blueman mate-media mate-power-manager
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
systemctl enable lightdm.service
"
	;;
	'mate-full')
	install_desktop="
pacman -S --noconfirm $desktop_base lightdm lightdm-slick-greeter mate mate-terminal mate-extra network-manager-applet blueman
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
systemctl enable lightdm.service
"
	;;
	'xfce')
	install_desktop="
pacman -S --noconfirm $desktop_base lightdm lightdm-slick-greeter xfce4 network-manager-applet blueman xfce4-pulseaudio-plugin
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
systemctl enable lightdm.service
"
	;;
	'xfce-full')
	install_desktop="
pacman -S --noconfirm $desktop_base lightdm lightdm-slick-greeter xfce4 xfce4-goodies network-manager-applet blueman
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
systemctl enable lightdm.service
"
	;;
esac
cat >"$linuxloopsdir"/chroot/tmp/install_desktop <<ARCHLINUXDESKTOP
#!/bin/bash
set -e
if [ "$desktop" == "none" ]; then exit 0; fi
$install_desktop
systemctl enable $desktop_services
mkdir -p /usr/share/glib-2.0/schemas
cat >/usr/share/glib-2.0/schemas/zz_linuxloops.gschema.override <<'DCONF'
[org.gnome.desktop.background:Budgie]
picture-uri="file:///usr/share/backgrounds/archlinux/small.png"
[org.gnome.desktop.interface:Budgie]
gtk-theme="Arc"
icon-theme="Papirus"
[org.cinnamon.desktop.background]
picture-uri="file:///usr/share/backgrounds/archlinux/small.png"
[org.cinnamon.desktop.interface]
gtk-theme="Materia"
icon-theme="Papirus"
[org.cinnamon.desktop.wm.preferences]
theme="Materia"
DCONF
if [ ! -z "\$(command -v glib-compile-schemas)" ]; then glib-compile-schemas /usr/share/glib-2.0/schemas/; fi
mkdir -p /etc/skel/.config/xfce4/xfconf/xfce-perchannel-xml
cat > '/etc/skel/.config/xfce4/xfconf/xfce-perchannel-xml/xsettings.xml' <<'XFCETHEME'
<?xml version="1.0" encoding="UTF-8"?>
<channel name="xsettings" version="1.0">
  <property name="Net" type="empty">
    <property name="IconThemeName" type="string" value="Papirus"/>
    <property name="ThemeName" type="string" value="Materia"/>
  </property>
</channel>
XFCETHEME
mkdir -p /etc/xdg/autostart
cat >/etc/xdg/autostart/budgie-nemo.desktop <<'NEMODESKTOP'
[Desktop Entry]
Type=Application
Name=Nemo
Comment=Start Nemo desktop at log in
Exec=nemo-desktop
OnlyShowIn=Budgie;
AutostartCondition=GSettings org.nemo.desktop show-desktop-icons
X-GNOME-AutoRestart=true
NoDisplay=true
NEMODESKTOP
mkdir -p /etc/lightdm /etc/sddm.conf.d
echo -e '[greeter]\nbackground = /usr/share/backgrounds/archlinux/small.png\nuser-background = true' > /etc/lightdm/lightdm-gtk-greeter.conf
echo -e '[Greeter]\nbackground = /usr/share/backgrounds/archlinux/small.png\ndraw-user-backgrounds = true' > /etc/lightdm/slick-greeter.conf
echo -e '[Theme]\nCurrent = breeze' > /etc/sddm.conf.d/99-linuxloops.conf
ARCHLINUXDESKTOP
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_desktop

install_secureboot
if [ ! -z "$nvidia" ] && [ "$nvidia" == "Yes" ]; then install_nvidia; fi
if [ ! -z "$surface" ] && [ "$surface" == "Yes" ]; then install_surface "linux linux-headers"; fi

if [ ! -z "$CUSTOM_PACKAGES" ]; then
	echo -e "#!/bin/bash\nset -e\npacman -S --noconfirm $CUSTOM_PACKAGES" > "$linuxloopsdir"/chroot/tmp/install_custom_packages
	chmod 0755 "$linuxloopsdir"/chroot/tmp/install_custom_packages
fi

if [ -f ./custom_script ]; then
	cp ./custom_script "$linuxloopsdir"/chroot/tmp/install_custom_script
	chmod 0755 "$linuxloopsdir"/chroot/tmp/install_custom_script
fi

generate_fstab

cmdline_extra="$CUSTOM_CMDLINE_PARAMS"
install_initcpio

install_efi

cleanup

chroot "$linuxloopsdir"/chroot /tmp/init || return_value=1

[ "$return_value" -eq 0 ] && create_swap

umount_chroot

return $return_value
}

chroot_artixlinux()
{
return_value=0

download_lxc_image archlinux current default

mount_chroot

cat >"$linuxloopsdir"/chroot/tmp/init <<'ARTIXLINUXINIT'
#!/bin/bash
set -e
export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
export LD_LIBRARY_PATH=/usr/local/lib64:/usr/local/lib:/usr/lib64:/usr/lib:/lib64:/lib
rm /etc/resolv.conf
/tmp/cleanup_container
pacman-key --init
pacman-key --populate
pacman -Syu --noconfirm ca-certificates openssl
rm -rf /var/cache/pacman/pkg/*
rm /etc/pacman.conf /etc/pacman.d/mirrorlist
curl https://gitea.artixlinux.org/packagesP/pacman/raw/branch/master/trunk/pacman.conf -o /etc/pacman.conf
curl https://gitea.artixlinux.org/packagesA/artix-mirrorlist/raw/branch/master/trunk/mirrorlist -o /etc/pacman.d/mirrorlist
sed -i 's@SigLevel    = Required DatabaseOptional@SigLevel    = Never@g' /etc/pacman.conf
sed -i 's@#RemoteFileSigLevel = Required@RemoteFileSigLevel = Optional@g' /etc/pacman.conf
pacman -Sy --noconfirm artix-keyring
pacman-key --populate artix
pacman -Scc --noconfirm && pacman -Syy
rm -f /etc/pacman.conf
curl https://gitea.artixlinux.org/packagesP/pacman/raw/branch/master/trunk/pacman.conf -o /etc/pacman.conf
echo -e '\n[universe]\nServer = https://universe.artixlinux.org/$arch\nServer = https://mirror1.artixlinux.org/universe/$arch\nServer = https://mirror.pascalpuffke.de/artix-universe/$arch\nServer = https://artixlinux.qontinuum.space/artixlinux/universe/os/$arch\nServer = https://mirror1.cl.netactuate.com/artix/universe/$arch\nServer = https://ftp.crifo.org/artix-universe/$arch' >> /etc/pacman.conf
pacman -Rdd --noconfirm systemd systemd-libs systemd-sysvcompat pacman-mirrorlist dbus pam pambase
rm -f /etc/arch-release
curl https://gitea.artixlinux.org/packagesA/artix-mirrorlist/raw/branch/master/trunk/mirrorlist -o /etc/pacman.d/mirrorlist
sed -i '/https:\/\/mirrors.dotsrc.org/d' /etc/pacman.d/mirrorlist
pacman -Syu --noconfirm elogind-runit
pacman -Qnq | pacman -S --noconfirm -
pacman -Sy --noconfirm base runit-system runit elogind-runit mkinitcpio rsync nano lsb-release esysusers etmpfiles artix-branding-base artix-archlinux-support
echo -e "\n[extra]\nInclude = /etc/pacman.d/mirrorlist-arch\n\n[community]\nInclude = /etc/pacman.d/mirrorlist-arch\n\n#[multilib]\n#Include = /etc/pacman.d/mirrorlist-arch" >> /etc/pacman.conf
pacman -Syu --noconfirm linux linux-headers dkms linux-firmware sof-firmware wireless-regdb bash sudo modemmanager networkmanager networkmanager-runit wpa_supplicant bluez bluez-runit cryptsetup e2fsprogs ntfs-3g nano acpid acpid-runit curl thermald bash-completion gnupg polkit xdg-user-dirs zstd fwupd patchutils net-tools usb_modeswitch upower efibootmgr grub os-prober shim bind amd-ucode intel-ucode sbsigntools mokutil dosfstools btrfs-progs zenity
ln -s /etc/runit/sv/bluetoothd /etc/runit/sv/NetworkManager /etc/runit/runsvdir/default/
dbus-uuidgen > /etc/machine-id
/tmp/set_locale_and_timezone
/tmp/install_desktop
/tmp/install_user
/tmp/install_secureboot
if [ -f /tmp/install_nvidia ]; then /tmp/install_nvidia; fi
if [ -f /tmp/install_surface ]; then /tmp/install_surface; fi
if [ -f /tmp/install_custom_packages ]; then /tmp/install_custom_packages; fi
if [ -f /tmp/install_custom_script ]; then /tmp/install_custom_script; fi
/tmp/generate_fstab
/tmp/install_initramfs
/tmp/install_efi
rm -f /etc/resolv.conf
/tmp/cleanup
exit
ARTIXLINUXINIT
chmod 0755 "$linuxloopsdir"/chroot/tmp/init

cleanup_container
set_locale_and_timezone

cat >"$linuxloopsdir"/chroot/tmp/install_user <<ARTIXLINUXUSER
#!/bin/bash
set -e
useradd -s /bin/bash -m '$username'
echo -e '$userpass\n$userpass' | passwd '$username'
usermod -aG audio,wheel '$username'
echo "%wheel      ALL=(ALL) ALL" > /etc/sudoers.d/90-wheel
cat >/etc/polkit-1/rules.d/50-default.rules <<'POLKIT'
polkit.addAdminRule(function(action, subject) {
    return ["unix-group:wheel"];
});
POLKIT
cat >/etc/polkit-1/rules.d/50-org.freedesktop.NetworkManager.rules <<'NETWORKMANAGER'
polkit.addRule(function(action, subject) {
    if (action.id.indexOf("org.freedesktop.NetworkManager.") == 0 && subject.isInGroup("wheel")) {
        return polkit.Result.YES;
    }
});
NETWORKMANAGER
ARTIXLINUXUSER
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_user

hardware_support="alsa-lib alsa-utils alsa-topology-conf alsa-ucm-conf at-spi2-core avahi avahi-runit cups cups-runit nss-mdns pulseaudio system-config-printer xorg-server"
basic_packages="gvfs packagekit udisks2 xdg-user-dirs-gtk"
basic_themes="adobe-source-code-pro-fonts adwaita-icon-theme breeze-gtk breeze-icons gnome-backgrounds materia-gtk-theme noto-fonts oxygen-icons papirus-icon-theme ttf-dejavu ttf-roboto"
specific_packages="artix-backgrounds artix-dark-theme artix-desktop-presets artix-gtk-presets artix-icons artix-qt-presets ttf-roboto-mono pamac-gtk"
desktop_base="$hardware_support $basic_packages $basic_themes $specific_packages"
desktop_services="/etc/runit/sv/avahi-daemon /etc/runit/sv/cupsd"
case "$desktop" in
	'budgie')
	install_desktop="
pacman -S --noconfirm $desktop_base lightdm lightdm-slick-greeter lightdm-runit budgie-desktop nemo tilix network-manager-applet arc-gtk-theme gnome-control-center
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
ln -s $desktop_services /etc/runit/sv/lightdm /etc/runit/runsvdir/default/
"
	;;
	'cinnamon')
	install_desktop="
pacman -S --noconfirm $desktop_base lightdm lightdm-slick-greeter lightdm-runit cinnamon gnome-terminal nemo network-manager-applet blueman
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
ln -s $desktop_services /etc/runit/sv/lightdm /etc/runit/runsvdir/default/
"
	;;
	'deepin')
	install_desktop="
pacman -S --noconfirm $desktop_base lightdm lightdm-slick-greeter lightdm-runit deepin deepin-terminal network-manager-applet
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
ln -s $desktop_services /etc/runit/sv/lightdm /etc/runit/runsvdir/default/
"
	;;
	'deepin-full')
	install_desktop="
pacman -S --noconfirm $desktop_base lightdm lightdm-slick-greeter lightdm-runit deepin deepin-terminal deepin-extra network-manager-applet
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
ln -s $desktop_services /etc/runit/sv/lightdm /etc/runit/runsvdir/default/
"
	;;
	'enlightenment')
	install_desktop="
rm /etc/runit/runsvdir/default/NetworkManager
pacman -S --noconfirm $desktop_base lightdm lightdm-slick-greeter lightdm-runit enlightenment terminology connman connman-runit
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
ln -s $desktop_services /etc/runit/sv/lightdm /etc/runit/sv/connmand /etc/runit/runsvdir/default/
"
	;;
	'gnome')
	install_desktop="
pacman -S --noconfirm $desktop_base gdm gdm-runit gnome-shell gnome-control-center gnome-keyring gnome-terminal nautilus
ln -s $desktop_services /etc/runit/sv/gdm /etc/runit/runsvdir/default/
"
	;;
	'gnome-full')
	install_desktop="
pacman -S --noconfirm $desktop_base gdm gdm-runit gnome
ln -s $desktop_services /etc/runit/sv/gdm /etc/runit/runsvdir/default/
"
	;;
	'i3')
	install_desktop="
pacman -S --noconfirm $desktop_base lightdm lightdm-slick-greeter lightdm-runit i3-wm i3status dmenu rxvt-unicode
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
ln -s $desktop_services /etc/runit/sv/lightdm /etc/runit/runsvdir/default/
"
	;;
	'kde')
	install_desktop="
pacman -S --noconfirm $desktop_base sddm qt5-virtualkeyboard sddm-runit sddm-theme-artix plasma-desktop plasma-nm plasma-pa kwin dolphin konsole bluedevil powerdevil systemsettings discover kwallet-pam packagekit-qt5 falkon
ln -s $desktop_services /etc/runit/sv/sddm /etc/runit/runsvdir/default/
"
	;;
	'kde-full')
	install_desktop="
pacman -S --noconfirm $desktop_base sddm qt5-virtualkeyboard sddm-runit sddm-theme-artix plasma dolphin konsole falkon
ln -s $desktop_services /etc/runit/sv/sddm /etc/runit/runsvdir/default/
"
	;;
	'lxde')
	install_desktop="
pacman -S --noconfirm $desktop_base lightdm lightdm-slick-greeter lightdm-runit lxde-common lxde-icon-theme lxappearance lxpanel lxsession lxterminal openbox pcmanfm network-manager-applet blueman
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
ln -s $desktop_services /etc/runit/sv/lightdm /etc/runit/runsvdir/default/
"
	;;
	'lxde-full')
	install_desktop="
pacman -S --noconfirm $desktop_base lightdm lightdm-slick-greeter lightdm-runit lxde network-manager-applet blueman
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
ln -s $desktop_services /etc/runit/sv/lightdm /etc/runit/runsvdir/default/
"
	;;
	'lxqt')
	install_desktop="
pacman -S --noconfirm $desktop_base lightdm lightdm-slick-greeter lightdm-runit lxqt-config lxqt-notificationd lxqt-panel lxqt-policykit lxqt-powermanagement lxqt-qtplugin lxqt-session lxqt-themes openbox pcmanfm-qt qterminal network-manager-applet blueman
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
ln -s $desktop_services /etc/runit/sv/lightdm /etc/runit/runsvdir/default/
"
	;;
	'lxqt-full')
	install_desktop="
pacman -S --noconfirm $desktop_base lightdm lightdm-slick-greeter lightdm-runit lxqt network-manager-applet blueman
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
ln -s $desktop_services /etc/runit/sv/lightdm /etc/runit/runsvdir/default/
"
	;;
	'mate')
	install_desktop="
pacman -S --noconfirm $desktop_base lightdm lightdm-slick-greeter lightdm-runit mate mate-terminal network-manager-applet blueman mate-media mate-power-manager mate-applets
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
ln -s $desktop_services /etc/runit/sv/lightdm /etc/runit/runsvdir/default/
"
	;;
	'mate-full')
	install_desktop="
pacman -S --noconfirm $desktop_base lightdm lightdm-slick-greeter lightdm-runit mate mate-terminal mate-extra network-manager-applet blueman
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
ln -s $desktop_services /etc/runit/sv/lightdm /etc/runit/runsvdir/default/
"
	;;
	'xfce')
	install_desktop="
pacman -S --noconfirm $desktop_base lightdm lightdm-slick-greeter lightdm-runit xfce4 xfce4-whiskermenu-plugin network-manager-applet blueman xfce4-pulseaudio-plugin
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
ln -s $desktop_services /etc/runit/sv/lightdm /etc/runit/runsvdir/default/
"
	;;
	'xfce-full')
	install_desktop="
pacman -S --noconfirm $desktop_base lightdm lightdm-slick-greeter lightdm-runit xfce4 xfce4-goodies network-manager-applet blueman
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
ln -s $desktop_services /etc/runit/sv/lightdm /etc/runit/runsvdir/default/
"
	;;
esac
cat >"$linuxloopsdir"/chroot/tmp/install_desktop <<ARTIXLINUXDESKTOP
#!/bin/bash
set -e
if [ "$desktop" == "none" ]; then exit 0; fi
$install_desktop
mkdir -p /usr/share/glib-2.0/schemas
cat >/usr/share/glib-2.0/schemas/zz_linuxloops.gschema.override <<'DCONF'
[org.gnome.desktop.background:Budgie]
picture-uri="file:///usr/share/backgrounds/Artix_dna_spiral_dark.jpg"
[org.gnome.desktop.interface:Budgie]
gtk-theme="Arc"
icon-theme="Papirus"
[org.cinnamon.desktop.background]
picture-uri="file:///usr/share/backgrounds/Artix_dna_spiral_dark.jpg"
[org.cinnamon.desktop.interface]
gtk-theme="Materia"
icon-theme="Papirus"
[org.cinnamon.desktop.wm.preferences]
theme="Materia"
DCONF
if [ ! -z "\$(command -v glib-compile-schemas)" ]; then glib-compile-schemas /usr/share/glib-2.0/schemas/; fi
mkdir -p /etc/skel/.config/xfce4/xfconf/xfce-perchannel-xml
cat > '/etc/skel/.config/xfce4/xfconf/xfce-perchannel-xml/xsettings.xml' <<'XFCETHEME'
<?xml version="1.0" encoding="UTF-8"?>
<channel name="xsettings" version="1.0">
  <property name="Net" type="empty">
    <property name="IconThemeName" type="string" value="Papirus"/>
    <property name="ThemeName" type="string" value="Materia"/>
  </property>
</channel>
XFCETHEME
mkdir -p /etc/xdg/autostart
cat >/etc/xdg/autostart/budgie-nemo.desktop <<'NEMODESKTOP'
[Desktop Entry]
Type=Application
Name=Nemo
Comment=Start Nemo desktop at log in
Exec=nemo-desktop
OnlyShowIn=Budgie;
AutostartCondition=GSettings org.nemo.desktop show-desktop-icons
X-GNOME-AutoRestart=true
NoDisplay=true
NEMODESKTOP
mkdir -p /etc/lightdm /etc/sddm.conf.d
echo -e '[greeter]\nbackground = /usr/share/backgrounds/Artix_dna_spiral_dark.jpg\nuser-background = true' > /etc/lightdm/lightdm-gtk-greeter.conf
echo -e '[Greeter]\nbackground = /usr/share/backgrounds/Artix_dna_spiral_dark.jpg\ndraw-user-backgrounds = true' > /etc/lightdm/slick-greeter.conf
echo -e '[Theme]\nCurrent = artix' > /etc/sddm.conf.d/99-linuxloops.conf
ARTIXLINUXDESKTOP
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_desktop

install_secureboot
if [ ! -z "$nvidia" ] && [ "$nvidia" == "Yes" ]; then install_nvidia; fi
if [ ! -z "$surface" ] && [ "$surface" == "Yes" ]; then install_surface "linux linux-headers"; fi

if [ ! -z "$CUSTOM_PACKAGES" ]; then
	echo -e "#!/bin/bash\nset -e\npacman -S --noconfirm $CUSTOM_PACKAGES" > "$linuxloopsdir"/chroot/tmp/install_custom_packages
	chmod 0755 "$linuxloopsdir"/chroot/tmp/install_custom_packages
fi

if [ -f ./custom_script ]; then
	cp ./custom_script "$linuxloopsdir"/chroot/tmp/install_custom_script
	chmod 0755 "$linuxloopsdir"/chroot/tmp/install_custom_script
fi

generate_fstab

cmdline_extra="$CUSTOM_CMDLINE_PARAMS"
install_initcpio

install_efi

cleanup

chroot "$linuxloopsdir"/chroot /tmp/init || return_value=1

[ "$return_value" -eq 0 ] && create_swap

umount_chroot

return $return_value
}

chroot_brunch()
{
return_value=0

mount --bind "$linuxloopsdir"/chroot "$linuxloopsdir"/chroot
mount --make-rprivate "$linuxloopsdir"/chroot
mkdir -p "$linuxloopsdir"/chroot/installroot/mnt
mount --bind "$linuxloopsdir"/chroot/installroot "$linuxloopsdir"/chroot/installroot
mount --make-rprivate "$linuxloopsdir"/chroot/installroot

download_lxc_image archlinux current default /installroot

mount --rbind "$linuxloopsdir"/chroot "$linuxloopsdir"/chroot/installroot/mnt
mount --make-rprivate "$linuxloopsdir"/chroot/installroot/mnt

mount_chroot /installroot

cat >"$linuxloopsdir"/chroot/installroot/tmp/init <<'BRUNCHINIT'
#!/bin/bash
set -e
export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
export LD_LIBRARY_PATH=/usr/local/lib64:/usr/local/lib:/usr/lib64:/usr/lib:/lib64:/lib
/tmp/cleanup_container
pacman-key --init
pacman-key --populate
pacman -Syu --noconfirm ca-certificates openssl cpio unzip ntfs-3g parted dosfstools
/tmp/install
/tmp/cleanup
exit
BRUNCHINIT
chmod 0755 "$linuxloopsdir"/chroot/installroot/tmp/init

cleanup_container /installroot

cat >"$linuxloopsdir"/chroot/installroot/tmp/install <<BRUNCHINSTALL
#!/bin/bash
set -e
mkdir -p /isomount/data /isomount/efi /isomount/rootc /isomount/tmp
mkfs.ext4 -E nodiscard -F -L "H-STATE" "$partition_path"1
mount "$partition_path"1 /isomount/data
if [ "\$(echo $desktop | cut -d'-' -f1)" == "unstable" ]; then
	curl -L \$(curl -L -s "https://api.github.com/repos/sebanc/brunch-unstable/releases/latest" | grep browser_download_url | tr -d '"' | sed 's#browser_download_url: ##g') -o /isomount/data/brunch.tar.gz || { echo -e "Brunch download failed."; return 1; }
else
	curl -L \$(curl -L -s "https://api.github.com/repos/sebanc/brunch/releases/latest" | grep browser_download_url | tr -d '"' | sed 's#browser_download_url: ##g') -o /isomount/data/brunch.tar.gz || { echo -e "Brunch download failed."; return 1; }
fi
mkdir -p /isomount/data/brunch
tar zxf /isomount/data/brunch.tar.gz -C /isomount/data/brunch || { echo -e "Failed to extract Brunch archive."; return 1; }
rm /isomount/data/brunch.tar.gz
curl -L \$(curl -L https://dl.google.com/dl/edgedl/chromeos/recovery/recovery.conf | grep .bin.zip | cut -d'=' -f2 | grep "\$(echo $desktop | cut -d'-' -f2)" | sort -n | tail -1) -o /isomount/data/recovery.zip || { echo -e "ChromeOS recovery image download failed."; return 1; }
bsdtar -xvf /isomount/data/recovery.zip -C /root || { echo -e "Failed to extract the recovery image."; return 1; }
rm -f /isomount/data/recovery.zip
isomount="\$(losetup --show -fP \$(ls /root/chromeos_*.bin))"
for (( i=1; i<=12; i++ )); do
	case \$i in
		1)
			continue
		;;
		2)
			dd if="\$isomount"p4 of="$partition_path""\$i" bs=1M conv=notrunc status=progress
			continue
		;;
		5)
			dd if="\$isomount"p3 of="$partition_path""\$i" bs=1M conv=notrunc status=progress
			continue
		;;
		7)
			mount /isomount/data/brunch/rootc.img /isomount/tmp
			mkfs.ext4 -E nodiscard -F -L "ROOT-C" "$partition_path""\$i"
			if tune2fs -l "$partition_path""\$i" | grep 'Filesystem features' | grep -q -w large_dir; then tune2fs -O ^large_dir "$partition_path""\$i"; fi
			if tune2fs -l "$partition_path""\$i" | grep 'Filesystem features' | grep -q -w metadata_csum_seed; then tune2fs -O ^metadata_csum_seed "$partition_path""\$i"; fi
			if tune2fs -l "$partition_path""\$i" | grep 'Filesystem features' | grep -q -w orphan_file; then tune2fs -O ^orphan_file "$partition_path""\$i"; fi
			mount "$partition_path""\$i" /isomount/rootc
			cp -r /isomount/tmp/* /isomount/rootc/
			umount /isomount/rootc
			umount /isomount/tmp
			continue
		;;
		9|10|11)
			continue
		;;
		12)
			mount /isomount/data/brunch/efi_secure.img /isomount/tmp
			mkfs.fat -n 'EFI' "$partition_path""\$i"
			mount "$partition_path""\$i" /isomount/efi
			cp -r /isomount/tmp/* /isomount/efi/
			umount /isomount/efi
			umount /isomount/tmp
			continue
		;;
		*)
			part_source=\$i
		;;
	esac
	dd if="\$isomount"p"\$part_source" of="$partition_path""\$i" bs=1M conv=notrunc status=progress
done
losetup -d "\$isomount"
rm -rf /isomount/data/*
umount /isomount/data
if [ "$install_type" == "image" ]; then mkdir -p /mnt/etc/secureboot_key; curl -L https://github.com/sebanc/brunch/raw/main/brunch.der -o /mnt/etc/secureboot_key/MOK.der; fi
BRUNCHINSTALL
chmod 0755 "$linuxloopsdir"/chroot/installroot/tmp/install

cleanup /installroot

chroot "$linuxloopsdir"/chroot/installroot /tmp/init || return_value=1

umount_chroot /installroot

umount -R "$linuxloopsdir"/chroot/installroot/mnt
umount "$linuxloopsdir"/chroot/installroot
umount "$linuxloopsdir"/chroot

return $return_value
}

chroot_chromeos-flex()
{
return_value=0

mount --bind "$linuxloopsdir"/chroot "$linuxloopsdir"/chroot
mount --make-rprivate "$linuxloopsdir"/chroot
mkdir -p "$linuxloopsdir"/chroot/installroot/mnt
mount --bind "$linuxloopsdir"/chroot/installroot "$linuxloopsdir"/chroot/installroot
mount --make-rprivate "$linuxloopsdir"/chroot/installroot

download_lxc_image archlinux current default /installroot

mount --rbind "$linuxloopsdir"/chroot "$linuxloopsdir"/chroot/installroot/mnt
mount --make-rprivate "$linuxloopsdir"/chroot/installroot/mnt

mount_chroot /installroot

cat >"$linuxloopsdir"/chroot/installroot/tmp/init <<'CHROMEOSFLEXINIT'
#!/bin/bash
set -e
export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
export LD_LIBRARY_PATH=/usr/local/lib64:/usr/local/lib:/usr/lib64:/usr/lib:/lib64:/lib
/tmp/cleanup_container
pacman-key --init
pacman-key --populate
pacman -Syu --noconfirm ca-certificates openssl busybox cpio ntfs-3g parted sbsigntools dosfstools
/tmp/install
/tmp/cleanup
exit
CHROMEOSFLEXINIT
chmod 0755 "$linuxloopsdir"/chroot/installroot/tmp/init

cleanup_container /installroot

if [ "$desktop" == "full-devmode" ]; then cmdline_extra="cros_debug $CUSTOM_CMDLINE_PARAMS"; else cmdline_extra="$CUSTOM_CMDLINE_PARAMS"; fi

cat >"$linuxloopsdir"/chroot/installroot/tmp/install <<CHROMEOSFLEXINSTALL
#!/bin/bash
set -e
mkdir -p /isomount/data /isomount/roota /isomount/rootc /isomount/efi /isomount/tmp
mkfs.ext4 -E nodiscard -F -L "H-STATE" "$partition_path"1
mount "$partition_path"1 /isomount/data
curl -L "\$(curl -L https://dl.google.com/dl/edgedl/chromeos/recovery/cloudready_recovery.conf | grep .bin.zip | tail -1 | cut -d'=' -f2)" -o /isomount/data/recovery.zip || { echo -e "ChromeOS recovery image download failed."; return 1; }
bsdtar -xvf /isomount/data/recovery.zip -C /root || { echo -e "Failed to extract the recovery image."; return 1; }
rm -f /isomount/data/recovery.zip
isomount="\$(losetup --show -fP \$(ls /root/chromeos_*.bin))"
for (( i=1; i<=12; i++ )); do
	(echo "x"; echo "u"; echo "\$i"; echo "\$(blkid -o value -s PARTUUID "\$isomount"p"\$i")"; echo "r"; sleep 5; echo "w") | fdisk "$destination_device" || { echo -e "Partition UUID update failed. Exiting.\n"; exit 1; }
	case \$i in
		1)
			continue
		;;
		7)
			mkfs.ext4 -E nodiscard -F -L "ROOT-C" "$partition_path""\$i"
			if tune2fs -l "$partition_path""\$i" | grep 'Filesystem features' | grep -q -w large_dir; then tune2fs -O ^large_dir "$partition_path""\$i"; fi
			if tune2fs -l "$partition_path""\$i" | grep 'Filesystem features' | grep -q -w metadata_csum_seed; then tune2fs -O ^metadata_csum_seed "$partition_path""\$i"; fi
			if tune2fs -l "$partition_path""\$i" | grep 'Filesystem features' | grep -q -w orphan_file; then tune2fs -O ^orphan_file "$partition_path""\$i"; fi
			continue
		;;
		12)
			mount "\$isomount"p12 /isomount/tmp
			mkfs.fat -n 'EFI' "$partition_path""\$i"
			mount "$partition_path""\$i" /isomount/efi
			cp -r /isomount/tmp/* /isomount/efi/
			umount /isomount/efi
			umount /isomount/tmp
			continue
		;;
		*)
			part_source=\$i
		;;
	esac
	dd if="\$isomount"p"\$part_source" of="$partition_path""\$i" bs=1M conv=notrunc status=progress
done
losetup -d "\$isomount"
rm -rf /isomount/data/*
umount /isomount/data
if [ "$install_type" == "image" ]; then
	mount "$partition_path"7 /isomount/rootc
	mkdir -p /isomount/rootc/initramfs
	cd /isomount/rootc/initramfs
	mkdir -p etc proc sys tmp usr/bin usr/lib usr/mbin usr/sbin
	ln -s /usr/bin bin
	ln -s /usr/lib lib
	ln -s /usr/lib lib64
	ln -s /usr/sbin sbin
	for i in \$(ldd /usr/bin/bash | cut -d' ' -f3); do cp "\$i" ./usr/lib/; done
	cp -a /usr/bin/bash ./usr/bin/
	for i in \$(ldd /usr/bin/busybox | cut -d' ' -f3); do cp "\$i" ./usr/lib/; done
	cp -a /usr/bin/busybox ./usr/bin/
	for i in \$(ldd /usr/bin/blkid | cut -d' ' -f3); do cp "\$i" ./usr/lib/; done
	cp -a /usr/bin/blkid ./usr/mbin/
	for i in \$(ldd /usr/bin/e2fsck | cut -d' ' -f3); do cp "\$i" ./usr/lib/; done
	cp -a /usr/bin/e2fsck ./usr/mbin/
	for i in \$(ldd /usr/bin/losetup | cut -d' ' -f3); do cp "\$i" ./usr/lib/; done
	cp -a /usr/bin/losetup ./usr/mbin/
	for i in \$(ldd /usr/bin/mkfs.ext4 | cut -d' ' -f3); do cp "\$i" ./usr/lib/; done
	cp -a /usr/bin/mkfs.ext4 ./usr/mbin/
	for i in \$(ldd /usr/bin/modprobe | cut -d' ' -f3); do cp "\$i" ./usr/lib/; done
	cp -a /usr/bin/modprobe ./usr/mbin/
	for i in \$(ldd /usr/bin/ntfs-3g | cut -d' ' -f3); do cp "\$i" ./usr/lib/; done
	cp -a /usr/bin/ntfs-3g ./usr/mbin/
	for i in \$(ldd /usr/bin/ntfsfix | cut -d' ' -f3); do cp "\$i" ./usr/lib/; done
	cp -a /usr/bin/ntfsfix ./usr/mbin/
	cp -a /usr/lib/ld-linux-x86-64.so.2 ./usr/lib/
	cp -a /usr/lib/libgcc_s.so.1 ./usr/lib/
	cat >./init <<'INITSCRIPT'
#!/usr/bin/bash
export PATH=/usr/mbin:/usr/sbin:/usr/bin
export LD_LIBRARY_PATH=/usr/lib

busybox mount -t proc none /proc
busybox mount -t sysfs none /sys
busybox mount -t devtmpfs none /dev
busybox --install -s
ln -s /proc/mounts /etc/mtab

if [ ! -z "\$flex_debug" ] && [ "\$flex_debug" -eq 1 ]; then
	echo 0 0 0 0 > /proc/sys/kernel/printk
	exec sh
fi

if { [ ! -z "\$img_uuid" ] || [ ! -z "\$img_part" ]; } && [ ! -z "\$img_path" ]; then
	flex_timeout=0
	until false; do
		if [ ! -z "\$img_uuid" ]; then img_part="\$(blkid --match-token PARTUUID=\$img_uuid | cut -d':' -f1)"; fi
		echo "\$img_uuid | \$img_part"
		if [ -b "\$img_part" ]; then break; fi
		if [ \$flex_timeout == 10 ]; then echo "The boot partition was not found, falling back to shell..." > /dev/kmsg; exec sh; fi
		flex_timeout=\$(( \$flex_timeout + 1 ))
		sleep 1
	done
else
	echo "The grub configuration is invalid, falling back to shell..." > /dev/kmsg
	exec sh
fi

if [ -e "\$img_part" ] && [ ! -z "\$img_path" ]; then
	mkdir /mainroot
	fstype=\$(blkid -s TYPE -o value "\$img_part")
	if [ "\$fstype" == "ntfs" ]; then
		ntfs-3g "\$img_part" /mainroot
	else
		mount -n "\$img_part" /mainroot
	fi
	if [ -f /mainroot/"\$img_path" ]; then
		if [ ! -b /dev/loop0 ]; then mknod -m660 /dev/loop0 b 7 0; fi
		losetup --direct-io=off -P /dev/loop0 /mainroot"\$img_path"
		bootdevice=/dev/loop0
	else
		echo "flex: ChromeOS loopfile \$img_path not found on device \$img_part..." > /dev/kmsg
		exec sh
	fi
fi

if [ ! -z "\$flex_debug" ] && [ "\$flex_debug" -eq 2 ]; then
	echo 0 0 0 0 > /proc/sys/kernel/printk
	exec sh
fi

if [ "\$bootimage" == "B" ]; then bootpart=5; else bootpart=3; fi
printf '\000' | dd of="\$bootdevice"p"\$bootpart" seek=\$((0x464 + 3)) conv=notrunc count=1 bs=1 status=none
mkdir -p chromeosroot
mount "\$bootdevice"p"\$bootpart" /chromeosroot

touch /chromeosroot/.nodelta
cat >/chromeosroot/usr/sbin/mount-encrypted <<'MOUNTS'
#!/bin/bash
if [ \$# -eq 0 ]; then
	if ! mountpoint -q /var && ! mountpoint -q /home/chronos; then
		mkdir -p /mnt/stateful_partition/encrypted/var
		mount -n --bind /mnt/stateful_partition/encrypted/var /var || exit 1
		mkdir -p /mnt/stateful_partition/encrypted/chronos
		mount -n --bind /mnt/stateful_partition/encrypted/chronos /home/chronos || exit 1
	fi
elif [ "\$1" == "umount" ]; then
	umount /home/chronos
	umount /var
fi
MOUNTS
chmod 0755 /chromeosroot/usr/sbin/mount-encrypted
mv /chromeosroot/bin/chroot /chromeosroot/bin/chroot.orig
cat >/chromeosroot/bin/chroot <<'CHROOT'
#!/bin/bash
if [ "\$EUID" -eq 0 ] && [ "\$1" == "." ] && [ "\$2" == "/usr/bin/cros_installer" ]; then
rootpath=\$(echo "\$(rootdev)" | sed 's/.\$//')
rm -rf /mnt/stateful_partition/newroot /mnt/stateful_partition/rootc
mkdir -p /mnt/stateful_partition/newroot /mnt/stateful_partition/rootc
mount "\$rootpath"7 /mnt/stateful_partition/rootc
if [ "\$(rootdev)" == "\$rootpath"3 ]; then
echo "bootimage=B" > /mnt/stateful_partition/rootc/bootimage.cfg
else
echo "bootimage=A" > /mnt/stateful_partition/rootc/bootimage.cfg
fi
find ./lib/firmware | bsdcpio -o -H newc > /mnt/stateful_partition/rootc/firmwares.img
find ./lib/modules | bsdcpio -o -H newc > /mnt/stateful_partition/rootc/modules.img
umount /mnt/stateful_partition/rootc
chroot.orig "\$@"
else
chroot.orig "\$@"
fi
CHROOT
chmod 0755 /chromeosroot/bin/chroot

umount /chromeosroot
printf '\377' | dd of="\$bootdevice"p"\$bootpart" seek=\$((0x464 + 3)) conv=notrunc count=1 bs=1 status=none
mount -o ro "\$bootdevice"p"\$bootpart" /chromeosroot

mount --move /dev /chromeosroot/dev
mount --move /sys /chromeosroot/sys
mount --move /proc /chromeosroot/proc

sync

if [ ! -z "\$flex_debug" ] && [ "\$flex_debug" -eq 3 ]; then
	echo 0 0 0 0 > /roota/proc/sys/kernel/printk
	exec sh
fi

exec switch_root /chromeosroot /sbin/init "\$@"
INITSCRIPT
	chmod 0755 ./init
	find . | cpio -o -H newc > /isomount/rootc/initramfs.img
	mount -o ro "$partition_path"3 /isomount/roota
	(cd /isomount/roota; find ./lib/firmware | cpio -o -H newc > /isomount/rootc/firmwares.img)
	(cd /isomount/roota; find ./lib/modules | cpio -o -H newc > /isomount/rootc/modules.img)
	umount /isomount/roota
	cd ../../..
	rm -r /isomount/rootc/initramfs
	umount /isomount/rootc
fi
mount "$partition_path"12 /isomount/efi
if [ "$desktop" == "full-devmode" ]; then
	sed -i 's@defaultA=2@defaultA=0@g' /isomount/efi/efi/boot/grub.cfg
	sed -i 's@defaultB=3@defaultB=1@g' /isomount/efi/efi/boot/grub.cfg
	sed -i 's@menuentry "local image A" {@local_image_A="@g' /isomount/efi/efi/boot/grub.cfg
	sed -i 's@menuentry "local image B" {@local_image_B="@g' /isomount/efi/efi/boot/grub.cfg
	sed -i 's@menuentry "verified image A" {@verified_image_A="@g' /isomount/efi/efi/boot/grub.cfg
	sed -i 's@menuentry "verified image B" {@verified_image_B="@g' /isomount/efi/efi/boot/grub.cfg
	sed -i 's@menuentry "Alternate USB Boot" {@Alternate_USB_Boot="@g' /isomount/efi/efi/boot/grub.cfg
	sed -i 's@}@"@g' /isomount/efi/efi/boot/grub.cfg
	cat >>/isomount/efi/efi/boot/grub.cfg <<MODEDGRUB

menuentry "local image A" {
  \\\$local_image_A $cmdline_extra
}

menuentry "local image B" {
  \\\$local_image_B $cmdline_extra
}

menuentry "verified image A" {
  \\\$verified_image_A $cmdline_extra
}

menuentry "verified image B" {
  \\\$verified_image_B $cmdline_extra
}
MODEDGRUB
fi
if [ "$install_type" == "image" ]; then
	mkdir -p /mnt/etc/secureboot_key
	sbattach --signum 1 --detach /mnt/etc/secureboot_key/MOK.tmp /isomount/efi/efi/boot/grubx64.efi
	openssl pkcs7 -print_certs -inform der -in /mnt/etc/secureboot_key/MOK.tmp -out /mnt/etc/secureboot_key/MOK.pem
	openssl x509 -outform DER -in /mnt/etc/secureboot_key/MOK.pem -out /mnt/etc/secureboot_key/MOK.der
fi
umount /isomount/efi
CHROMEOSFLEXINSTALL
chmod 0755 "$linuxloopsdir"/chroot/installroot/tmp/install

cleanup /installroot

chroot "$linuxloopsdir"/chroot/installroot /tmp/init || return_value=1

umount_chroot /installroot

umount -R "$linuxloopsdir"/chroot/installroot/mnt
umount "$linuxloopsdir"/chroot/installroot
umount "$linuxloopsdir"/chroot

return $return_value
}

chroot_debian()
{
return_value=0

download_lxc_image debian bullseye default

mount_chroot

cat >"$linuxloopsdir"/chroot/tmp/init <<'DEBIANINIT'
#!/bin/bash
set -e
export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
export LD_LIBRARY_PATH=/usr/local/lib64:/usr/local/lib:/usr/lib64:/usr/lib:/lib64:/lib
/tmp/cleanup_container
yes | DEBIAN_FRONTEND=noninteractive apt update
yes | DEBIAN_FRONTEND=noninteractive apt install ca-certificates openssl
echo -e 'Dpkg::Options {\n  "--force-confnew";\n};' > /etc/apt/apt.conf.d/71debconf
sed -i 's@ main@ main contrib non-free@g' /etc/apt/sources.list
echo -e 'APT::Install-Recommends "0";\nAPT::Get::Install-Recommends "false";' > /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install -o APT::Immediate-Configure=false --reinstall $(apt list --installed | cut -d'/' -f1 | sed '1d' | sed -z 's@\n@ @g')
yes | DEBIAN_FRONTEND=noninteractive dpkg --configure -a
echo -e 'Dpkg::Options {\n  "--force-confdef";\n};' > /etc/apt/apt.conf.d/71debconf
yes | DEBIAN_FRONTEND=noninteractive apt install apt-utils console-setup kmod
yes | DEBIAN_FRONTEND=noninteractive apt update
yes | DEBIAN_FRONTEND=noninteractive apt install linux-image-amd64 linux-headers-amd64 dkms firmware-linux firmware-atheros firmware-iwlwifi firmware-realtek wireless-regdb bash sudo modemmanager network-manager wpasupplicant bluez cryptsetup-initramfs e2fsprogs ntfs-3g nano acpid curl thermald bash-completion gnupg-utils policykit-1 xdg-user-dirs zstd fwupd-signed patchutils net-tools usb-modeswitch upower efibootmgr grub-efi grub-efi-amd64-signed os-prober shim-signed bind9-host dns-root-data amd64-microcode intel-microcode lsb-release sbsigntool mokutil dosfstools btrfs-progs zenity
echo -e 'sign_tool="/etc/dkms/sign_helper.sh"' >> /etc/dkms/framework.conf
echo -e '#!/bin/sh\n/lib/modules/"$1"/build/scripts/sign-file sha512 /var/lib/shim-signed/mok/MOK.priv /var/lib/shim-signed/mok/MOK.der "$2"' > /etc/dkms/sign_helper.sh
chmod 0755 /etc/dkms/sign_helper.sh
systemctl enable systemd-resolved.service
systemctl disable systemd-networkd.service systemd-networkd-wait-online.service
systemctl mask systemd-networkd.service systemd-networkd-wait-online.service
/tmp/set_locale_and_timezone
/tmp/install_desktop
/tmp/install_user
/tmp/install_secureboot
if [ -f /tmp/install_nvidia ]; then /tmp/install_nvidia; fi
if [ -f /tmp/install_surface ]; then /tmp/install_surface; fi
if [ -f /tmp/install_custom_packages ]; then /tmp/install_custom_packages; fi
if [ -f /tmp/install_custom_script ]; then /tmp/install_custom_script; fi
/tmp/generate_fstab
/tmp/install_initramfs
/tmp/install_efi
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt autoremove
rm -f /etc/resolv.conf
/tmp/cleanup
exit
DEBIANINIT
chmod 0755 "$linuxloopsdir"/chroot/tmp/init

cleanup_container
set_locale_and_timezone

cat >"$linuxloopsdir"/chroot/tmp/install_user <<DEBIANUSER
#!/bin/bash
set -e
useradd -s /bin/bash -m '$username'
echo -e '$userpass\n$userpass' | passwd '$username'
usermod -aG sudo '$username'
DEBIANUSER
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_user

hardware_support="alsa-utils alsa-ucm-conf alsa-topology-conf at-spi2-core avahi-discover cups cups-browsed libnss-mdns pulseaudio system-config-printer xserver-xorg"
basic_packages="gvfs-fuse packagekit udisks2 xdg-user-dirs-gtk"
basic_themes="adwaita-icon-theme breeze-gtk-theme breeze-icon-theme fonts-dejavu fonts-noto fonts-roboto gnome-backgrounds materia-gtk-theme oxygen-icon-theme papirus-icon-theme"
specific_packages="desktop-base plymouth-themes synaptic"
desktop_base="$hardware_support $basic_packages $basic_themes $specific_packages"
case "$desktop" in
	'budgie')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter budgie-desktop arc-theme nemo tilix paper-icon-theme
"
	;;
	'cinnamon')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter cinnamon cinnamon-core network-manager-gnome blueman gnome-terminal nemo
"
	;;
	'cinnamon-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter task-cinnamon-desktop network-manager-gnome blueman
"
	;;
	'enlightenment')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter enlightenment terminology
yes | DEBIAN_FRONTEND=noninteractive apt purge network-manager
yes | DEBIAN_FRONTEND=noninteractive apt install connman
find /usr/lib -type f -name enlightenment_system -exec chmod 4755 {} \;
"
	;;
	'gnome')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base gdm3 gnome-session gnome-shell gnome-control-center gnome-terminal nautilus gnome-icon-theme libpam-gnome-keyring gnome-packagekit
"
	;;
	'gnome-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base gdm3 task-gnome-desktop
"
	;;
	'kde')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base sddm sddm-theme-breeze kde-plasma-desktop kwin-x11 dolphin plasma-discover konsole plasma-nm plasma-pa bluedevil libpam-kwallet5 powerdevil plasma-widgets-addons systemsettings
"
	;;
	'kde-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base sddm sddm-theme-breeze task-kde-desktop
"
	;;
	'lxde')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter lxde-core lxterminal pcmanfm lxde-icon-theme network-manager-gnome blueman lxappearance
"
	;;
	'lxde-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter task-lxde-desktop network-manager-gnome blueman
"
	;;
	'lxqt')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter lxqt-core qterminal pcmanfm-qt lxqt-theme-debian network-manager-gnome blueman openbox lxqt-powermanagement lxqt-themes
"
	;;
	'lxqt-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter task-lxqt-desktop network-manager-gnome blueman
"
	;;
	'mate')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter mate-desktop mate-session-manager marco mate-control-center mate-notification-daemon mate-applets mate-indicator-applet mate-applet-brisk-menu mate-themes mate-icon-theme mate-terminal caja network-manager-gnome blueman mate-media mate-power-manager
"
	;;
	'mate-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter task-mate-desktop blueman
"
	;;
	'xfce')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter xfce4 xfce4-power-manager-plugins xfce4-terminal thunar xfce4-notifyd network-manager-gnome blueman
"
	;;
	'xfce-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter task-xfce-desktop blueman
"
	;;
esac
cat >"$linuxloopsdir"/chroot/tmp/install_desktop <<DEBIANDESKTOP
#!/bin/bash
set -e
if [ "$desktop" == "none" ]; then exit 0; fi
$install_desktop
mkdir -p /usr/share/glib-2.0/schemas
cat >/usr/share/glib-2.0/schemas/zz_linuxloops.gschema.override <<'DCONF'
[org.gnome.desktop.background:Budgie]
picture-uri="file:///usr/share/images/desktop-base/login-background.svg"
[org.gnome.desktop.interface:Budgie]
gtk-theme="Arc"
icon-theme="Papirus"
[org.cinnamon.desktop.background]
picture-uri="file:///usr/share/images/desktop-base/login-background.svg"
[org.cinnamon.desktop.interface]
gtk-theme="Materia"
icon-theme="Papirus"
[org.cinnamon.desktop.wm.preferences]
theme="Materia"
[org.mate.interface]
icon-theme='Papirus'
gtk-theme='Materia'
[org.mate.Marco.general]
theme='Materia'
DCONF
if [ ! -z "\$(command -v glib-compile-schemas)" ]; then glib-compile-schemas /usr/share/glib-2.0/schemas/; fi
mkdir -p /etc/skel/.config/xfce4/xfconf/xfce-perchannel-xml
cat > '/etc/skel/.config/xfce4/xfconf/xfce-perchannel-xml/xsettings.xml' <<'XFCETHEME'
<?xml version="1.0" encoding="UTF-8"?>
<channel name="xsettings" version="1.0">
  <property name="Net" type="empty">
    <property name="IconThemeName" type="string" value="Papirus"/>
    <property name="ThemeName" type="string" value="Materia"/>
  </property>
</channel>
XFCETHEME
mkdir -p /etc/xdg/autostart
cat >/etc/xdg/autostart/budgie-nemo.desktop <<'NEMODESKTOP'
[Desktop Entry]
Type=Application
Name=Nemo
Comment=Start Nemo desktop at log in
Exec=nemo-desktop
OnlyShowIn=Budgie;
AutostartCondition=GSettings org.nemo.desktop show-desktop-icons
X-GNOME-AutoRestart=true
NoDisplay=true
NEMODESKTOP
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[Seat:*]\ngreeter-hide-users=false\n' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
DEBIANDESKTOP
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_desktop

install_secureboot
if [ ! -z "$nvidia" ] && [ "$nvidia" == "Yes" ]; then install_nvidia; fi
if [ ! -z "$surface" ] && [ "$surface" == "Yes" ]; then install_surface "linux-headers-* linux-image-*"; fi

if [ ! -z "$CUSTOM_PACKAGES" ]; then
	echo -e "#!/bin/bash\nset -e\nyes | DEBIAN_FRONTEND=noninteractive apt install $CUSTOM_PACKAGES" > "$linuxloopsdir"/chroot/tmp/install_custom_packages
	chmod 0755 "$linuxloopsdir"/chroot/tmp/install_custom_packages
fi

if [ -f ./custom_script ]; then
	cp ./custom_script "$linuxloopsdir"/chroot/tmp/install_custom_script
	chmod 0755 "$linuxloopsdir"/chroot/tmp/install_custom_script
fi

generate_fstab

cmdline_extra="$CUSTOM_CMDLINE_PARAMS"
install_initramfstools

install_efi

cleanup

chroot "$linuxloopsdir"/chroot /tmp/init || return_value=1

[ "$return_value" -eq 0 ] && create_swap

umount_chroot

return $return_value
}

chroot_devuan()
{
return_value=0

download_lxc_image debian bullseye default

mount_chroot

cat >"$linuxloopsdir"/chroot/tmp/init <<'DEVUANINIT'
#!/bin/bash
set -e
export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
export LD_LIBRARY_PATH=/usr/local/lib64:/usr/local/lib:/usr/lib64:/usr/lib:/lib64:/lib
rm /etc/resolv.conf
/tmp/cleanup_container
yes | DEBIAN_FRONTEND=noninteractive apt update
yes | DEBIAN_FRONTEND=noninteractive apt install ca-certificates openssl
echo -e 'Dpkg::Options {\n  "--force-confnew";\n};' > /etc/apt/apt.conf.d/71debconf
cat >/etc/apt/sources.list <<'SOURCES'
deb http://deb.devuan.org/merged chimaera main
deb http://deb.devuan.org/merged chimaera-updates main
deb http://deb.devuan.org/merged chimaera-security main
#deb http://deb.devuan.org/merged chimaera-backports main
SOURCES
sed -i 's@ main@ main contrib non-free@g' /etc/apt/sources.list
echo -e 'APT::Install-Recommends "0";\nAPT::Get::Install-Recommends "false";' > /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt update --allow-insecure-repositories
yes | DEBIAN_FRONTEND=noninteractive apt install devuan-keyring --allow-unauthenticated
yes | DEBIAN_FRONTEND=noninteractive apt purge systemd --allow-remove-essential
yes | DEBIAN_FRONTEND=noninteractive apt autoremove
yes | DEBIAN_FRONTEND=noninteractive apt install -o APT::Immediate-Configure=false --reinstall $(apt list --installed | cut -d'/' -f1 | sed '1d' | sed -z 's@\n@ @g')
yes | DEBIAN_FRONTEND=noninteractive dpkg --configure -a
echo -e 'Dpkg::Options {\n  "--force-confdef";\n};' > /etc/apt/apt.conf.d/71debconf
yes | DEBIAN_FRONTEND=noninteractive apt install apt-utils console-setup kmod
yes | DEBIAN_FRONTEND=noninteractive apt update
yes | DEBIAN_FRONTEND=noninteractive apt install eudev sysvinit-core
yes | DEBIAN_FRONTEND=noninteractive apt install linux-image-amd64 linux-headers-amd64 dkms firmware-linux firmware-atheros firmware-iwlwifi firmware-realtek wireless-regdb bash sudo modemmanager network-manager wpasupplicant bluez cryptsetup-initramfs e2fsprogs ntfs-3g nano acpid curl thermald bash-completion gnupg-utils policykit-1 xdg-user-dirs zstd fwupd-signed patchutils net-tools usb-modeswitch upower efibootmgr grub-efi grub-efi-amd64-signed os-prober shim-signed bind9-host dns-root-data amd64-microcode intel-microcode lsb-release sbsigntool mokutil dosfstools btrfs-progs zenity
echo -e 'sign_tool="/etc/dkms/sign_helper.sh"' >> /etc/dkms/framework.conf
echo -e '#!/bin/sh\n/lib/modules/"$1"/build/scripts/sign-file sha512 /var/lib/shim-signed/mok/MOK.priv /var/lib/shim-signed/mok/MOK.der "$2"' > /etc/dkms/sign_helper.sh
chmod 0755 /etc/dkms/sign_helper.sh
dbus-uuidgen > /etc/machine-id
/tmp/set_locale_and_timezone
/tmp/install_desktop
/tmp/install_user
/tmp/install_secureboot
if [ -f /tmp/install_nvidia ]; then /tmp/install_nvidia; fi
if [ -f /tmp/install_surface ]; then /tmp/install_surface; fi
if [ -f /tmp/install_custom_packages ]; then /tmp/install_custom_packages; fi
if [ -f /tmp/install_custom_script ]; then /tmp/install_custom_script; fi
/tmp/generate_fstab
/tmp/install_initramfs
/tmp/install_efi
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt autoremove
rm -f /etc/resolv.conf
/tmp/cleanup
exit
DEVUANINIT
chmod 0755 "$linuxloopsdir"/chroot/tmp/init

cleanup_container
set_locale_and_timezone

cat >"$linuxloopsdir"/chroot/tmp/install_user <<DEVUANUSER
#!/bin/bash
set -e
useradd -s /bin/bash -m '$username'
echo -e '$userpass\n$userpass' | passwd '$username'
usermod -aG sudo '$username'
DEVUANUSER
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_user

hardware_support="alsa-utils alsa-ucm-conf alsa-topology-conf at-spi2-core avahi-discover cups cups-browsed libnss-mdns pulseaudio system-config-printer xserver-xorg"
basic_packages="gvfs-fuse packagekit udisks2 xdg-user-dirs-gtk"
basic_themes="adwaita-icon-theme breeze-gtk-theme breeze-icon-theme fonts-dejavu fonts-noto fonts-roboto gnome-backgrounds materia-gtk-theme oxygen-icon-theme papirus-icon-theme"
specific_packages="desktop-base devuan-baseconf synaptic"
desktop_base="$hardware_support $basic_packages $basic_themes $specific_packages"
case "$desktop" in
	'budgie')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter budgie-desktop budgie-desktop-view arc-theme nautilus tilix paper-icon-theme
"
	;;
	'cinnamon')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter cinnamon network-manager-gnome blueman gnome-terminal nemo
"
	;;
	'cinnamon-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter task-cinnamon-desktop network-manager-gnome blueman
"
	;;
	'enlightenment')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter enlightenment terminology
yes | DEBIAN_FRONTEND=noninteractive apt purge network-manager
yes | DEBIAN_FRONTEND=noninteractive apt install connman
find /usr/lib -type f -name enlightenment_system -exec chmod 4755 {} \;
"
	;;
	'gnome')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base gdm3 gnome-session gnome-shell gnome-control-center gnome-terminal nautilus gnome-icon-theme libpam-gnome-keyring gnome-packagekit
"
	;;
	'gnome-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base gdm3 task-gnome-desktop
"
	;;
	'kde')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base sddm sddm-theme-breeze kde-plasma-desktop kwin-x11 dolphin plasma-discover konsole plasma-nm plasma-pa bluedevil libpam-kwallet5 powerdevil plasma-widgets-addons systemsettings
"
	;;
	'kde-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base sddm sddm-theme-breeze task-kde-desktop
"
	;;
	'lxde')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter lxde-core lxterminal pcmanfm lxde-icon-theme network-manager-gnome blueman lxappearance
"
	;;
	'lxde-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter task-lxde-desktop network-manager-gnome blueman
"
	;;
	'lxqt')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter lxqt-core qterminal pcmanfm-qt lxqt-theme-debian network-manager-gnome blueman openbox lxqt-powermanagement lxqt-themes
"
	;;
	'lxqt-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter task-lxqt-desktop network-manager-gnome blueman
"
	;;
	'mate')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter mate-desktop mate-session-manager marco mate-control-center mate-notification-daemon mate-applets mate-indicator-applet mate-applet-brisk-menu mate-themes mate-icon-theme mate-terminal caja network-manager-gnome blueman mate-media mate-power-manager
"
	;;
	'mate-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter task-mate-desktop blueman
"
	;;
	'xfce')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter xfce4 xfce4-power-manager-plugins xfce4-terminal thunar xfce4-notifyd network-manager-gnome blueman
"
	;;
	'xfce-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter task-xfce-desktop blueman
yes | DEBIAN_FRONTEND=noninteractive apt purge slim
"
	;;
esac
cat >"$linuxloopsdir"/chroot/tmp/install_desktop <<DEVUANDESKTOP
#!/bin/bash
set -e
if [ "$desktop" == "none" ]; then exit 0; fi
$install_desktop
if [ "$encryption" == "Yes" ]; then sed -i '/GRUB_THEME=/d' /etc/default/grub; fi
cat >/usr/share/glib-2.0/schemas/zz_linuxloops.gschema.override <<'DCONF'
[org.gnome.desktop.background:Budgie]
picture-uri="file:///usr/share/images/desktop-base/your-way_deepsea-wide-large.svg"
[org.gnome.desktop.interface:Budgie]
gtk-theme="Arc"
icon-theme="Papirus"
[org.cinnamon.desktop.background]
picture-uri="file:///usr/share/images/desktop-base/your-way_deepsea-wide-large.svg"
[org.cinnamon.desktop.interface]
gtk-theme="Materia"
icon-theme="Papirus"
[org.cinnamon.desktop.wm.preferences]
theme="Materia"
DCONF
if [ ! -z "\$(command -v glib-compile-schemas)" ]; then glib-compile-schemas /usr/share/glib-2.0/schemas/; fi
mkdir -p /etc/xdg/autostart
cat >/etc/xdg/autostart/budgie-nemo.desktop <<'NEMODESKTOP'
[Desktop Entry]
Type=Application
Name=Nemo
Comment=Start Nemo desktop at log in
Exec=nemo-desktop
OnlyShowIn=Budgie;
AutostartCondition=GSettings org.nemo.desktop show-desktop-icons
X-GNOME-AutoRestart=true
NoDisplay=true
NEMODESKTOP
mkdir -p /etc/lightdm/lightdm.conf.d /etc/sddm.conf.d
echo -e '[Seat:*]\ngreeter-hide-users=false\n' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
echo -e '[greeter]\nbackground = /usr/share/images/desktop-base/your-way_deepsea-wide-large.svg\nuser-background = true' > /etc/lightdm/lightdm-gtk-greeter.conf
echo -e '[Greeter]\nbackground = /usr/share/images/desktop-base/your-way_deepsea-wide-large.svg\ndraw-user-backgrounds = true' > /etc/lightdm/slick-greeter.conf
echo -e '[Theme]\nCurrent = breeze' > /etc/sddm.conf.d/99-linuxloops.conf
DEVUANDESKTOP
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_desktop

install_secureboot
if [ ! -z "$nvidia" ] && [ "$nvidia" == "Yes" ]; then install_nvidia; fi
if [ ! -z "$surface" ] && [ "$surface" == "Yes" ]; then install_surface "linux-headers-* linux-image-*"; fi

if [ ! -z "$CUSTOM_PACKAGES" ]; then
	echo -e "#!/bin/bash\nset -e\nyes | DEBIAN_FRONTEND=noninteractive apt install $CUSTOM_PACKAGES" > "$linuxloopsdir"/chroot/tmp/install_custom_packages
	chmod 0755 "$linuxloopsdir"/chroot/tmp/install_custom_packages
fi

if [ -f ./custom_script ]; then
	cp ./custom_script "$linuxloopsdir"/chroot/tmp/install_custom_script
	chmod 0755 "$linuxloopsdir"/chroot/tmp/install_custom_script
fi

generate_fstab

cmdline_extra="$CUSTOM_CMDLINE_PARAMS"
install_initramfstools

install_efi

cleanup

chroot "$linuxloopsdir"/chroot /tmp/init || return_value=1

[ "$return_value" -eq 0 ] && create_swap

umount_chroot

return $return_value
}

chroot_elementary()
{
return_value=0

download_lxc_image ubuntu jammy default

mount_chroot

cat >"$linuxloopsdir"/chroot/tmp/init <<'ELEMENTARYINIT'
#!/bin/bash
set -e
export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
export LD_LIBRARY_PATH=/usr/local/lib64:/usr/local/lib:/usr/lib64:/usr/lib:/lib64:/lib
/tmp/cleanup_container
yes | DEBIAN_FRONTEND=noninteractive apt update
yes | DEBIAN_FRONTEND=noninteractive apt install ca-certificates openssl
echo -e 'Dpkg::Options {\n  "--force-confnew";\n};' > /etc/apt/apt.conf.d/71debconf
echo -e 'Package: *\nPin: release o=LP-PPA-elementary-os-*\nPin-Priority: 1000' > /etc/apt/preferences.d/elementary.pref
yes | DEBIAN_FRONTEND=noninteractive apt install software-properties-common
add-apt-repository ppa:elementary-os/stable -y
add-apt-repository ppa:elementary-os/os-patches -y
yes | DEBIAN_FRONTEND=noninteractive apt update
yes | DEBIAN_FRONTEND=noninteractive apt install -o APT::Immediate-Configure=false --reinstall $(apt list --installed | cut -d'/' -f1 | sed '1d' | sed -z 's@\n@ @g')
yes | DEBIAN_FRONTEND=noninteractive dpkg --configure -a
echo -e 'Dpkg::Options {\n  "--force-confdef";\n};' > /etc/apt/apt.conf.d/71debconf
yes | DEBIAN_FRONTEND=noninteractive apt install apt-utils console-setup kmod
yes | DEBIAN_FRONTEND=noninteractive apt update
yes | DEBIAN_FRONTEND=noninteractive apt install linux-generic linux-headers-generic dkms linux-firmware wireless-regdb bash sudo modemmanager network-manager wpasupplicant bluez cryptsetup-initramfs e2fsprogs ntfs-3g nano acpid curl thermald bash-completion gnupg-utils policykit-1 xdg-user-dirs zstd fwupd patchutils net-tools usb-modeswitch upower efibootmgr grub-efi grub-efi-amd64-signed os-prober shim-signed update-manager-core sbsigntool mokutil dosfstools btrfs-progs zenity
systemctl enable systemd-resolved.service
systemctl disable systemd-networkd.service systemd-networkd-wait-online.service
systemctl mask systemd-networkd.service systemd-networkd-wait-online.service
/tmp/set_locale_and_timezone
/tmp/install_desktop
/tmp/install_user
/tmp/install_secureboot
if [ -f /tmp/install_nvidia ]; then /tmp/install_nvidia; fi
if [ -f /tmp/install_surface ]; then /tmp/install_surface; fi
if [ -f /tmp/install_custom_packages ]; then /tmp/install_custom_packages; fi
if [ -f /tmp/install_custom_script ]; then /tmp/install_custom_script; fi
/tmp/generate_fstab
/tmp/install_initramfs
/tmp/install_efi
yes | DEBIAN_FRONTEND=noninteractive apt autoremove
/tmp/cleanup
exit
ELEMENTARYINIT
chmod 0755 "$linuxloopsdir"/chroot/tmp/init

cleanup_container
set_locale_and_timezone

cat >"$linuxloopsdir"/chroot/tmp/install_user <<ELEMENTARYUSER
#!/bin/bash
set -e
userdel -r -f ubuntu
useradd -s /bin/bash -m '$username'
echo -e '$userpass\n$userpass' | passwd '$username'
usermod -aG sudo '$username'
ELEMENTARYUSER
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_user

case "$desktop" in
	'full')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install pantheon-greeter elementary-desktop
yes | DEBIAN_FRONTEND=noninteractive apt purge gdm3 ubuntu-session
"
	;;
esac
cat >"$linuxloopsdir"/chroot/tmp/install_desktop <<ELEMENTARYDESKTOP
#!/bin/bash
set -e
if [ "$desktop" == "none" ]; then exit 0; fi
$install_desktop
ELEMENTARYDESKTOP
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_desktop

install_secureboot
if [ ! -z "$nvidia" ] && [ "$nvidia" == "Yes" ]; then install_nvidia; fi
if [ ! -z "$surface" ] && [ "$surface" == "Yes" ]; then install_surface_apt "linux-generic-* linux-headers-* linux-image-* linux-modules-*"; fi

if [ ! -z "$CUSTOM_PACKAGES" ]; then
	echo -e "#!/bin/bash\nset -e\nyes | DEBIAN_FRONTEND=noninteractive apt install $CUSTOM_PACKAGES" > "$linuxloopsdir"/chroot/tmp/install_custom_packages
	chmod 0755 "$linuxloopsdir"/chroot/tmp/install_custom_packages
fi

if [ -f ./custom_script ]; then
	cp ./custom_script "$linuxloopsdir"/chroot/tmp/install_custom_script
	chmod 0755 "$linuxloopsdir"/chroot/tmp/install_custom_script
fi

generate_fstab

cmdline_extra="$CUSTOM_CMDLINE_PARAMS"
install_initramfstools

install_efi

cleanup

chroot "$linuxloopsdir"/chroot /tmp/init || return_value=1

[ "$return_value" -eq 0 ] && create_swap

umount_chroot

return $return_value
}

chroot_fedora()
{
return_value=0

download_lxc_image fedora 38 default

mount_chroot

cat >"$linuxloopsdir"/chroot/tmp/init <<'FEDORAINIT'
#!/bin/bash
set -e
export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
export LD_LIBRARY_PATH=/usr/local/lib64:/usr/local/lib:/usr/lib64:/usr/lib:/lib64:/lib
/tmp/cleanup_container
dnf update -y
dnf install -y ca-certificates openssl fedora-release-identity-workstation --allowerasing
dnf reinstall -y "*"
dnf install -y distribution-gpg-keys dnf-plugins-core
dnf install -y https://mirrors.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm https://mirrors.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-$(rpm -E %fedora).noarch.rpm
dnf install -y kernel kernel-headers akmods dkms linux-firmware iwl100-firmware iwl1000-firmware iwl105-firmware iwl135-firmware iwl2000-firmware iwl2030-firmware iwl3160-firmware iwl5000-firmware iwl5150-firmware iwl6000g2a-firmware iwl6000g2b-firmware iwl6050-firmware iwl7260-firmware wireless-regdb glibc-locale-source ntfs-3g bash sudo ModemManager NetworkManager-bluetooth NetworkManager-tui NetworkManager-wifi wpa_supplicant bluez cryptsetup e2fsprogs ntfsprogs nano acpid curl thermald bash-completion gpg polkit xdg-user-dirs zstd fwupd patchutils net-tools usb_modeswitch upower efibootmgr bind nss-mdns systemd-networkd systemd-resolved dbus-daemon grub2-efi os-prober shim microcode_ctl sbsigntools mokutil selinux-policy-targeted dosfstools btrfs-progs zenity sssd-client
systemctl enable dbus.socket dbus-daemon.service getty@.service systemd-resolved.service
systemctl disable systemd-networkd.service systemd-networkd-wait-online.service
systemctl mask systemd-networkd.service systemd-networkd-wait-online.service
/tmp/set_locale_and_timezone
/tmp/install_desktop
/tmp/install_user
/tmp/install_secureboot
if [ -f /tmp/install_nvidia ]; then /tmp/install_nvidia; fi
if [ -f /tmp/install_surface ]; then /tmp/install_surface; fi
if [ -f /tmp/install_custom_packages ]; then /tmp/install_custom_packages; fi
if [ -f /tmp/install_custom_script ]; then /tmp/install_custom_script; fi
/tmp/generate_fstab
/tmp/install_initramfs
/tmp/install_efi
dnf autoremove -y
/tmp/selinux_fix
touch /.autorelabel
/tmp/cleanup
exit
FEDORAINIT
chmod 0755 "$linuxloopsdir"/chroot/tmp/init

cleanup_container
set_locale_and_timezone

cat >"$linuxloopsdir"/chroot/tmp/install_user <<FEDORAUSER
#!/bin/bash
set -e
useradd -s /bin/bash -m '$username'
echo -e '$userpass\n$userpass' | passwd '$username'
usermod -aG wheel '$username'
echo "%wheel      ALL=(ALL) ALL" > /etc/sudoers.d/90-wheel
FEDORAUSER
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_user

hardware_support="alsa-lib alsa-utils alsa-sof-firmware alsa-topology at-spi2-core avahi cups cups-browsed nss-mdns system-config-printer xorg-x11-drivers"
basic_packages="gvfs-fuse PackageKit udisks2 xdg-user-dirs-gtk"
basic_themes="adwaita-icon-theme breeze-gtk breeze-icon-theme dejavu-sans-fonts google-noto-sans-fonts google-roboto-fonts gnome-backgrounds materia-gtk-theme oxygen-icon-theme papirus-icon-theme"
specific_packages="dnfdragora dnf-plugin-system-upgrade f37-backgrounds plymouth-system-theme"
desktop_base="$hardware_support $basic_packages $basic_themes $specific_packages"
desktop_services="avahi-daemon.service cups.service cups-browsed.service"
case "$desktop" in
	'cinnamon')
	install_desktop="
dnf install -y $desktop_base lightdm slick-greeter cinnamon clutter-gtk gnome-terminal nemo paper-icon-theme blueman dnfdragora-updater
"
	;;
	'cinnamon-full')
	install_desktop="
dnf install -y $desktop_base lightdm slick-greeter @cinnamon-desktop-environment dnfdragora-updater
"
	;;
	'gnome')
	install_desktop="
dnf install -y $desktop_base gdm gnome-shell nautilus gnome-terminal gnome-backgrounds gnome-software gnome-keyring gnome-keyring-pam
"
	;;
	'gnome-full')
	install_desktop="
dnf install -y $desktop_base gdm @gnome-desktop
"
	;;
	'kde')
	install_desktop="
dnf install -y $desktop_base sddm sddm-breeze plasma-desktop plasma-discover plasma-nm bluedevil dolphin konsole pam-kwallet
"
	;;
	'kde-full')
	install_desktop="
dnf install -y $desktop_base sddm sddm-breeze @kde-desktop-environment
"
	;;
	'lxde')
	install_desktop="
dnf install -y $desktop_base lightdm slick-greeter @lxde-desktop-environment lxde-themes blueman dnfdragora-updater
"
	;;
	'lxqt')
	install_desktop="
dnf install -y $desktop_base lightdm slick-greeter @lxqt-desktop-environment lxqt-themes blueman
"
	;;
	'mate')
	install_desktop="
dnf install -y $desktop_base lightdm slick-greeter mate-desktop marco network-manager-applet blueberry mate-session-manager mate-media mate-power-manager caja mate-terminal mate-themes libgnome-keyring dnfdragora-updater
"
	;;
	'mate-full')
	install_desktop="
dnf install -y $desktop_base lightdm slick-greeter @mate-desktop-environment dnfdragora-updater
"
	;;
	'xfce')
	install_desktop="
dnf install -y $desktop_base lightdm slick-greeter xfdesktop xfce4-session xfce4-settings xfce4-notifyd yaru-theme network-manager-applet blueman thunar xfce4-appfinder xfce4-pulseaudio-plugin xfce4-power-manager xfce4-terminal  xfce4-settings libgnome-keyring dnfdragora-updater
"
	;;
	'xfce-full')
	install_desktop="
dnf install -y $desktop_base lightdm slick-greeter @xfce-desktop-environment dnfdragora-updater
"
	;;
esac
cat >"$linuxloopsdir"/chroot/tmp/install_desktop <<FEDORADESKTOP
#!/bin/bash
set -e
if [ "$desktop" == "none" ]; then exit 0; fi
$install_desktop
systemctl enable $desktop_services
if [ -f /usr/lib/systemd/user/gnome-keyring-daemon.service ]; then systemctl enable --global gnome-keyring-daemon.service; fi
mkdir -p /usr/share/glib-2.0/schemas
cat >/usr/share/glib-2.0/schemas/zz_linuxloops.gschema.override <<'DCONF'
[org.mate.interface]
icon-theme='Papirus-Light'
DCONF
if [ ! -z "\$(command -v glib-compile-schemas)" ]; then glib-compile-schemas /usr/share/glib-2.0/schemas/; fi
dnf swap -y wireplumber pipewire-media-session
mkdir -p /etc/skel/.config/xfce4/xfconf/xfce-perchannel-xml
cat > '/etc/skel/.config/xfce4/xfconf/xfce-perchannel-xml/xsettings.xml' <<'XFCETHEME'
<?xml version="1.0" encoding="UTF-8"?>
<channel name="xsettings" version="1.0">
  <property name="Net" type="empty">
    <property name="IconThemeName" type="string" value="Papirus"/>
    <property name="ThemeName" type="string" value="Materia-dark"/>
  </property>
</channel>
XFCETHEME
mkdir -p /etc/lightdm
echo -e '[greeter]\nbackground = /usr/share/backgrounds/default.png\nuser-background = true' > /etc/lightdm/lightdm-gtk-greeter.conf
echo -e '[Greeter]\nbackground = /usr/share/backgrounds/default.png\ndraw-user-backgrounds = true' > /etc/lightdm/slick-greeter.conf
FEDORADESKTOP
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_desktop

install_secureboot
if [ ! -z "$nvidia" ] && [ "$nvidia" == "Yes" ]; then install_nvidia; fi
if [ ! -z "$surface" ] && [ "$surface" == "Yes" ]; then install_surface "kernel kernel-headers"; fi

if [ ! -z "$CUSTOM_PACKAGES" ]; then
	echo -e "#!/bin/bash\nset -e\ndnf install -y $CUSTOM_PACKAGES" > "$linuxloopsdir"/chroot/tmp/install_custom_packages
	chmod 0755 "$linuxloopsdir"/chroot/tmp/install_custom_packages
fi

if [ -f ./custom_script ]; then
	cp ./custom_script "$linuxloopsdir"/chroot/tmp/install_custom_script
	chmod 0755 "$linuxloopsdir"/chroot/tmp/install_custom_script
fi

generate_fstab

cmdline_extra="$CUSTOM_CMDLINE_PARAMS"
install_dracut

install_efi

selinux_fix

cleanup

chroot "$linuxloopsdir"/chroot /tmp/init || return_value=1

[ "$return_value" -eq 0 ] && create_swap

umount_chroot

return $return_value
}

chroot_gentoo-openrc()
{
return_value=0

download_lxc_image gentoo current openrc

mount_chroot

cat >"$linuxloopsdir"/chroot/tmp/init <<'GENTOOINIT'
#!/bin/bash
set -e
export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
export LD_LIBRARY_PATH=/usr/local/lib64:/usr/local/lib:/usr/lib64:/usr/lib:/lib64:/lib
/tmp/cleanup_container
emerge --sync
emerge --oneshot sys-apps/portage dev-libs/openssl app-misc/ca-certificates
emerge -e @world
env-update
source /etc/profile
mkdir /etc/portage/package.license 
echo '*/* *' >> /etc/portage/package.license/custom
echo "VIDEO_CARDS=\"amdgpu dummy fbdev intel nouveau qxl radeon radeonsi vesa virtualbox vmware\"" >> /etc/portage/make.conf
echo "USE=\"alsa bluetooth caps cdda cryptsetup dbus device-mapper elogind icu lvm minizip mount modemmanager networkmanager wpasupplicant ogg policykit pulseaudio raw -systemd tracker tty-helpers udev udisks vala\"" >> /etc/portage/make.conf
echo "GRUB_PLATFORMS=\"efi-32 efi-64\"" >> /etc/portage/make.conf
#echo -e "MAKEOPTS=\"--jobs 4 --load-average 5\"\nEMERGE_DEFAULT_OPTS=\"--jobs 4\"" >> /etc/portage/make.conf
echo -e "media-libs/libsndfile minimal\nnet-print/cups -zeroconf" > /etc/portage/package.use/dep_cycle_fix
eselect profile set default/linux/amd64/17.1
emerge -uDN @world sys-kernel/gentoo-kernel-bin sys-kernel/linux-firmware net-wireless/wireless-regdb app-admin/sudo sys-fs/ntfs3g net-misc/networkmanager sys-fs/cryptsetup app-editors/nano dev-vcs/git sys-power/acpid net-misc/curl sys-power/thermald app-shells/bash-completion app-crypt/gnupg sys-auth/polkit app-arch/zstd sys-auth/pambase dev-lang/rust-bin sys-boot/grub sys-boot/os-prober sys-boot/shim app-crypt/sbsigntools sys-fs/dosfstools sys-fs/btrfs-progs gnome-extra/zenity
for x in /etc/runlevels/default/net.* ; do rc-update del $(basename $x) default ; rc-service --ifstarted $(basename $x) stop; done
rc-update add bluetooth default
rc-update add NetworkManager default
/tmp/set_locale_and_timezone
/tmp/install_desktop
/tmp/install_user
rm /etc/portage/package.use/dep_cycle_fix
emerge -uDN @world
/tmp/install_secureboot
if [ -f /tmp/install_nvidia ]; then /tmp/install_nvidia; fi
if [ -f /tmp/install_custom_packages ]; then /tmp/install_custom_packages; fi
if [ -f /tmp/install_custom_script ]; then /tmp/install_custom_script; fi
/tmp/generate_fstab
/tmp/install_initramfs
/tmp/install_efi
emerge --depclean
/tmp/cleanup
exit
GENTOOINIT
chmod 0755 "$linuxloopsdir"/chroot/tmp/init

cleanup_container
set_locale_and_timezone

cat >"$linuxloopsdir"/chroot/tmp/install_user <<GENTOOUSER
#!/bin/bash
set -e
sed -i 's/^password/#password/g' /etc/pam.d/system-auth
echo 'password       required        pam_unix.so nullok sha512 shadow' >> /etc/pam.d/system-auth
useradd -s /bin/bash -m '$username'
echo -e '$userpass\n$userpass' | passwd '$username'
usermod -aG wheel '$username'
if [ ! -d /etc/sudoers.d ]; then mkdir -p /etc/sudoers.d; chmod 0750 /etc/sudoers.d; fi
echo "%wheel      ALL=(ALL) ALL" > /etc/sudoers.d/90-wheel
cat >/etc/polkit-1/rules.d/50-default.rules <<'POLKIT'
polkit.addAdminRule(function(action, subject) {
    return ["unix-group:wheel"];
});
POLKIT
GENTOOUSER
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_user

newuse="sed -i 's/^USE=.*/USE=\"alsa bluetooth caps cdda dbus elogind icu minizip mount modemmanager networkmanager wpasupplicant ogg policykit pulseaudio raw -systemd tracker tty-helpers udev udisks vala appindicator cairo client cups drm eds egl gles2 gnome-online-accounts gtk gtk3 introspection jpeg libnotify lock mdnsresponder-compat ogg opengl qml text theora tracker wayland X xa xorg zeroconf\"/g' /etc/portage/make.conf"
desktop_base="net-print/cups net-print/cups-filters sys-boot/plymouth"
case "$desktop" in
	'cinnamon')
	install_desktop="
emerge -uN $desktop_base x11-misc/lightdm gnome-extra/cinnamon x11-terms/gnome-terminal gnome-extra/nemo
sed -i 's@DISPLAYMANAGER=\"xdm\"@DISPLAYMANAGER=\"lightdm\"@g' /etc/conf.d/display-manager
rc-update add display-manager default
"
	;;
	'enlightenment')
	newuse="sed -i 's/^USE=.*/USE=\"alsa bluetooth caps cdda dbus elogind icu minizip mount modemmanager networkmanager wpasupplicant ogg policykit pulseaudio raw -systemd tracker tty-helpers udev udisks vala appindicator cairo client cups drm eds egl gles2 gnome-online-accounts gtk gtk3 introspection jpeg libnotify lock mdnsresponder-compat ogg opengl qml text theora tracker wayland X xa xorg zeroconf gles2-only -opengl\"/g' /etc/portage/make.conf"
	install_desktop="
emerge -uN $desktop_base x11-misc/lightdm x11-wm/enlightenment x11-terms/terminology
sed -i 's@DISPLAYMANAGER=\"xdm\"@DISPLAYMANAGER=\"lightdm\"@g' /etc/conf.d/display-manager
rc-update add display-manager default
"
	;;
	'gnome')
	install_desktop="
emerge -uN $desktop_base gnome-base/gdm gnome-base/gnome x11-terms/gnome-terminal gnome-base/nautilus
sed -i 's@DISPLAYMANAGER=\"xdm\"@DISPLAYMANAGER=\"gdm\"@g' /etc/conf.d/display-manager
rc-update add display-manager default
"
	;;
	'kde')
	install_desktop="
emerge -uN $desktop_base x11-misc/sddm kde-plasma/plasma-meta kde-apps/konsole kde-plasma/plasma-nm kde-apps/dolphin kde-plasma/discover
sed -i 's@DISPLAYMANAGER=\"xdm\"@DISPLAYMANAGER=\"sddm\"@g' /etc/conf.d/display-manager
rc-update add display-manager default
"
	;;
	'lxqt')
	install_desktop="
emerge -uN $desktop_base x11-misc/lightdm lxqt-base/lxqt-meta x11-terms/qterminal gnome-extra/nm-applet lxqt-base/lxqt-powermanagement
sed -i 's@DISPLAYMANAGER=\"xdm\"@DISPLAYMANAGER=\"lightdm\"@g' /etc/conf.d/display-manager
rc-update add display-manager default
"
	;;
	'mate')
	install_desktop="
emerge -uN $desktop_base x11-misc/lightdm mate-base/mate x11-terms/mate-terminal gnome-extra/nm-applet mate-extra/mate-power-manager mate-extra/mate-media
sed -i 's@DISPLAYMANAGER=\"xdm\"@DISPLAYMANAGER=\"lightdm\"@g' /etc/conf.d/display-manager
rc-update add display-manager default
"
	;;
	'xfce')
	install_desktop="
emerge -uN $desktop_base x11-misc/lightdm xfce-base/xfce4-meta x11-terms/xfce4-terminal gnome-extra/nm-applet net-wireless/blueman xfce-base/xfce4-power-manager
sed -i 's@DISPLAYMANAGER=\"xdm\"@DISPLAYMANAGER=\"lightdm\"@g' /etc/conf.d/display-manager
rc-update add display-manager default
"
	;;
esac
cat >"$linuxloopsdir"/chroot/tmp/install_desktop <<GENTOODESKTOP
#!/bin/bash
set -e
if [ "$desktop" == "none" ]; then exit 0; fi
$newuse
$install_desktop
rc-update add cupsd default
GENTOODESKTOP
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_desktop

install_secureboot
if [ ! -z "$nvidia" ] && [ "$nvidia" == "Yes" ]; then install_nvidia; fi

if [ ! -z "$CUSTOM_PACKAGES" ]; then
	echo -e "#!/bin/bash\nset -e\nemerge $CUSTOM_PACKAGES" > "$linuxloopsdir"/chroot/tmp/install_custom_packages
	chmod 0755 "$linuxloopsdir"/chroot/tmp/install_custom_packages
fi

if [ -f ./custom_script ]; then
	cp ./custom_script "$linuxloopsdir"/chroot/tmp/install_custom_script
	chmod 0755 "$linuxloopsdir"/chroot/tmp/install_custom_script
fi

generate_fstab

cmdline_extra="$CUSTOM_CMDLINE_PARAMS"
install_dracut

install_efi

cleanup

chroot "$linuxloopsdir"/chroot /tmp/init || return_value=1

[ "$return_value" -eq 0 ] && create_swap

umount_chroot

return $return_value
}

chroot_gentoo-systemd()
{
return_value=0

download_lxc_image gentoo current systemd

mount_chroot

cat >"$linuxloopsdir"/chroot/tmp/init <<'GENTOOINIT'
#!/bin/bash
set -e
export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
export LD_LIBRARY_PATH=/usr/local/lib64:/usr/local/lib:/usr/lib64:/usr/lib:/lib64:/lib
/tmp/cleanup_container
emerge --sync
emerge --oneshot sys-apps/portage dev-libs/openssl app-misc/ca-certificates
emerge -e @world
source /etc/profile
mkdir /etc/portage/package.license 
echo '*/* *' >> /etc/portage/package.license/custom
echo "VIDEO_CARDS=\"amdgpu dummy fbdev intel nouveau qxl radeon radeonsi vesa virtualbox vmware\"" >> /etc/portage/make.conf
echo "USE=\"alsa bluetooth caps cdda cryptsetup dbus device-mapper -elogind icu lvm minizip mount modemmanager networkmanager wpasupplicant ogg policykit pulseaudio raw systemd tracker tty-helpers udev udisks vala\"" >> /etc/portage/make.conf
echo "GRUB_PLATFORMS=\"efi-32 efi-64\"" >> /etc/portage/make.conf
#echo -e "MAKEOPTS=\"--jobs 4 --load-average 5\"\nEMERGE_DEFAULT_OPTS=\"--jobs 4\"" >> /etc/portage/make.conf
echo -e "media-libs/libsndfile minimal\nnet-print/cups -zeroconf" > /etc/portage/package.use/dep_cycle_fix
eselect profile set default/linux/amd64/17.1
emerge -uDN @world sys-kernel/gentoo-kernel-bin sys-kernel/linux-firmware net-wireless/wireless-regdb app-admin/sudo sys-fs/ntfs3g net-misc/networkmanager sys-fs/cryptsetup app-editors/nano dev-vcs/git sys-power/acpid net-misc/curl sys-power/thermald app-shells/bash-completion app-crypt/gnupg sys-auth/polkit app-arch/zstd sys-auth/pambase dev-lang/rust-bin sys-boot/grub sys-boot/os-prober sys-boot/shim app-crypt/sbsigntools sys-fs/dosfstools sys-fs/btrfs-progs gnome-extra/zenity
systemctl enable bluetooth.service NetworkManager.service systemd-resolved.service
/tmp/set_locale_and_timezone
/tmp/install_desktop
/tmp/install_user
rm /etc/portage/package.use/dep_cycle_fix
emerge -uDN @world
/tmp/install_secureboot
if [ -f /tmp/install_nvidia ]; then /tmp/install_nvidia; fi
if [ -f /tmp/install_custom_packages ]; then /tmp/install_custom_packages; fi
if [ -f /tmp/install_custom_script ]; then /tmp/install_custom_script; fi
/tmp/generate_fstab
echo 'omit_dracutmodules+=" systemd "' >> /etc/dracut.conf
/tmp/install_initramfs
/tmp/install_efi
emerge --depclean
/tmp/cleanup
exit
GENTOOINIT
chmod 0755 "$linuxloopsdir"/chroot/tmp/init

cleanup_container
set_locale_and_timezone

cat >"$linuxloopsdir"/chroot/tmp/install_user <<GENTOOUSER
#!/bin/bash
set -e
sed -i 's/^password/#password/g' /etc/pam.d/system-auth
echo 'password       required        pam_unix.so nullok sha512 shadow' >> /etc/pam.d/system-auth
useradd -s /bin/bash -m '$username'
echo -e '$userpass\n$userpass' | passwd '$username'
usermod -aG wheel '$username'
if [ ! -d /etc/sudoers.d ]; then mkdir -p /etc/sudoers.d; chmod 0750 /etc/sudoers.d; fi
echo "%wheel      ALL=(ALL) ALL" > /etc/sudoers.d/90-wheel
cat >/etc/polkit-1/rules.d/50-default.rules <<'POLKIT'
polkit.addAdminRule(function(action, subject) {
    return ["unix-group:wheel"];
});
POLKIT
GENTOOUSER
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_user

newuse="sed -i 's/^USE=.*/USE=\"alsa bluetooth caps cdda dbus -elogind icu minizip mount modemmanager networkmanager wpasupplicant ogg policykit pulseaudio raw systemd tracker tty-helpers udev udisks vala appindicator cairo client cups drm eds egl gles2 gnome-online-accounts gtk gtk3 introspection jpeg libnotify lock mdnsresponder-compat ogg opengl qml text theora tracker wayland X xa xorg zeroconf\"/g' /etc/portage/make.conf"
desktop_base="net-print/cups net-print/cups-filters sys-boot/plymouth"
case "$desktop" in
	'cinnamon')
	install_desktop="
emerge -uN $desktop_base x11-misc/lightdm gnome-extra/cinnamon x11-terms/gnome-terminal gnome-extra/nemo
systemctl enable lightdm.service
"
	;;
	'enlightenment')
	newuse="sed -i 's/^USE=.*/USE=\"alsa bluetooth caps cdda dbus -elogind icu minizip mount modemmanager networkmanager wpasupplicant ogg policykit pulseaudio raw systemd tracker tty-helpers udev udisks vala appindicator cairo client cups drm eds egl gles2 gnome-online-accounts gtk gtk3 introspection jpeg lock mdnsresponder-compat libnotify ogg opengl qml text theora tracker wayland X xa xorg zeroconf gles2-only -opengl\"/g' /etc/portage/make.conf"
	install_desktop="
emerge -uN $desktop_base x11-misc/lightdm x11-wm/enlightenment x11-terms/terminology
systemctl enable lightdm.service
"
	;;
	'gnome')
	install_desktop="
emerge -uN $desktop_base gnome-base/gdm gnome-base/gnome x11-terms/gnome-terminal gnome-base/nautilus
systemctl enable gdm.service
"
	;;
	'kde')
	install_desktop="
emerge -uN $desktop_base x11-misc/sddm kde-plasma/plasma-meta kde-apps/konsole kde-plasma/plasma-nm kde-apps/dolphin kde-plasma/discover
systemctl enable sddm.service
"
	;;
	'lxqt')
	install_desktop="
emerge -uN $desktop_base x11-misc/lightdm lxqt-base/lxqt-meta x11-terms/qterminal gnome-extra/nm-applet lxqt-base/lxqt-powermanagement
systemctl enable lightdm.service
"
	;;
	'mate')
	install_desktop="
emerge -uN $desktop_base x11-misc/lightdm mate-base/mate x11-terms/mate-terminal gnome-extra/nm-applet mate-extra/mate-power-manager mate-extra/mate-media
systemctl enable lightdm.service
"
	;;
	'xfce')
	install_desktop="
emerge -uN $desktop_base x11-misc/lightdm xfce-base/xfce4-meta x11-terms/xfce4-terminal gnome-extra/nm-applet net-wireless/blueman xfce-base/xfce4-power-manager
systemctl enable lightdm.service
"
	;;
esac
cat >"$linuxloopsdir"/chroot/tmp/install_desktop <<GENTOODESKTOP
#!/bin/bash
set -e
if [ "$desktop" == "none" ]; then exit 0; fi
$newuse
$install_desktop
systemctl enable cups.service
systemctl --global enable pulseaudio.service pulseaudio.socket
GENTOODESKTOP
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_desktop

install_secureboot
if [ ! -z "$nvidia" ] && [ "$nvidia" == "Yes" ]; then install_nvidia; fi

if [ ! -z "$CUSTOM_PACKAGES" ]; then
	echo -e "#!/bin/bash\nset -e\nemerge $CUSTOM_PACKAGES" > "$linuxloopsdir"/chroot/tmp/install_custom_packages
	chmod 0755 "$linuxloopsdir"/chroot/tmp/install_custom_packages
fi

if [ -f ./custom_script ]; then
	cp ./custom_script "$linuxloopsdir"/chroot/tmp/install_custom_script
	chmod 0755 "$linuxloopsdir"/chroot/tmp/install_custom_script
fi

generate_fstab

cmdline_extra="$CUSTOM_CMDLINE_PARAMS"
install_dracut

install_efi

cleanup

chroot "$linuxloopsdir"/chroot /tmp/init || return_value=1

[ "$return_value" -eq 0 ] && create_swap

umount_chroot

return $return_value
}

chroot_kali()
{
return_value=0

download_lxc_image kali current default

mount_chroot

cat >"$linuxloopsdir"/chroot/tmp/init <<'KALIINIT'
#!/bin/bash
set -e
export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
export LD_LIBRARY_PATH=/usr/local/lib64:/usr/local/lib:/usr/lib64:/usr/lib:/lib64:/lib
/tmp/cleanup_container
yes | DEBIAN_FRONTEND=noninteractive apt update
yes | DEBIAN_FRONTEND=noninteractive apt install ca-certificates openssl
echo -e 'Dpkg::Options {\n  "--force-confnew";\n};' > /etc/apt/apt.conf.d/71debconf
sed -i 's@ main@ main contrib non-free@g' /etc/apt/sources.list
echo -e 'APT::Install-Recommends "0";\nAPT::Get::Install-Recommends "false";' > /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt update
yes | DEBIAN_FRONTEND=noninteractive apt install -o APT::Immediate-Configure=false --reinstall $(apt list --installed | cut -d'/' -f1 | sed '1d' | sed -z 's@\n@ @g')
yes | DEBIAN_FRONTEND=noninteractive dpkg --configure -a
echo -e 'Dpkg::Options {\n  "--force-confdef";\n};' > /etc/apt/apt.conf.d/71debconf
yes | DEBIAN_FRONTEND=noninteractive apt install apt-utils console-setup kmod
yes | DEBIAN_FRONTEND=noninteractive apt update
yes | DEBIAN_FRONTEND=noninteractive apt install linux-image-amd64 linux-headers-amd64 dkms firmware-linux firmware-atheros firmware-iwlwifi firmware-realtek wireless-regdb bash sudo modemmanager network-manager wpasupplicant bluez cryptsetup-initramfs e2fsprogs ntfs-3g nano acpid curl thermald bash-completion gnupg-utils policykit-1 xdg-user-dirs zstd fwupd-signed patchutils net-tools usb-modeswitch upower efibootmgr grub-efi grub-efi-amd64-bin os-prober shim-signed bind9-host dns-root-data amd64-microcode intel-microcode lsb-release systemd-resolved kali-themes sbsigntool mokutil dosfstools btrfs-progs zenity
echo -e 'sign_tool="/etc/dkms/sign_helper.sh"' >> /etc/dkms/framework.conf
echo -e '#!/bin/sh\n/lib/modules/"$1"/build/scripts/sign-file sha512 /var/lib/shim-signed/mok/MOK.priv /var/lib/shim-signed/mok/MOK.der "$2"' > /etc/dkms/sign_helper.sh
chmod 0755 /etc/dkms/sign_helper.sh
systemctl enable bluetooth.service systemd-resolved.service
systemctl disable systemd-networkd.service systemd-networkd-wait-online.service
systemctl mask systemd-networkd.service systemd-networkd-wait-online.service
/tmp/set_locale_and_timezone
/tmp/install_desktop
/tmp/install_user
/tmp/install_secureboot
if [ -f /tmp/install_nvidia ]; then /tmp/install_nvidia; fi
if [ -f /tmp/install_surface ]; then /tmp/install_surface; fi
if [ -f /tmp/install_custom_packages ]; then /tmp/install_custom_packages; fi
if [ -f /tmp/install_custom_script ]; then /tmp/install_custom_script; fi
/tmp/generate_fstab
/tmp/install_initramfs
/tmp/install_efi
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt autoremove
/tmp/cleanup
exit
KALIINIT
chmod 0755 "$linuxloopsdir"/chroot/tmp/init

cleanup_container
set_locale_and_timezone

cat >"$linuxloopsdir"/chroot/tmp/install_user <<KALIUSER
#!/bin/bash
set -e
useradd -s /bin/bash -m '$username'
echo -e '$userpass\n$userpass' | passwd '$username'
usermod -aG sudo '$username'
KALIUSER
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_user

hardware_support="alsa-utils alsa-ucm-conf alsa-topology-conf at-spi2-core avahi-discover avahi-dnsconfd cups cups-browsed cups-filters libnss-mdns pulseaudio system-config-printer xserver-xorg"
basic_packages="gvfs-fuse packagekit udisks2 xdg-user-dirs-gtk"
basic_themes="adwaita-icon-theme breeze-gtk-theme breeze-icon-theme fonts-dejavu fonts-noto fonts-roboto gnome-backgrounds materia-gtk-theme oxygen-icon-theme papirus-icon-theme"
specific_packages="desktop-base plymouth-themes synaptic kali-defaults-desktop kali-themes-common"
desktop_base="$hardware_support $basic_packages $basic_themes $specific_packages"
desktop_services="avahi-daemon.service cups.service cups-browsed.service"
case "$desktop" in
	'budgie')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter budgie-desktop arc-theme nemo gnome-terminal libgdk-pixbuf2.0-bin
"
	;;
	'budgie-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter budgie-desktop arc-theme nautilus gnome-terminal libgdk-pixbuf2.0-bin
"
	;;
	'cinnamon')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter task-cinnamon-desktop gnome-terminal blueman
"
	;;
	'cinnamon-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter task-cinnamon-desktop gnome-terminal blueman
"
	;;
	'enlightenment')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter kali-desktop-e17 terminology
yes | DEBIAN_FRONTEND=noninteractive apt purge network-manager
yes | DEBIAN_FRONTEND=noninteractive apt install connman
systemctl enable connman.service
find /usr/lib -type f -name enlightenment_system -exec chmod 4755 {} \;
"
	;;
	'enlightenment-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter kali-desktop-e17 terminology
yes | DEBIAN_FRONTEND=noninteractive apt purge network-manager
yes | DEBIAN_FRONTEND=noninteractive apt install connman
systemctl enable connman.service
find /usr/lib -type f -name enlightenment_system -exec chmod 4755 {} \;
"
	;;
	'gnome')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base gdm3 kali-desktop-gnome gnome-keyring libpam-gnome-keyring
"
	;;
	'gnome-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base gdm3 kali-desktop-gnome gnome-keyring
"
	;;
	'i3')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter kali-desktop-i3 pavucontrol pasystray network-manager-gnome blueman
"
	;;
	'i3-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter kali-desktop-i3 pavucontrol pasystray network-manager-gnome blueman
"
	;;
	'kde')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base sddm kali-desktop-kde kwin-x11 dolphin plasma-discover konsole plasma-nm plasma-pa bluedevil libpam-kwallet5 powerdevil plasma-widgets-addons systemsettings
"
	;;
	'kde-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base sddm kali-desktop-kde kwin-x11 plasma-nm plasma-pa powerdevil bluedevil libpam-kwallet5
"
	;;
	'lxde')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter kali-desktop-lxde network-manager-gnome blueman
"
	;;
	'lxde-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter kali-desktop-lxde network-manager-gnome blueman
"
	;;
	'mate')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter kali-desktop-mate mate-power-manager mate-media blueman
"
	;;
	'mate-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter kali-desktop-mate mate-power-manager mate-media blueman
"
	;;
	'xfce')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter kali-desktop-xfce blueman
"
	;;
	'xfce-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter kali-desktop-xfce blueman
"
	;;
esac
cat >"$linuxloopsdir"/chroot/tmp/install_desktop <<KALIDESKTOP
#!/bin/bash
set -e
if [ "$desktop" == "none" ]; then exit 0; fi
$install_desktop
systemctl enable $desktop_services
cat >/usr/share/glib-2.0/schemas/zz_linuxloops.gschema.override <<'DCONF'
[org.gnome.desktop.background:Budgie]
picture-uri="file:///usr/share/backgrounds/kali/kali-layers-16x9.png"
[org.gnome.desktop.interface:Budgie]
gtk-theme="Arc"
icon-theme="Papirus"
[org.cinnamon.desktop.background]
picture-uri="file:///usr/share/backgrounds/kali/kali-layers-16x9.png"
[org.cinnamon.desktop.interface]
gtk-theme="Materia"
icon-theme="Papirus"
[org.cinnamon.desktop.wm.preferences]
theme="Materia"
DCONF
if [ ! -z "\$(command -v glib-compile-schemas)" ]; then glib-compile-schemas /usr/share/glib-2.0/schemas/; fi
mkdir -p /etc/xdg/autostart
cat >/etc/xdg/autostart/budgie-nemo.desktop <<'NEMODESKTOP'
[Desktop Entry]
Type=Application
Name=Nemo
Comment=Start Nemo desktop at log in
Exec=nemo-desktop
OnlyShowIn=Budgie;
AutostartCondition=GSettings org.nemo.desktop show-desktop-icons
X-GNOME-AutoRestart=true
NoDisplay=true
NEMODESKTOP
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[Seat:*]\ngreeter-hide-users=false\n' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
KALIDESKTOP
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_desktop

install_secureboot
if [ ! -z "$nvidia" ] && [ "$nvidia" == "Yes" ]; then install_nvidia; fi
if [ ! -z "$surface" ] && [ "$surface" == "Yes" ]; then install_surface "linux-headers-* linux-image-*"; fi

if [ ! -z "$CUSTOM_PACKAGES" ]; then
	echo -e "#!/bin/bash\nset -e\nyes | DEBIAN_FRONTEND=noninteractive apt install $CUSTOM_PACKAGES" > "$linuxloopsdir"/chroot/tmp/install_custom_packages
	chmod 0755 "$linuxloopsdir"/chroot/tmp/install_custom_packages
fi

if [ -f ./custom_script ]; then
	cp ./custom_script "$linuxloopsdir"/chroot/tmp/install_custom_script
	chmod 0755 "$linuxloopsdir"/chroot/tmp/install_custom_script
fi

generate_fstab

cmdline_extra="$CUSTOM_CMDLINE_PARAMS"
install_initramfstools

install_efi

cleanup

chroot "$linuxloopsdir"/chroot /tmp/init || return_value=1

[ "$return_value" -eq 0 ] && create_swap

umount_chroot

return $return_value
}

chroot_kde-neon()
{
return_value=0

download_lxc_image ubuntu jammy default

mount_chroot

cat >"$linuxloopsdir"/chroot/tmp/init <<'KDE_NEONINIT'
#!/bin/bash
set -e
export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
export LD_LIBRARY_PATH=/usr/local/lib64:/usr/local/lib:/usr/lib64:/usr/lib:/lib64:/lib
/tmp/cleanup_container
yes | DEBIAN_FRONTEND=noninteractive apt update
yes | DEBIAN_FRONTEND=noninteractive apt install ca-certificates openssl gpg dirmngr gpg-agent
echo -e 'Dpkg::Options {\n  "--force-confnew";\n};' > /etc/apt/apt.conf.d/71debconf
cat >/etc/apt/sources.list.d/neon.list <<'RECOMMENDS'
deb http://archive.neon.kde.org/user/ jammy main
RECOMMENDS
yes | DEBIAN_FRONTEND=noninteractive apt update --allow-insecure-repositories
yes | DEBIAN_FRONTEND=noninteractive apt install neon-keyring neon-settings --allow-unauthenticated
yes | DEBIAN_FRONTEND=noninteractive apt install -o APT::Immediate-Configure=false --reinstall $(apt list --installed | cut -d'/' -f1 | sed '1d' | sed -z 's@\n@ @g')
yes | DEBIAN_FRONTEND=noninteractive dpkg --configure -a
echo -e 'Dpkg::Options {\n  "--force-confdef";\n};' > /etc/apt/apt.conf.d/71debconf
yes | DEBIAN_FRONTEND=noninteractive apt install apt-utils console-setup kmod
yes | DEBIAN_FRONTEND=noninteractive apt update
yes | DEBIAN_FRONTEND=noninteractive apt install linux-generic linux-headers-generic dkms linux-firmware wireless-regdb bash sudo modemmanager network-manager wpasupplicant bluez cryptsetup-initramfs e2fsprogs ntfs-3g nano acpid curl thermald bash-completion gnupg-utils policykit-1 xdg-user-dirs zstd fwupd-signed patchutils net-tools usb-modeswitch upower efibootmgr grub-efi grub-efi-amd64-signed os-prober shim-signed bind9-host dns-root-data amd64-microcode intel-microcode update-manager-core sbsigntool mokutil dosfstools btrfs-progs zenity
systemctl enable systemd-resolved.service
systemctl disable systemd-networkd.service systemd-networkd-wait-online.service
systemctl mask systemd-networkd.service systemd-networkd-wait-online.service
/tmp/set_locale_and_timezone
/tmp/install_desktop
/tmp/install_user
/tmp/install_secureboot
if [ -f /tmp/install_nvidia ]; then /tmp/install_nvidia; fi
if [ -f /tmp/install_surface ]; then /tmp/install_surface; fi
if [ -f /tmp/install_custom_packages ]; then /tmp/install_custom_packages; fi
if [ -f /tmp/install_custom_script ]; then /tmp/install_custom_script; fi
/tmp/generate_fstab
/tmp/install_initramfs
/tmp/install_efi
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt autoremove
/tmp/cleanup
exit
KDE_NEONINIT
chmod 0755 "$linuxloopsdir"/chroot/tmp/init

cleanup_container
set_locale_and_timezone

cat >"$linuxloopsdir"/chroot/tmp/install_user <<KDE_NEONUSER
#!/bin/bash
set -e
userdel -r -f ubuntu
useradd -s /bin/bash -m '$username'
echo -e '$userpass\n$userpass' | passwd '$username'
usermod -aG sudo '$username'
su $username -c "xdg-user-dirs-update"
KDE_NEONUSER
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_user

case "$desktop" in
	'essentials')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install neon-essentials-desktop libpam-kwallet5
"
	;;
	'full')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install neon-desktop libpam-kwallet5
"
	;;
esac
cat >"$linuxloopsdir"/chroot/tmp/install_desktop <<KDE_NEONDESKTOP
#!/bin/bash
set -e
if [ "$desktop" == "none" ]; then exit 0; fi
$install_desktop
yes | DEBIAN_FRONTEND=noninteractive apt purge plasma-firewall firewalld
KDE_NEONDESKTOP
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_desktop

install_secureboot
if [ ! -z "$nvidia" ] && [ "$nvidia" == "Yes" ]; then install_nvidia; fi
if [ ! -z "$surface" ] && [ "$surface" == "Yes" ]; then install_surface "linux-generic-* linux-headers-* linux-image-* linux-modules-*"; fi

if [ ! -z "$CUSTOM_PACKAGES" ]; then
	echo -e "#!/bin/bash\nset -e\nyes | DEBIAN_FRONTEND=noninteractive apt install $CUSTOM_PACKAGES" > "$linuxloopsdir"/chroot/tmp/install_custom_packages
	chmod 0755 "$linuxloopsdir"/chroot/tmp/install_custom_packages
fi

if [ -f ./custom_script ]; then
	cp ./custom_script "$linuxloopsdir"/chroot/tmp/install_custom_script
	chmod 0755 "$linuxloopsdir"/chroot/tmp/install_custom_script
fi

generate_fstab

cmdline_extra="$CUSTOM_CMDLINE_PARAMS"
install_initramfstools

install_efi

cleanup

chroot "$linuxloopsdir"/chroot /tmp/init || return_value=1

[ "$return_value" -eq 0 ] && create_swap

umount_chroot

return $return_value
}

chroot_manjaro()
{
return_value=0

download_lxc_image archlinux current default

mount_chroot

cat >"$linuxloopsdir"/chroot/tmp/init <<'MANJAROINIT'
#!/bin/bash
set -e
export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
export LD_LIBRARY_PATH=/usr/local/lib64:/usr/local/lib:/usr/lib64:/usr/lib:/lib64:/lib
/tmp/cleanup_container
pacman-key --init
pacman-key --populate
pacman -Syu --noconfirm ca-certificates openssl
pacman -Rdd --noconfirm pacman-mirrorlist
echo 'Server = https://mirrors.manjaro.org/repo/stable/$repo/$arch' > /etc/pacman.d/mirrorlist
curl -L https://gitlab.manjaro.org/packages/core/manjaro-keyring/-/raw/master/manjaro.gpg?inline=false -o /usr/share/pacman/keyrings/manjaro.gpg
curl -L https://gitlab.manjaro.org/packages/core/manjaro-keyring/-/raw/master/manjaro-revoked?inline=false -o /usr/share/pacman/keyrings/manjaro-revoked
curl -L https://gitlab.manjaro.org/packages/core/manjaro-keyring/-/raw/master/manjaro-trusted?inline=false -o /usr/share/pacman/keyrings/manjaro-trusted
rm -rf /etc/pacman.d/gnupg
pacman-key --init
pacman-key --populate
rm /usr/share/pacman/keyrings/manjaro*
# Bugfix: Community repo is still used in Manjaro for now
echo -e '\n[community]\nInclude = /etc/pacman.d/mirrorlist' >> /etc/pacman.conf
pacman -Syy
pacman -Rdd --noconfirm systemd
pacman -Qnq | pacman -S --noconfirm - systemd manjaro-system pacman-mirrors
if [ -f /etc/pacman.conf.pacnew ]; then cp /etc/pacman.conf.pacnew /etc/pacman.conf; rm /etc/pacman.conf.pacnew; fi
#curl -L https://gitlab.manjaro.org/packages/core/pacman/-/raw/master/pacman.conf?inline=false -o /etc/pacman.conf
pacman-key --init
pacman-key --populate
pacman -Syy
pacman -Syu --noconfirm systemd linux61 linux61-headers dkms linux-firmware sof-firmware wireless-regdb bash sudo modemmanager networkmanager wpa_supplicant bluez cryptsetup e2fsprogs ntfs-3g nano acpid curl thermald bash-completion gnupg polkit xdg-user-dirs zstd fwupd patchutils net-tools usb_modeswitch upower efibootmgr grub os-prober shim bind amd-ucode intel-ucode sbsigntools mokutil dosfstools btrfs-progs zenity
systemctl enable bluetooth.service ModemManager.service NetworkManager.service systemd-resolved.service
systemctl disable systemd-networkd.service systemd-networkd-wait-online.service
systemctl mask systemd-networkd.service systemd-networkd-wait-online.service
/tmp/set_locale_and_timezone
/tmp/install_desktop
/tmp/install_user
/tmp/install_secureboot
if [ -f /tmp/install_nvidia ]; then /tmp/install_nvidia; fi
if [ -f /tmp/install_surface ]; then /tmp/install_surface; fi
if [ -f /tmp/install_custom_packages ]; then /tmp/install_custom_packages; fi
if [ -f /tmp/install_custom_script ]; then /tmp/install_custom_script; fi
/tmp/generate_fstab
/tmp/install_initramfs
/tmp/install_efi
/tmp/cleanup
exit
MANJAROINIT
chmod 0755 "$linuxloopsdir"/chroot/tmp/init

cleanup_container
set_locale_and_timezone

cat >"$linuxloopsdir"/chroot/tmp/install_user <<MANJAROUSER
#!/bin/bash
set -e
useradd -s /bin/bash -m '$username'
echo -e '$userpass\n$userpass' | passwd '$username'
usermod -aG wheel '$username'
echo "%wheel      ALL=(ALL) ALL" > /etc/sudoers.d/90-wheel
cat >/etc/polkit-1/rules.d/50-default.rules <<'POLKIT'
polkit.addAdminRule(function(action, subject) {
    return ["unix-group:wheel"];
});
POLKIT
MANJAROUSER
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_user

hardware_support="alsa-lib alsa-utils alsa-topology-conf alsa-ucm-conf at-spi2-core avahi cups cups-filters nss-mdns pulseaudio system-config-printer xorg-server"
basic_packages="gvfs packagekit udisks2 xdg-user-dirs-gtk"
basic_themes="adobe-source-code-pro-fonts adwaita-icon-theme breeze-gtk breeze-icons gnome-backgrounds materia-gtk-theme noto-fonts oxygen-icons papirus-icon-theme ttf-dejavu ttf-roboto"
specific_packages="manjaro-wallpapers-18.0 manjaro-settings-manager matcha-gtk-theme plymouth-theme-manjaro"
desktop_base="$hardware_support $basic_packages $basic_themes $specific_packages"
desktop_services="avahi-daemon.service avahi-dnsconfd.service cups.service cups-browsed.service"
case "$desktop" in
	'budgie')
	install_desktop="
pacman -S --noconfirm $desktop_base lightdm lightdm-slick-greeter budgie-desktop manjaro-budgie-settings network-manager-applet tilix nemo arc-gtk-theme papirus-maia-icon-theme pamac-gtk
systemctl enable lightdm.service
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
"
	;;
	'cinnamon')
	install_desktop="
pacman -S --noconfirm $desktop_base lightdm lightdm-slick-greeter cinnamon manjaro-cinnamon-settings gnome-terminal nemo pamac-gtk blueman
systemctl enable lightdm.service
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
"
	;;
	'deepin')
	install_desktop="
pacman -S --noconfirm $desktop_base lightdm lightdm-slick-greeter deepin deepin-manjaro network-manager-applet deepin-terminal deepin-wallpapers pamac-gtk
systemctl enable lightdm.service
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
"
	;;
	'enlightenment')
	install_desktop="
systemctl disable NetworkManager.service
pacman -S --noconfirm $desktop_base lightdm lightdm-slick-greeter enlightenment terminology pamac-gtk connman
systemctl enable lightdm.service connman.service
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
"
	;;
	'gnome')
	install_desktop="
pacman -S --noconfirm $desktop_base gdm gnome-shell gnome-control-center gnome-keyring gnome-software gnome-backgrounds gnome-terminal nautilus manjaro-gnome-settings
systemctl enable gdm.service
"
	;;
	'gnome-full')
	install_desktop="
pacman -S --noconfirm $desktop_base gdm gnome gnome-extra manjaro-gnome-settings
systemctl enable gdm.service
"
	;;
	'kde')
	install_desktop="
pacman -S --noconfirm $desktop_base sddm qt5-virtualkeyboard plasma manjaro-kde-settings dolphin discover packagekit-qt5 konsole pamac-tray-icon-plasma
systemctl enable lightdm.service
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
"
	;;
	'kde-full')
	install_desktop="
pacman -S --noconfirm $desktop_base sddm qt5-virtualkeyboard plasma kde-applications manjaro-kde-settings dolphin discover packagekit-qt5 konsole pamac-tray-icon-plasma
systemctl enable lightdm.service
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
"
	;;
	'lxde')
	install_desktop="
pacman -S --noconfirm $desktop_base lightdm lightdm-slick-greeter lxde manjaro-lxde-config manjaro-lxde-desktop-settings manjaro-lxde-logout-banner manjaro-lxde-xfce4-notifyd manjaro-lxde-xfce4-volumed-pulse arc-maia-icon-theme kvantum-manjaro lxterminal pcmanfm network-manager-applet blueman pamac-gtk
systemctl enable lightdm.service
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
"
	;;
	'lxqt')
	install_desktop="
pacman -S --noconfirm $desktop_base lightdm lightdm-slick-greeter lxqt manjaro-lxqt-config manjaro-lxqt-desktop-settings manjaro-openbox-adapta-maia papirus-maia-icon-theme qterminal pcmanfm-qt network-manager-applet blueman pamac-gtk
systemctl enable lightdm.service
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
"
	;;
	'mate')
	install_desktop="
pacman -S --noconfirm $desktop_base lightdm lightdm-slick-greeter mate manjaro-mate-settings arc-maia-icon-theme papirus-maia-icon-theme mate-terminal caja mate-control-center network-manager-applet blueman mate-media mate-power-manager pamac-gtk
systemctl enable lightdm.service
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
"
	;;
	'mate-full')
	install_desktop="
pacman -S --noconfirm $desktop_base lightdm lightdm-slick-greeter mate mate-extra manjaro-mate-settings arc-maia-icon-theme papirus-maia-icon-theme mate-terminal caja mate-control-center network-manager-applet blueman mate-media mate-power-manager pamac-gtk
systemctl enable lightdm.service
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
"
	;;
	'xfce')
	install_desktop="
pacman -S --noconfirm $desktop_base lightdm lightdm-slick-greeter xfce4 manjaro-xfce-settings xfce4-terminal xfce4-notifyd xfce4-whiskermenu-plugin thunar xfce4-power-manager xfce4-pulseaudio-plugin network-manager-applet blueman pamac-gtk
systemctl enable lightdm.service
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
"
	;;
	'xfce-full')
	install_desktop="
pacman -S --noconfirm $desktop_base lightdm lightdm-slick-greeter xfce4 xfce4-goodies manjaro-xfce-settings xfce4-terminal xfce4-notifyd xfce4-whiskermenu-plugin thunar xfce4-power-manager xfce4-pulseaudio-plugin network-manager-applet blueman pamac-gtk
systemctl enable lightdm.service
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
"
	;;
esac
cat >"$linuxloopsdir"/chroot/tmp/install_desktop <<MANJARODESKTOP
#!/bin/bash
set -e
if [ "$desktop" == "none" ]; then exit 0; fi
$install_desktop
systemctl enable $desktop_services
cat >/etc/xdg/autostart/budgie-nemo.desktop <<'NEMODESKTOP'
[Desktop Entry]
Type=Application
Name=Nemo
Comment=Start Nemo desktop at log in
Exec=nemo-desktop
OnlyShowIn=Budgie;
AutostartCondition=GSettings org.nemo.desktop show-desktop-icons
X-GNOME-AutoRestart=true
NoDisplay=true
NEMODESKTOP
MANJARODESKTOP
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_desktop

install_secureboot
if [ ! -z "$nvidia" ] && [ "$nvidia" == "Yes" ]; then install_nvidia; fi
if [ ! -z "$surface" ] && [ "$surface" == "Yes" ]; then install_surface "linux61 linux61-headers"; fi

if [ ! -z "$CUSTOM_PACKAGES" ]; then
	echo -e "#!/bin/bash\nset -e\npacman -S --noconfirm $CUSTOM_PACKAGES" > "$linuxloopsdir"/chroot/tmp/install_custom_packages
	chmod 0755 "$linuxloopsdir"/chroot/tmp/install_custom_packages
fi

if [ -f ./custom_script ]; then
	cp ./custom_script "$linuxloopsdir"/chroot/tmp/install_custom_script
	chmod 0755 "$linuxloopsdir"/chroot/tmp/install_custom_script
fi

generate_fstab

cmdline_extra="$CUSTOM_CMDLINE_PARAMS"
install_initcpio

install_efi

cleanup

chroot "$linuxloopsdir"/chroot /tmp/init || return_value=1

[ "$return_value" -eq 0 ] && create_swap

umount_chroot

return $return_value
}

chroot_mint()
{
return_value=0

download_lxc_image ubuntu jammy default

mount_chroot

cat >"$linuxloopsdir"/chroot/tmp/init <<'MINTINIT'
#!/bin/bash
set -e
export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
export LD_LIBRARY_PATH=/usr/local/lib64:/usr/local/lib:/usr/lib64:/usr/lib:/lib64:/lib
/tmp/cleanup_container
yes | DEBIAN_FRONTEND=noninteractive apt update
yes | DEBIAN_FRONTEND=noninteractive apt install ca-certificates openssl
echo -e 'Dpkg::Options {\n  "--force-confnew";\n};' > /etc/apt/apt.conf.d/71debconf
echo -e 'APT::Install-Recommends "0";\nAPT::Get::Install-Recommends "false";' > /etc/apt/apt.conf.d/99linuxloops
rm -f /etc/apt/sources.list
cat >/etc/apt/sources.list.d/official-package-repositories.list <<'REPOS'
deb http://packages.linuxmint.com vera main upstream import backport #id:linuxmint_main

deb http://archive.ubuntu.com/ubuntu jammy main restricted universe multiverse
deb http://archive.ubuntu.com/ubuntu jammy-updates main restricted universe multiverse
deb http://archive.ubuntu.com/ubuntu jammy-backports main restricted universe multiverse

deb http://security.ubuntu.com/ubuntu/ jammy-security main restricted universe multiverse
REPOS
cat >/etc/apt/preferences.d/official-package-repositories.pref <<'PRIORITY'
Package: *
Pin: origin live.linuxmint.com
Pin-Priority: 750

Package: *
Pin: release o=linuxmint,c=upstream
Pin-Priority: 700

Package: *
Pin: release o=LP-PPA-linuxmint-daily-build-team-daily-builds
Pin-Priority: 700
PRIORITY
yes | DEBIAN_FRONTEND=noninteractive apt update --allow-insecure-repositories
yes | DEBIAN_FRONTEND=noninteractive apt install linuxmint-keyring mintsources --allow-unauthenticated
yes | DEBIAN_FRONTEND=noninteractive apt update
yes | DEBIAN_FRONTEND=noninteractive apt install -o APT::Immediate-Configure=false --reinstall $(apt list --installed | cut -d'/' -f1 | sed '1d' | sed -z 's@\n@ @g')
yes | DEBIAN_FRONTEND=noninteractive dpkg --configure -a
yes | DEBIAN_FRONTEND=noninteractive apt update
echo -e 'Dpkg::Options {\n  "--force-confdef";\n};' > /etc/apt/apt.conf.d/71debconf
yes | DEBIAN_FRONTEND=noninteractive apt install apt-utils console-setup kmod
yes | DEBIAN_FRONTEND=noninteractive apt install linux-generic linux-headers-generic dkms linux-firmware wireless-regdb bash sudo modemmanager network-manager wpasupplicant bluez cryptsetup-initramfs e2fsprogs ntfs-3g nano acpid curl thermald bash-completion gnupg-utils policykit-1 xdg-user-dirs zstd fwupd-signed patchutils net-tools usb-modeswitch upower efibootmgr grub-efi grub-efi-amd64-signed os-prober shim-signed bind9-host dns-root-data sbsigntool mokutil dosfstools btrfs-progs zenity
systemctl enable systemd-resolved.service
systemctl disable systemd-networkd.service systemd-networkd-wait-online.service
systemctl mask systemd-networkd.service systemd-networkd-wait-online.service
/tmp/set_locale_and_timezone
/tmp/install_desktop
/tmp/install_user
apt list --installed | grep 'tilix' && yes | DEBIAN_FRONTEND=noninteractive apt purge 'tilix'
/tmp/install_secureboot
if [ -f /tmp/install_nvidia ]; then /tmp/install_nvidia; fi
if [ -f /tmp/install_surface ]; then /tmp/install_surface; fi
if [ -f /tmp/install_custom_packages ]; then /tmp/install_custom_packages; fi
if [ -f /tmp/install_custom_script ]; then /tmp/install_custom_script; fi
/tmp/generate_fstab
/tmp/install_initramfs
/tmp/install_efi
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt autoremove
/tmp/cleanup
exit
MINTINIT
chmod 0755 "$linuxloopsdir"/chroot/tmp/init

cleanup_container
set_locale_and_timezone

cat >"$linuxloopsdir"/chroot/tmp/install_user <<MINTUSER
#!/bin/bash
set -e
userdel -r -f ubuntu
useradd -s /bin/bash -m '$username'
echo -e '$userpass\n$userpass' | passwd '$username'
usermod -aG sudo '$username'
MINTUSER
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_user

hardware_support="alsa-utils alsa-ucm-conf alsa-topology-conf at-spi2-core avahi-discover cups cups-browsed cups-filters firmware-sof-signed libnss-mdns pulseaudio system-config-printer xserver-xorg"
basic_packages="gvfs-fuse packagekit udisks2 xdg-user-dirs-gtk"
basic_themes="adwaita-icon-theme breeze-gtk-theme breeze-icon-theme fonts-dejavu fonts-noto fonts-roboto gnome-backgrounds materia-gtk-theme oxygen-icon-theme papirus-icon-theme"
specific_packages="desktop-base mint-artwork mint-themes mint-x-icons mint-y-icons mint-backgrounds-vera plymouth-themes fonts-ubuntu mintinstall mintsystem mintupdate mintupgrade ubuntu-system-adjustments grub2-theme-mint"
desktop_base="$hardware_support $basic_packages $basic_themes $specific_packages"
case "$desktop" in
	'cinnamon')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install network-manager-gnome blueman
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter mint-meta-cinnamon mint-info-cinnamon cinnamon-desktop-environment gnome-terminal nemo
"
	;;
	'cinnamon-full')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install network-manager-gnome blueman
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter mint-meta-cinnamon mint-info-cinnamon cinnamon-desktop-environment gnome-terminal nemo
"
	;;
	'mate')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install network-manager-gnome blueman
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter mint-meta-mate mint-info-mate mate-desktop-environment gnome-terminal nemo
"
	;;
	'mate-full')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install network-manager-gnome blueman
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter mint-meta-mate mint-info-mate mate-desktop-environment gnome-terminal nemo
"
	;;
	'xfce')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install network-manager-gnome blueman
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter mint-meta-xfce mint-info-xfce xfce4 xfce4-power-manager xfce4-terminal thunar
"
	;;
	'xfce-full')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install network-manager-gnome blueman
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter mint-meta-xfce mint-info-xfce xfce4 xfce4-power-manager xfce4-terminal thunar
"
	;;
esac
cat >"$linuxloopsdir"/chroot/tmp/install_desktop <<MINTDESKTOP
#!/bin/bash
set -e
if [ "$desktop" == "none" ]; then exit 0; fi
$install_desktop
mkdir -p /etc/lightdm
echo -e '[Greeter]\ndraw-user-backgrounds = true' > /etc/lightdm/slick-greeter.conf
MINTDESKTOP
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_desktop

install_secureboot
if [ ! -z "$nvidia" ] && [ "$nvidia" == "Yes" ]; then install_nvidia; fi
if [ ! -z "$surface" ] && [ "$surface" == "Yes" ]; then install_surface "linux-generic-* linux-headers-* linux-image-* linux-modules-*"; fi

if [ ! -z "$CUSTOM_PACKAGES" ]; then
	echo -e "#!/bin/bash\nset -e\nyes | DEBIAN_FRONTEND=noninteractive apt install $CUSTOM_PACKAGES" > "$linuxloopsdir"/chroot/tmp/install_custom_packages
	chmod 0755 "$linuxloopsdir"/chroot/tmp/install_custom_packages
fi

if [ -f ./custom_script ]; then
	cp ./custom_script "$linuxloopsdir"/chroot/tmp/install_custom_script
	chmod 0755 "$linuxloopsdir"/chroot/tmp/install_custom_script
fi

generate_fstab

cmdline_extra="$CUSTOM_CMDLINE_PARAMS"
install_initramfstools

install_efi

cleanup

chroot "$linuxloopsdir"/chroot /tmp/init || return_value=1

[ "$return_value" -eq 0 ] && create_swap

umount_chroot

return $return_value
}

chroot_mint-lmde()
{
return_value=0

download_lxc_image debian bullseye default

mount_chroot

cat >"$linuxloopsdir"/chroot/tmp/init <<'MINTLMDEINIT'
#!/bin/bash
set -e
export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
export LD_LIBRARY_PATH=/usr/local/lib64:/usr/local/lib:/usr/lib64:/usr/lib:/lib64:/lib
/tmp/cleanup_container
yes | DEBIAN_FRONTEND=noninteractive apt update
yes | DEBIAN_FRONTEND=noninteractive apt install ca-certificates openssl
echo -e 'Dpkg::Options {\n  "--force-confnew";\n};' > /etc/apt/apt.conf.d/71debconf
echo -e 'APT::Install-Recommends "0";\nAPT::Get::Install-Recommends "false";' > /etc/apt/apt.conf.d/99linuxloops
rm -f /etc/apt/sources.list
cat >/etc/apt/sources.list.d/official-package-repositories.list <<'REPOS'
deb http://packages.linuxmint.com elsie main upstream import backport #id:linuxmint_main

deb https://deb.debian.org/debian bullseye main contrib non-free
deb https://deb.debian.org/debian bullseye-updates main contrib non-free
deb http://security.debian.org bullseye-security main contrib non-free

deb https://deb.debian.org/debian bullseye-backports main contrib non-free
REPOS
cat >/etc/apt/preferences.d/official-package-repositories.pref <<'PRIORITY'
Package: *
Pin: origin live.linuxmint.com
Pin-Priority: 750

Package: *
Pin: release o=linuxmint,c=upstream
Pin-Priority: 700
PRIORITY
yes | DEBIAN_FRONTEND=noninteractive apt update --allow-insecure-repositories
yes | DEBIAN_FRONTEND=noninteractive apt install linuxmint-keyring mintsources --allow-unauthenticated
yes | DEBIAN_FRONTEND=noninteractive apt update
yes | DEBIAN_FRONTEND=noninteractive apt install -o APT::Immediate-Configure=false --reinstall $(apt list --installed | cut -d'/' -f1 | sed '1d' | sed -z 's@\n@ @g')
yes | DEBIAN_FRONTEND=noninteractive dpkg --configure -a
yes | DEBIAN_FRONTEND=noninteractive apt update
echo -e 'Dpkg::Options {\n  "--force-confdef";\n};' > /etc/apt/apt.conf.d/71debconf
yes | DEBIAN_FRONTEND=noninteractive apt install apt-utils console-setup kmod
yes | DEBIAN_FRONTEND=noninteractive apt update
yes | DEBIAN_FRONTEND=noninteractive apt install linux-image-amd64 linux-headers-amd64 dkms firmware-linux firmware-atheros firmware-iwlwifi firmware-realtek wireless-regdb bash sudo modemmanager network-manager wpasupplicant bluez cryptsetup-initramfs e2fsprogs ntfs-3g nano acpid curl thermald bash-completion gnupg-utils policykit-1 xdg-user-dirs zstd fwupd-signed patchutils net-tools usb-modeswitch upower efibootmgr grub-efi grub-efi-amd64-signed os-prober shim-signed bind9-host dns-root-data amd64-microcode intel-microcode lsb-release sbsigntool mokutil dosfstools btrfs-progs
echo -e 'sign_tool="/etc/dkms/sign_helper.sh"' >> /etc/dkms/framework.conf
echo -e '#!/bin/sh\n/lib/modules/"$1"/build/scripts/sign-file sha512 /var/lib/shim-signed/mok/MOK.priv /var/lib/shim-signed/mok/MOK.der "$2"' > /etc/dkms/sign_helper.sh
systemctl enable systemd-resolved.service
systemctl disable systemd-networkd.service systemd-networkd-wait-online.service
systemctl mask systemd-networkd.service systemd-networkd-wait-online.service
/tmp/set_locale_and_timezone
/tmp/install_desktop
/tmp/install_user
apt list --installed | grep 'tilix' && yes | DEBIAN_FRONTEND=noninteractive apt purge 'tilix'
/tmp/install_secureboot
if [ -f /tmp/install_nvidia ]; then /tmp/install_nvidia; fi
if [ -f /tmp/install_surface ]; then /tmp/install_surface; fi
if [ -f /tmp/install_custom_packages ]; then /tmp/install_custom_packages; fi
if [ -f /tmp/install_custom_script ]; then /tmp/install_custom_script; fi
/tmp/generate_fstab
/tmp/install_initramfs
/tmp/install_efi
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt autoremove
/tmp/cleanup
exit
MINTLMDEINIT
chmod 0755 "$linuxloopsdir"/chroot/tmp/init

cleanup_container
set_locale_and_timezone

cat >"$linuxloopsdir"/chroot/tmp/install_user <<MINTLMDEUSER
#!/bin/bash
set -e
useradd -s /bin/bash -m '$username'
echo -e '$userpass\n$userpass' | passwd '$username'
usermod -aG sudo '$username'
MINTLMDEUSER
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_user

hardware_support="alsa-utils alsa-ucm-conf alsa-topology-conf at-spi2-core avahi-discover cups cups-browsed cups-filters firmware-sof-signed libnss-mdns pulseaudio system-config-printer xserver-xorg"
basic_packages="gvfs-fuse packagekit udisks2 xdg-user-dirs-gtk"
basic_themes="adwaita-icon-theme breeze-gtk-theme breeze-icon-theme fonts-dejavu fonts-noto fonts-roboto gnome-backgrounds materia-gtk-theme oxygen-icon-theme papirus-icon-theme"
specific_packages="desktop-base mint-artwork mint-themes mint-x-icons mint-y-icons plymouth-themes fonts-ubuntu mintinstall mintsystem mintupdate mintupgrade grub2-theme-mint"
desktop_base="$hardware_support $basic_packages $basic_themes $specific_packages"
case "$desktop" in
	'cinnamon')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install network-manager-gnome blueman
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter mint-meta-cinnamon cinnamon-desktop-environment gnome-terminal nemo
"
	;;
	'cinnamon-full')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install network-manager-gnome blueman
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter mint-meta-cinnamon cinnamon-desktop-environment gnome-terminal nemo
"
	;;
esac
cat >"$linuxloopsdir"/chroot/tmp/install_desktop <<MINTLMDEDESKTOP
#!/bin/bash
set -e
if [ "$desktop" == "none" ]; then exit 0; fi
$install_desktop
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[Seat:*]\ngreeter-hide-users=false\n' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
MINTLMDEDESKTOP
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_desktop

install_secureboot
if [ ! -z "$nvidia" ] && [ "$nvidia" == "Yes" ]; then install_nvidia; fi
if [ ! -z "$surface" ] && [ "$surface" == "Yes" ]; then install_surface "linux-headers-* linux-image-*"; fi

if [ ! -z "$CUSTOM_PACKAGES" ]; then
	echo -e "#!/bin/bash\nset -e\nyes | DEBIAN_FRONTEND=noninteractive apt install $CUSTOM_PACKAGES" > "$linuxloopsdir"/chroot/tmp/install_custom_packages
	chmod 0755 "$linuxloopsdir"/chroot/tmp/install_custom_packages
fi

if [ -f ./custom_script ]; then
	cp ./custom_script "$linuxloopsdir"/chroot/tmp/install_custom_script
	chmod 0755 "$linuxloopsdir"/chroot/tmp/install_custom_script
fi

generate_fstab

cmdline_extra="$CUSTOM_CMDLINE_PARAMS"
install_initramfstools

install_efi

cleanup

chroot "$linuxloopsdir"/chroot /tmp/init || return_value=1

[ "$return_value" -eq 0 ] && create_swap

umount_chroot

return $return_value
}

chroot_mxlinux()
{
return_value=0

download_lxc_image debian bullseye default

mount_chroot

cat >"$linuxloopsdir"/chroot/tmp/init <<'MXLINUXINIT'
#!/bin/bash
set -e
export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
export LD_LIBRARY_PATH=/usr/local/lib64:/usr/local/lib:/usr/lib64:/usr/lib:/lib64:/lib
/tmp/cleanup_container
yes | DEBIAN_FRONTEND=noninteractive apt update
yes | DEBIAN_FRONTEND=noninteractive apt install ca-certificates openssl
echo -e 'Dpkg::Options {\n  "--force-confnew";\n};' > /etc/apt/apt.conf.d/71debconf
sed -i 's@ main@ main contrib non-free@g' /etc/apt/sources.list
cat >/etc/apt/sources.list.d/mx.list <<'SOURCES'
deb http://mxrepo.com/mx/repo/ bullseye main non-free
#deb http://mxrepo.com/mx/repo/ bullseye ahs
SOURCES
echo -e 'APT::Install-Recommends "0";\nAPT::Get::Install-Recommends "false";' > /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt update --allow-insecure-repositories
yes | DEBIAN_FRONTEND=noninteractive apt install mx21-archive-keyring --allow-unauthenticated
yes | DEBIAN_FRONTEND=noninteractive apt install -o APT::Immediate-Configure=false --reinstall $(apt list --installed | cut -d'/' -f1 | sed '1d' | sed -z 's@\n@ @g')
yes | DEBIAN_FRONTEND=noninteractive dpkg --configure -a
echo -e 'Dpkg::Options {\n  "--force-confdef";\n};' > /etc/apt/apt.conf.d/71debconf
yes | DEBIAN_FRONTEND=noninteractive apt install apt-utils console-setup kmod
yes | DEBIAN_FRONTEND=noninteractive apt update
yes | DEBIAN_FRONTEND=noninteractive apt install linux-image-amd64 linux-headers-amd64 dkms firmware-linux firmware-atheros firmware-iwlwifi firmware-realtek wireless-regdb bash sudo modemmanager network-manager wpasupplicant bluez cryptsetup-initramfs e2fsprogs ntfs-3g nano acpid curl thermald bash-completion gnupg-utils policykit-1 xdg-user-dirs zstd fwupd-signed patchutils net-tools usb-modeswitch upower efibootmgr grub-efi grub-efi-amd64-signed os-prober shim-signed bind9-host dns-root-data amd64-microcode intel-microcode sbsigntool mokutil dosfstools btrfs-progs zenity
echo -e 'sign_tool="/etc/dkms/sign_helper.sh"' >> /etc/dkms/framework.conf
echo -e '#!/bin/sh\n/lib/modules/"$1"/build/scripts/sign-file sha512 /var/lib/shim-signed/mok/MOK.priv /var/lib/shim-signed/mok/MOK.der "$2"' > /etc/dkms/sign_helper.sh
chmod 0755 /etc/dkms/sign_helper.sh
systemctl enable systemd-resolved.service
systemctl disable systemd-networkd.service systemd-networkd-wait-online.service
systemctl mask systemd-networkd.service systemd-networkd-wait-online.service
/tmp/set_locale_and_timezone
/tmp/install_desktop
/tmp/install_user
/tmp/install_secureboot
if [ -f /tmp/install_nvidia ]; then /tmp/install_nvidia; fi
if [ -f /tmp/install_surface ]; then /tmp/install_surface; fi
if [ -f /tmp/install_custom_packages ]; then /tmp/install_custom_packages; fi
if [ -f /tmp/install_custom_script ]; then /tmp/install_custom_script; fi
/tmp/generate_fstab
/tmp/install_initramfs
/tmp/install_efi
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt autoremove
/tmp/cleanup
exit
MXLINUXINIT
chmod 0755 "$linuxloopsdir"/chroot/tmp/init

cleanup_container
set_locale_and_timezone

cat >"$linuxloopsdir"/chroot/tmp/install_user <<MXLINUXUSER
#!/bin/bash
set -e
useradd -s /bin/bash -m '$username'
echo -e '$userpass\n$userpass' | passwd '$username'
usermod -aG audio,sudo '$username'
MXLINUXUSER
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_user

hardware_support="alsa-utils alsa-ucm-conf alsa-topology-conf at-spi2-core avahi-discover cups libnss-mdns pulseaudio system-config-printer xserver-xorg"
basic_packages="gvfs-fuse packagekit udisks2 xdg-user-dirs-gtk"
basic_themes="adwaita-icon-theme breeze-gtk-theme breeze-icon-theme fonts-dejavu fonts-noto fonts-roboto gnome-backgrounds materia-gtk-theme oxygen-icon-theme papirus-icon-theme"
specific_packages="desktop-base plymouth-themes-mx synaptic mx-greybird-themes mx-comfort-themes mx-icons-start mx-sound-theme-borealis mx-sound-theme-fresh-and-clean mx21-artwork desktop-defaults-mx-applications desktop-defaults-mx-common"
desktop_base="$hardware_support $basic_packages $basic_themes $specific_packages"
case "$desktop" in
	'budgie')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter budgie-desktop arc-theme nautilus tilix
"
	;;
	'cinnamon')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter cinnamon gnome-terminal nemo blueman
"
	;;
	'cinnamon-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter task-cinnamon-desktop blueman
"
	;;
	'enlightenment')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter enlightenment terminology
yes | DEBIAN_FRONTEND=noninteractive apt purge network-manager
yes | DEBIAN_FRONTEND=noninteractive apt install connman
find /usr/lib -type f -name enlightenment_system -exec chmod 4755 {} \;
"
	;;
	'gnome')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base gdm3 gnome-session gnome-shell gnome-control-center gnome-terminal nautilus gnome-icon-theme gnome-keyring libpam-gnome-keyring
"
	;;
	'gnome-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base gdm3 task-gnome-desktop
"
	;;
	'kde')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base sddm sddm-theme-breeze kde-plasma-desktop kwin-x11 dolphin plasma-discover konsole plasma-nm plasma-pa bluedevil libpam-kwallet5 powerdevil plasma-widgets-addons systemsettings plasma-look-and-feel-theme-mx plasma-modified-defaults-mx desktop-defaults-mx-kde
"
	;;
	'kde-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base sddm sddm-theme-breeze task-kde-desktop plasma-look-and-feel-theme-mx plasma-modified-defaults-mx desktop-defaults-mx-kde
"
	;;
	'lxde')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter lxde-core lxterminal pcmanfm lxde-icon-theme network-manager-gnome lxappearance lxinput blueman
"
	;;
	'lxde-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter task-lxde-desktop network-manager-gnome blueman
"
	;;
	'lxqt')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter lxqt-core qterminal pcmanfm-qt lxqt-theme-debian lxde-icon-theme network-manager-gnome mutter lxqt-powermanagement lxqt-themes oxygen-icon-theme blueman
"
	;;
	'lxqt-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter task-lxqt-desktop network-manager-gnome blueman
yes | DEBIAN_FRONTEND=noninteractive apt purge sddm
"
	;;
	'mate')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter mate-desktop mate-session-manager marco mate-control-center mate-notification-daemon mate-applets mate-indicator-applet mate-applet-brisk-menu mate-themes mate-icon-theme mate-terminal caja network-manager-gnome blueman mate-media mate-power-manager
"
	;;
	'mate-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter task-mate-desktop blueman
"
	;;
	'xfce')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter xfce4 xfce4-power-manager xfce4-terminal thunar xfce4-notifyd xfce4-whiskermenu-plugin network-manager-gnome blueman desktop-defaults-mx-xfce papirus-mxblue xfce4-docklike-plugin
"
	;;
	'xfce-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter task-xfce-desktop network-manager-gnome blueman desktop-defaults-mx-xfce papirus-mxblue xfce4-docklike-plugin
"
	;;
esac
cat >"$linuxloopsdir"/chroot/tmp/install_desktop <<MXLINUXDESKTOP
#!/bin/bash
set -e
if [ "$desktop" == "none" ]; then exit 0; fi
$install_desktop
mkdir -p /usr/share/glib-2.0/schemas
cat >/usr/share/glib-2.0/schemas/zz_linuxloops.gschema.override <<'DCONF'
[org.gnome.desktop.background:Budgie]
picture-uri="file:///usr/share/backgrounds/honesty-muted.jpg"
[org.gnome.desktop.interface:Budgie]
gtk-theme="Arc"
icon-theme="Papirus"
[org.cinnamon.desktop.background]
picture-uri="file:///usr/share/backgrounds/honesty-muted.jpg"
[org.cinnamon.desktop.interface]
gtk-theme="Materia"
icon-theme="Papirus"
[org.cinnamon.desktop.wm.preferences]
theme="Materia"
DCONF
if [ ! -z "\$(command -v glib-compile-schemas)" ]; then glib-compile-schemas /usr/share/glib-2.0/schemas/; fi
mkdir -p /etc/xdg/autostart
cat >/etc/xdg/autostart/budgie-nemo.desktop <<'NEMODESKTOP'
[Desktop Entry]
Type=Application
Name=Nemo
Comment=Start Nemo desktop at log in
Exec=nemo-desktop
OnlyShowIn=Budgie;
AutostartCondition=GSettings org.nemo.desktop show-desktop-icons
X-GNOME-AutoRestart=true
NoDisplay=true
NEMODESKTOP
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[Seat:*]\ngreeter-hide-users=false\n' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
MXLINUXDESKTOP
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_desktop

install_secureboot
if [ ! -z "$nvidia" ] && [ "$nvidia" == "Yes" ]; then install_nvidia; fi
if [ ! -z "$surface" ] && [ "$surface" == "Yes" ]; then install_surface "linux-headers-* linux-image-*"; fi

if [ ! -z "$CUSTOM_PACKAGES" ]; then
	echo -e "#!/bin/bash\nset -e\nyes | DEBIAN_FRONTEND=noninteractive apt install $CUSTOM_PACKAGES" > "$linuxloopsdir"/chroot/tmp/install_custom_packages
	chmod 0755 "$linuxloopsdir"/chroot/tmp/install_custom_packages
fi

if [ -f ./custom_script ]; then
	cp ./custom_script "$linuxloopsdir"/chroot/tmp/install_custom_script
	chmod 0755 "$linuxloopsdir"/chroot/tmp/install_custom_script
fi

generate_fstab

cmdline_extra="$CUSTOM_CMDLINE_PARAMS"
install_initramfstools

install_efi

cleanup

chroot "$linuxloopsdir"/chroot /tmp/init || return_value=1

[ "$return_value" -eq 0 ] && create_swap

umount_chroot

return $return_value
}

chroot_nixos()
{
return_value=0

mkdir -p "$linuxloopsdir"/chroot/installroot/mnt
mount --bind "$linuxloopsdir"/chroot "$linuxloopsdir"/chroot
mount --make-slave "$linuxloopsdir"/chroot
mount --bind "$linuxloopsdir"/chroot/installroot "$linuxloopsdir"/chroot/installroot
mount --make-slave "$linuxloopsdir"/chroot/installroot
mount --bind "$linuxloopsdir"/chroot "$linuxloopsdir"/chroot/installroot/mnt

download_lxc_image archlinux current default /installroot

mount_chroot /installroot
umount "$linuxloopsdir"/chroot/installroot/mnt/boot/efi
umount "$linuxloopsdir"/chroot/installroot/mnt/boot
boot_loop="$(losetup --show -fP "$partition_path"2)"
efi_loop="$(losetup --show -fP "$partition_path"1)"
mount "$boot_loop" "$linuxloopsdir"/chroot/installroot/mnt/boot
mount "$efi_loop" "$linuxloopsdir"/chroot/installroot/mnt/boot/efi

cat >"$linuxloopsdir"/chroot/installroot/tmp/init <<'NIXOSINIT'
#!/bin/bash
set -e
export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
export LD_LIBRARY_PATH=/usr/local/lib64:/usr/local/lib:/usr/lib64:/usr/lib:/lib64:/lib
/tmp/cleanup_container
pacman-key --init
pacman-key --populate
pacman -Syu --noconfirm ca-certificates openssl
/tmp/set_locale_and_timezone
/tmp/install_secureboot
useradd -s /bin/bash -m 'temp'
echo -e 'temp\ntemp' | passwd 'temp'
echo "temp      ALL=(ALL) NOPASSWD: ALL" > /etc/sudoers.d/90-wheel
groupadd -g 30000 nixbld
useradd -u 30000 -g nixbld -G nixbld nixbld
su -l temp -c bash << NIXOSINSTALL
sudo mkdir -p /nix && sudo chown -R temp /nix
curl -L https://nixos.org/nix/install | sh
. /home/temp/.nix-profile/etc/profile.d/nix.sh
nix-channel --add https://nixos.org/channels/nixos-23.05 nixpkgs
nix-channel --update
nix-env -f '<nixpkgs>' -iA nixos-install-tools
sudo NIX_PATH=/home/temp/.nix-defexpr/channels nixos-install --root /mnt
/tmp/install_user
NIXOSINSTALL
/tmp/cleanup
exit
NIXOSINIT
chmod 0755 "$linuxloopsdir"/chroot/installroot/tmp/init

cleanup_container /installroot
set_locale_and_timezone /installroot

cat >"$linuxloopsdir"/chroot/installroot/tmp/install_user <<NIXOSUSER
sudo nixos-enter << NIXOSCHROOT
set -e
useradd -m '$username'
echo -e '$userpass\n$userpass' | passwd '$username'
usermod -aG wheel,networkmanager '$username'
NIXOSCHROOT
NIXOSUSER
chmod 0755 "$linuxloopsdir"/chroot/installroot/tmp/install_user

case "$desktop" in
	'budgie-full')
	nixos_desktop="
services.xserver.enable = true;
services.xserver.displayManager.lightdm.enable = true;
services.xserver.desktopManager.budgie.enable = true;
"
	;;
	'cinnamon-full')
	nixos_desktop="
services.xserver.enable = true;
services.xserver.displayManager.lightdm.enable = true;
services.xserver.desktopManager.cinnamon.enable = true;
"
	;;
	'deepin-full')
	nixos_desktop="
services.xserver.enable = true;
services.xserver.displayManager.lightdm.enable = true;
services.xserver.desktopManager.deepin.enable = true;
"
	;;
	'gnome-full')
	nixos_desktop="
services.xserver.enable = true;
services.xserver.displayManager.gdm.enable = true;
services.xserver.displayManager.gdm.wayland = false;
services.xserver.desktopManager.gnome.enable = true;
"
	;;
	'kde-full')
	nixos_desktop="
services.xserver.enable = true;
services.xserver.displayManager.sddm.enable = true;
services.xserver.desktopManager.plasma5.enable = true;
"
	;;
	'lxqt-full')
	nixos_desktop="
services.xserver.enable = true;
services.xserver.displayManager.lightdm.enable = true;
services.xserver.desktopManager.lxqt.enable = true;
"
	;;
	'mate-full')
	nixos_desktop="
services.xserver.enable = true;
services.xserver.displayManager.lightdm.enable = true;
services.xserver.desktopManager.mate.enable = true;
"
	;;
	'pantheon-full')
	nixos_desktop="
services.xserver.enable = true;
services.xserver.displayManager.lightdm.enable = true;
services.xserver.desktopManager.pantheon.enable = true;
"
	;;
	'xfce-full')
	nixos_desktop="
services.xserver.enable = true;
services.xserver.displayManager.lightdm.enable = true;
services.xserver.desktopManager.xfce.enable = true;
"
CUSTOM_PACKAGES="xfce.xfce4-pulseaudio-plugin $CUSTOM_PACKAGES"
	;;
esac

install_secureboot /installroot /mnt
if [ ! -z "$nvidia" ] && [ "$nvidia" == "Yes" ]; then install_nvidia; fi

if [ -f ./custom_script ]; then cp ./custom_script "$linuxloopsdir"/chroot/installroot/tmp/install_custom_script; fi

cmdline_extra="$CUSTOM_CMDLINE_PARAMS"
install_nixos_config

cleanup /installroot

chroot "$linuxloopsdir"/chroot/installroot /tmp/init || return_value=1

umount "$linuxloopsdir"/chroot/installroot/mnt/boot/efi
umount "$linuxloopsdir"/chroot/installroot/mnt/boot
losetup -d "$efi_loop"
losetup -d "$boot_loop"

[ "$return_value" -eq 0 ] && create_swap /installroot

umount_chroot /installroot

umount "$linuxloopsdir"/chroot/installroot/mnt
umount "$linuxloopsdir"/chroot/installroot
rm -r "$linuxloopsdir"/chroot/installroot
umount "$linuxloopsdir"/chroot

return $return_value
}

chroot_opensuse()
{
return_value=0

download_lxc_image opensuse tumbleweed default

mount_chroot

cat >"$linuxloopsdir"/chroot/tmp/init <<'OPENSUSEINIT'
#!/bin/bash
set -e
export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
export LD_LIBRARY_PATH=/usr/local/lib64:/usr/local/lib:/usr/lib64:/usr/lib:/lib64:/lib
/tmp/cleanup_container
zypper --non-interactive refresh
zypper --non-interactive install ca-certificates openssl
sed -i 's@# autoAgreeWithLicenses = no@autoAgreeWithLicenses = yes@g' /etc/zypp/zypper.conf
zypper --non-interactive install -f $(rpm -q -a --qf '%{NAME} ' | sed 's@ gpg-pubkey@@g')
zypper --non-interactive install kernel-default kernel-default-devel dkms kernel-firmware-all wireless-regdb glibc-i18ndata patterns-base-base nano ntfs-3g sudo ModemManager NetworkManager wpa_supplicant bluez pulseaudio alsa-utils alsa-firmware cryptsetup nano e2fsprogs ntfsprogs device-mapper cantarell-fonts acpid curl thermald bash-completion gpg2 polkit postfix system-group-wheel xdg-user-dirs zstd fwupd-efi patchutils net-tools usb_modeswitch upower efibootmgr grub2-x86_64-efi grub2-branding-openSUSE os-prober shim bind ucode-amd ucode-intel sbsigntools dosfstools btrfsprogs zenity
systemctl disable wicked.service
systemctl enable named.service NetworkManager.service
/tmp/set_locale_and_timezone
/tmp/install_desktop
/tmp/install_user
/tmp/install_secureboot
if [ -f /tmp/install_nvidia ]; then /tmp/install_nvidia; fi
if [ -f /tmp/install_custom_packages ]; then /tmp/install_custom_packages; fi
if [ -f /tmp/install_custom_script ]; then /tmp/install_custom_script; fi
/tmp/generate_fstab
/tmp/install_initramfs
/tmp/install_efi
sed -i 's@solver.onlyRequires = true@# solver.onlyRequires = false@g' /etc/zypp/zypp.conf
if [ -d /etc/NetworkManager/conf.d ]; then echo -e '[connection]\nwifi.powersave = 2' > /etc/NetworkManager/conf.d/99-wifi-powersave-off.conf; fi
/tmp/cleanup
exit
OPENSUSEINIT
chmod 0755 "$linuxloopsdir"/chroot/tmp/init

cleanup_container
set_locale_and_timezone

cat >"$linuxloopsdir"/chroot/tmp/install_user <<OPENSUSEUSER
#!/bin/bash
set -e
useradd -s /bin/bash -m '$username'
echo -e '$userpass\n$userpass' | passwd '$username'
usermod -aG wheel '$username'
echo -e "Defaults secure_path="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"\nroot ALL=(ALL) ALL\n@includedir /etc/sudoers.d" > /etc/sudoers
echo "%wheel      ALL=(ALL) ALL" > /etc/sudoers.d/90-wheel
cat >/etc/polkit-1/rules.d/50-default.rules <<'POLKIT'
polkit.addAdminRule(function(action, subject) {
    return ["unix-group:wheel"];
});
POLKIT
cat >/etc/polkit-1/rules.d/50-org.freedesktop.NetworkManager.rules <<'NETWORKMANAGER'
polkit.addRule(function(action, subject) {
    if (action.id.indexOf("org.freedesktop.NetworkManager.") == 0 && subject.isInGroup("wheel")) {
        return polkit.Result.YES;
    }
});
NETWORKMANAGER
cat >/etc/polkit-1/rules.d/51-blueman.rules <<'BLUEMAN'
polkit.addRule(function(action, subject) {
    if ((action.id == "org.blueman.network.setup" ||
         action.id == "org.blueman.dhcp.client" ||
         action.id == "org.blueman.rfkill.setstate" ||
         action.id == "org.blueman.pppd.pppconnect") &&
        subject.isInGroup("wheel")) {

        return polkit.Result.YES;
    }
});
BLUEMAN
OPENSUSEUSER
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_user

hardware_support="at-spi2-core avahi cups cups-filters nss-mdns system-config-printer"
basic_packages="gvfs-fuse PackageKit udisks2 xdg-user-dirs-gtk"
basic_themes="adwaita-icon-theme breeze breeze-gtk dejavu-fonts google-roboto-fonts gnome-backgrounds materia-gtk-theme oxygen-icon-theme papirus-icon-theme"
specific_packages="adobe-sourcecodepro-fonts plymouth-branding-openSUSE wallpaper-branding-openSUSE"
desktop_base="$hardware_support $basic_packages $basic_themes $specific_packages"
desktop_services="avahi-dnsconfd.service cups-browsed.service udisks2.service"
case "$desktop" in
	'budgie')
	install_desktop="
zypper --non-interactive install $desktop_base lightdm lightdm-slick-greeter-branding-openSUSE patterns-budgie-budgie gnome-keyring-pam polkit-gnome gnome-terminal nemo NetworkManager-applet
"
	;;
	'budgie-full')
	install_desktop="
sed -i 's@solver.onlyRequires = true@# solver.onlyRequires = false@g' /etc/zypp/zypp.conf
zypper --non-interactive install $desktop_base lightdm lightdm-slick-greeter-branding-openSUSE patterns-budgie-budgie gnome-keyring-pam polkit-gnome gnome-terminal nemo NetworkManager-applet
"
	;;
	'cinnamon')
	install_desktop="
zypper --non-interactive install $desktop_base lightdm lightdm-slick-greeter-branding-openSUSE patterns-cinnamon-cinnamon cinnamon-settings-daemon gnome-keyring-pam polkit-gnome gnome-terminal nemo NetworkManager-applet mint-x-icon-theme mint-y-icon-theme python3-requests blueman
"
	;;
	'cinnamon-full')
	install_desktop="
sed -i 's@solver.onlyRequires = true@# solver.onlyRequires = false@g' /etc/zypp/zypp.conf
zypper --non-interactive install $desktop_base lightdm lightdm-slick-greeter-branding-openSUSE patterns-cinnamon-cinnamon cinnamon-settings-daemon gnome-keyring-pam polkit-gnome gnome-terminal nemo NetworkManager-applet mint-x-icon-theme mint-y-icon-theme python3-requests blueman
"
	;;
	'deepin')
	install_desktop="
zypper --non-interactive install $desktop_base lightdm lightdm-slick-greeter-branding-openSUSE patterns-deepin-deepin deepin-desktop-schemas-branding-openSUSE deepin-terminal deepin-file-manager deepin-polkit-agent NetworkManager-applet
"
	;;
	'deepin-full')
	install_desktop="
sed -i 's@solver.onlyRequires = true@# solver.onlyRequires = false@g' /etc/zypp/zypp.conf
zypper --non-interactive install $desktop_base lightdm lightdm-slick-greeter-branding-openSUSE patterns-deepin-deepin deepin-desktop-schemas-branding-openSUSE deepin-terminal deepin-file-manager deepin-polkit-agent NetworkManager-applet
zypper --non-interactive remove sddm
"
	;;
	'enlightenment')
	install_desktop="
systemctl disable NetworkManager.service
zypper --non-interactive install $desktop_base lightdm lightdm-slick-greeter-branding-openSUSE patterns-enlightenment-enlightenment terminology python3-dbus-python econnman
systemctl enable connman.service
"
	;;
	'enlightenment-full')
	install_desktop="
systemctl disable NetworkManager.service
sed -i 's@solver.onlyRequires = true@# solver.onlyRequires = false@g' /etc/zypp/zypp.conf
zypper --non-interactive install $desktop_base lightdm lightdm-slick-greeter-branding-openSUSE patterns-enlightenment-enlightenment terminology python3-dbus-python econnman
systemctl enable connman.service
"
	;;
	'gnome')
	install_desktop="
zypper --non-interactive install $desktop_base gdm-branding-openSUSE patterns-gnome-gnome gnome-keyring-pam polkit-gnome gnome-terminal nautilus NetworkManager-applet
"
	;;
	'gnome-full')
	install_desktop="
sed -i 's@solver.onlyRequires = true@# solver.onlyRequires = false@g' /etc/zypp/zypp.conf
zypper --non-interactive install $desktop_base gdm-branding-openSUSE patterns-gnome-gnome gnome-keyring-pam polkit-gnome gnome-terminal nautilus NetworkManager-applet
"
	;;
	'kde')
	install_desktop="
zypper --non-interactive install $desktop_base sddm-branding-openSUSE patterns-kde-kde konsole NetworkManager-applet webenginepart plasma-nm5 dolphin discover discover-backend-packagekit plasma5-workspace-wallpapers plasma5-pa plasma5-addons breeze5-wallpapers
"
	;;
	'kde-full')
	install_desktop="
sed -i 's@solver.onlyRequires = true@# solver.onlyRequires = false@g' /etc/zypp/zypp.conf
zypper --non-interactive install $desktop_base sddm-branding-openSUSE patterns-kde-kde konsole NetworkManager-applet webenginepart plasma-nm5 dolphin discover discover-backend-packagekit plasma5-workspace-wallpapers plasma5-pa plasma5-addons breeze5-wallpapers
"
	;;
	'lxde')
	install_desktop="
zypper --non-interactive install $desktop_base lightdm lightdm-slick-greeter-branding-openSUSE patterns-lxde-lxde lxsession lxappearance nuoveXT2-icon-theme lxterminal lxde-common lxpanel pcmanfm NetworkManager-applet blueman
"
	;;
	'lxde-full')
	install_desktop="
sed -i 's@solver.onlyRequires = true@# solver.onlyRequires = false@g' /etc/zypp/zypp.conf
zypper --non-interactive install $desktop_base lightdm lightdm-slick-greeter-branding-openSUSE patterns-lxde-lxde lxsession lxappearance nuoveXT2-icon-theme lxterminal lxde-common lxpanel pcmanfm NetworkManager-applet blueman
"
	;;
	'lxqt')
	install_desktop="
zypper --non-interactive install $desktop_base lightdm lightdm-slick-greeter-branding-openSUSE patterns-lxqt-lxqt openbox qterminal pcmanfm-qt NetworkManager-applet blueman
"
	;;
	'lxqt-full')
	install_desktop="
sed -i 's@solver.onlyRequires = true@# solver.onlyRequires = false@g' /etc/zypp/zypp.conf
zypper --non-interactive install $desktop_base lightdm lightdm-slick-greeter-branding-openSUSE patterns-lxqt-lxqt openbox qterminal pcmanfm-qt NetworkManager-applet blueman
"
	;;
	'mate')
	install_desktop="
zypper --non-interactive install $desktop_base lightdm lightdm-slick-greeter-branding-openSUSE patterns-mate-mate mate-panel-branding-openSUSE mate-themes mate-terminal mate-media mate-power-manager mate-menus caja NetworkManager-applet blueman
"
	;;
	'mate-full')
	install_desktop="
sed -i 's@solver.onlyRequires = true@# solver.onlyRequires = false@g' /etc/zypp/zypp.conf
zypper --non-interactive install $desktop_base lightdm lightdm-slick-greeter-branding-openSUSE patterns-mate-mate mate-panel-branding-openSUSE mate-themes mate-terminal mate-media mate-power-manager mate-menus caja NetworkManager-applet blueman
"
	;;
	'xfce')
	install_desktop="
zypper --non-interactive install $desktop_base lightdm lightdm-slick-greeter-branding-openSUSE patterns-xfce-xfce adwaita-xfce-icon-theme libxfce4ui-branding-openSUSE xfce4-settings-branding-openSUSE xfce4-power-manager-plugin xfce4-power-manager-branding-openSUSE xfce4-pulseaudio-plugin xfce4-terminal thunar NetworkManager-applet blueman
"
	;;
	'xfce-full')
	install_desktop="
sed -i 's@solver.onlyRequires = true@# solver.onlyRequires = false@g' /etc/zypp/zypp.conf
zypper --non-interactive install $desktop_base lightdm lightdm-slick-greeter-branding-openSUSE patterns-xfce-xfce adwaita-xfce-icon-theme libxfce4ui-branding-openSUSE xfce4-settings-branding-openSUSE xfce4-power-manager-plugin xfce4-power-manager-branding-openSUSE xfce4-pulseaudio-plugin xfce4-terminal thunar NetworkManager-applet blueman
"
	;;
esac
cat >"$linuxloopsdir"/chroot/tmp/install_desktop <<OPENSUSEDESKTOP
#!/bin/bash
set -e
if [ "$desktop" == "none" ]; then exit 0; fi
$install_desktop
systemctl enable $desktop_services
mkdir -p /usr/share/glib-2.0/schemas
cat >/usr/share/glib-2.0/schemas/zz_linuxloops.gschema.override <<'DCONF'
[org.cinnamon.desktop.interface]
gtk-theme="Materia"
icon-theme="Papirus"
[org.cinnamon.desktop.wm.preferences]
theme="Materia"
DCONF
if [ ! -z "\$(command -v glib-compile-schemas)" ]; then glib-compile-schemas /usr/share/glib-2.0/schemas/; fi
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[LightDM]\nlogind-check-graphical=true\n\n' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
OPENSUSEDESKTOP
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_desktop

install_secureboot
if [ ! -z "$nvidia" ] && [ "$nvidia" == "Yes" ]; then install_nvidia; fi

if [ ! -z "$CUSTOM_PACKAGES" ]; then
	echo -e "#!/bin/bash\nset -e\nzypper --non-interactive install $CUSTOM_PACKAGES" > "$linuxloopsdir"/chroot/tmp/install_custom_packages
	chmod 0755 "$linuxloopsdir"/chroot/tmp/install_custom_packages
fi

if [ -f ./custom_script ]; then
	cp ./custom_script "$linuxloopsdir"/chroot/tmp/install_custom_script
	chmod 0755 "$linuxloopsdir"/chroot/tmp/install_custom_script
fi

generate_fstab

cmdline_extra="multipath=off $CUSTOM_CMDLINE_PARAMS"
install_dracut

install_efi

cleanup

chroot "$linuxloopsdir"/chroot /tmp/init || return_value=1

[ "$return_value" -eq 0 ] && create_swap

umount_chroot

return $return_value
}

chroot_parrot()
{
return_value=0

download_lxc_image debian bullseye default

mount_chroot

cat >"$linuxloopsdir"/chroot/tmp/init <<'PARROTINIT'
#!/bin/bash
set -e
export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
export LD_LIBRARY_PATH=/usr/local/lib64:/usr/local/lib:/usr/lib64:/usr/lib:/lib64:/lib
/tmp/cleanup_container
yes | DEBIAN_FRONTEND=noninteractive apt update
yes | DEBIAN_FRONTEND=noninteractive apt install ca-certificates openssl
echo -e 'Dpkg::Options {\n  "--force-confnew";\n};' > /etc/apt/apt.conf.d/71debconf
sed -i 's@ main@ main contrib non-free@g' /etc/apt/sources.list
yes | DEBIAN_FRONTEND=noninteractive apt update
yes | DEBIAN_FRONTEND=noninteractive apt purge libexpat*
yes | DEBIAN_FRONTEND=noninteractive apt install apt-utils console-setup kmod gnupg
rm -f /etc/apt/sources.list
cat >/etc/apt/sources.list.d/parrot.list <<'SOURCES'
deb https://azure.deb.parrot.sh/parrot parrot main contrib non-free
deb https://azure.deb.parrot.sh/parrot parrot-security main contrib non-free
SOURCES
echo -e 'APT::Install-Recommends "0";\nAPT::Get::Install-Recommends "false";' > /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt update --allow-insecure-repositories
yes | DEBIAN_FRONTEND=noninteractive apt install parrot-archive-keyring --allow-unauthenticated
yes | DEBIAN_FRONTEND=noninteractive apt install -o APT::Immediate-Configure=false --reinstall $(apt list --installed | cut -d'/' -f1 | sed '1d' | sed -z 's@\n@ @g') parrot-core
yes | DEBIAN_FRONTEND=noninteractive dpkg --configure -a
echo -e 'Dpkg::Options {\n  "--force-confdef";\n};' > /etc/apt/apt.conf.d/71debconf
yes | DEBIAN_FRONTEND=noninteractive apt update
yes | DEBIAN_FRONTEND=noninteractive apt install linux-image-amd64 linux-headers-amd64 dkms firmware-linux firmware-atheros firmware-iwlwifi firmware-realtek wireless-regdb bash sudo modemmanager network-manager wpasupplicant bluez cryptsetup-initramfs e2fsprogs ntfs-3g nano acpid curl thermald bash-completion gnupg-utils policykit-1 xdg-user-dirs zstd fwupd-signed patchutils net-tools usb-modeswitch upower efibootmgr grub-efi grub-efi-amd64-bin os-prober shim-signed bind9-host dns-root-data amd64-microcode intel-microcode lsb-release parrot-themes sbsigntool mokutil dosfstools btrfs-progs zenity
echo -e 'sign_tool="/etc/dkms/sign_helper.sh"' >> /etc/dkms/framework.conf
echo -e '#!/bin/sh\n/lib/modules/"$1"/build/scripts/sign-file sha512 /var/lib/shim-signed/mok/MOK.priv /var/lib/shim-signed/mok/MOK.der "$2"' > /etc/dkms/sign_helper.sh
chmod 0755 /etc/dkms/sign_helper.sh
systemctl enable systemd-resolved.service
systemctl disable systemd-networkd.service systemd-networkd-wait-online.service
systemctl mask systemd-networkd.service systemd-networkd-wait-online.service
/tmp/set_locale_and_timezone
/tmp/install_desktop
/tmp/install_user
/tmp/install_secureboot
if [ -f /tmp/install_nvidia ]; then /tmp/install_nvidia; fi
if [ -f /tmp/install_surface ]; then /tmp/install_surface; fi
if [ -f /tmp/install_custom_packages ]; then /tmp/install_custom_packages; fi
if [ -f /tmp/install_custom_script ]; then /tmp/install_custom_script; fi
/tmp/generate_fstab
/tmp/install_initramfs
/tmp/install_efi
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt autoremove
/tmp/cleanup
exit
PARROTINIT
chmod 0755 "$linuxloopsdir"/chroot/tmp/init

cleanup_container
set_locale_and_timezone

cat >"$linuxloopsdir"/chroot/tmp/install_user <<PARROTUSER
#!/bin/bash
set -e
useradd -s /bin/bash -m '$username'
echo -e '$userpass\n$userpass' | passwd '$username'
usermod -aG sudo '$username'
PARROTUSER
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_user

hardware_support="alsa-utils alsa-ucm-conf alsa-topology-conf at-spi2-core avahi-discover avahi-dnsconfd cups cups-browsed cups-filters libnss-mdns pulseaudio system-config-printer xserver-xorg"
basic_packages="gvfs-fuse packagekit udisks2 xdg-user-dirs-gtk"
basic_themes="adwaita-icon-theme breeze-gtk-theme breeze-icon-theme fonts-dejavu fonts-noto fonts-roboto gnome-backgrounds materia-gtk-theme oxygen-icon-theme papirus-icon-theme"
specific_packages="desktop-base plymouth-themes synaptic parrot-updater parrot-wallpapers"
desktop_base="$hardware_support $basic_packages $basic_themes $specific_packages"
desktop_services="avahi-daemon.service cups.service cups-browsed.service"
case "$desktop" in
	'budgie')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter budgie-desktop arc-theme nemo gnome-terminal libgdk-pixbuf2.0-bin
systemctl enable $desktop_services
"
	;;
	'budgie-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter budgie-desktop arc-theme nautilus gnome-terminal libgdk-pixbuf2.0-bin
"
	;;
	'cinnamon')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter task-cinnamon-desktop gnome-terminal blueman
"
	;;
	'cinnamon-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter task-cinnamon-desktop gnome-terminal blueman
"
	;;
	'enlightenment')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter enlightenment terminology
yes | DEBIAN_FRONTEND=noninteractive apt purge network-manager
yes | DEBIAN_FRONTEND=noninteractive apt install connman
systemctl enable connman.service
find /usr/lib -type f -name enlightenment_system -exec chmod 4755 {} \;
"
	;;
	'enlightenment-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter enlightenment terminology
yes | DEBIAN_FRONTEND=noninteractive apt purge network-manager
yes | DEBIAN_FRONTEND=noninteractive apt install connman
systemctl enable connman.service
find /usr/lib -type f -name enlightenment_system -exec chmod 4755 {} \;
"
	;;
	'gnome')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base gdm3 parrot-desktop-gnome gnome-keyring libpam-gnome-keyring
"
	;;
	'gnome-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base gdm3 parrot-desktop-gnome gnome-keyring libpam-gnome-keyring
"
	;;
	'i3')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter parrot-desktop-i3 pavucontrol pasystray network-manager-gnome blueman
"
	;;
	'i3-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter parrot-desktop-i3 pavucontrol pasystray network-manager-gnome blueman
"
	;;
	'kde')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base sddm parrot-desktop-kde kwin-x11 dolphin plasma-discover konsole plasma-nm plasma-pa bluedevil libpam-kwallet5 powerdevil plasma-widgets-addons systemsettings
"
	;;
	'kde-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base sddm parrot-desktop-kde kwin-x11 plasma-nm plasma-pa powerdevil bluedevil libpam-kwallet5
"
	;;
	'lxde')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter lxde network-manager-gnome blueman
"
	;;
	'lxde-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter lxde network-manager-gnome blueman
"
	;;
	'mate')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter parrot-desktop-mate mate-desktop mate-session-manager mate-power-manager mate-media blueman
"
	;;
	'mate-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter parrot-desktop-mate mate-desktop mate-session-manager mate-power-manager mate-media blueman
"
	;;
	'xfce')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter parrot-desktop-xfce blueman
"
	;;
	'xfce-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter parrot-desktop-xfce blueman
"
	;;
esac
cat >"$linuxloopsdir"/chroot/tmp/install_desktop <<PARROTDESKTOP
#!/bin/bash
set -e
if [ "$desktop" == "none" ]; then exit 0; fi
$install_desktop
systemctl enable $desktop_services
mkdir -p /usr/share/glib-2.0/schemas
cat >/usr/share/glib-2.0/schemas/zz_linuxloops.gschema.override <<'DCONF'
[org.gnome.desktop.background:Budgie]
picture-uri="file:///usr/share/backgrounds/default.jpg"
[org.gnome.desktop.interface:Budgie]
gtk-theme="Arc"
icon-theme="Papirus"
[org.cinnamon.desktop.background]
picture-uri="file:///usr/share/backgrounds/default.jpg"
[org.cinnamon.desktop.interface]
gtk-theme="Materia"
icon-theme="Papirus"
[org.cinnamon.desktop.wm.preferences]
theme="Materia"
DCONF
if [ ! -z "\$(command -v glib-compile-schemas)" ]; then glib-compile-schemas /usr/share/glib-2.0/schemas/; fi
mkdir -p /etc/xdg/autostart
cat >/etc/xdg/autostart/budgie-nemo.desktop <<'NEMODESKTOP'
[Desktop Entry]
Type=Application
Name=Nemo
Comment=Start Nemo desktop at log in
Exec=nemo-desktop
OnlyShowIn=Budgie;
AutostartCondition=GSettings org.nemo.desktop show-desktop-icons
X-GNOME-AutoRestart=true
NoDisplay=true
NEMODESKTOP
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[Seat:*]\ngreeter-hide-users=false\n' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
echo -e '[Greeter]\nbackground = /usr/share/backgrounds/default.jpg\ndraw-user-backgrounds = true' > /etc/lightdm/slick-greeter.conf
PARROTDESKTOP
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_desktop

install_secureboot
if [ ! -z "$nvidia" ] && [ "$nvidia" == "Yes" ]; then install_nvidia; fi
if [ ! -z "$surface" ] && [ "$surface" == "Yes" ]; then install_surface "linux-headers-* linux-image-*"; fi

if [ ! -z "$CUSTOM_PACKAGES" ]; then
	echo -e "#!/bin/bash\nset -e\nyes | DEBIAN_FRONTEND=noninteractive apt install $CUSTOM_PACKAGES" > "$linuxloopsdir"/chroot/tmp/install_custom_packages
	chmod 0755 "$linuxloopsdir"/chroot/tmp/install_custom_packages
fi

if [ -f ./custom_script ]; then
	cp ./custom_script "$linuxloopsdir"/chroot/tmp/install_custom_script
	chmod 0755 "$linuxloopsdir"/chroot/tmp/install_custom_script
fi

generate_fstab

cmdline_extra="$CUSTOM_CMDLINE_PARAMS"
install_initramfstools

install_efi

cleanup

chroot "$linuxloopsdir"/chroot /tmp/init || return_value=1

[ "$return_value" -eq 0 ] && create_swap

umount_chroot

return $return_value
}

chroot_pop()
{
return_value=0

download_lxc_image ubuntu jammy default

mount_chroot

cat >"$linuxloopsdir"/chroot/tmp/init <<'POPINIT'
#!/bin/bash
set -e
export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
export LD_LIBRARY_PATH=/usr/local/lib64:/usr/local/lib:/usr/lib64:/usr/lib:/lib64:/lib
/tmp/cleanup_container
yes | DEBIAN_FRONTEND=noninteractive apt update
yes | DEBIAN_FRONTEND=noninteractive apt install ca-certificates openssl
echo -e 'Dpkg::Options {\n  "--force-confnew";\n};' > /etc/apt/apt.conf.d/71debconf
cat >/etc/apt/preferences.d/kernelstub <<'KERNELSTUB'
Package: kernelstub
Pin: release *
Pin-Priority: -1
KERNELSTUB
yes | DEBIAN_FRONTEND=noninteractive apt install software-properties-common
apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 63C46DF0140D738961429F4E204DD8AEC33A7AFF
add-apt-repository "deb http://apt.pop-os.org/release $(lsb_release -cs) main" -y
add-apt-repository "deb http://apt.pop-os.org/proprietary $(lsb_release -cs) main" -y
yes | DEBIAN_FRONTEND=noninteractive apt update
yes | DEBIAN_FRONTEND=noninteractive apt install pop-default-settings
yes | DEBIAN_FRONTEND=noninteractive apt update
yes | DEBIAN_FRONTEND=noninteractive apt install -o APT::Immediate-Configure=false --reinstall $(apt list --installed | cut -d'/' -f1 | sed '1d' | sed -z 's@\n@ @g')
yes | DEBIAN_FRONTEND=noninteractive dpkg --configure -a
yes | DEBIAN_FRONTEND=noninteractive apt update
echo -e 'Dpkg::Options {\n  "--force-confdef";\n};' > /etc/apt/apt.conf.d/71debconf
yes | DEBIAN_FRONTEND=noninteractive apt install apt-utils console-setup kmod
yes | DEBIAN_FRONTEND=noninteractive apt install linux-generic linux-headers-generic dkms linux-firmware wireless-regdb bash sudo modemmanager network-manager wpasupplicant bluez cryptsetup-initramfs e2fsprogs ntfs-3g nano acpid curl thermald bash-completion gnupg-utils policykit-1 xdg-user-dirs zstd fwupd-signed patchutils net-tools usb-modeswitch upower efibootmgr grub-efi grub-efi-amd64-signed os-prober shim-signed bind9-host dns-root-data update-manager-core snapd sbsigntool mokutil dosfstools btrfs-progs zenity
echo 'autoinstall_all_kernels="y"' >> /etc/dkms/framework.conf
systemctl enable systemd-resolved.service
systemctl disable systemd-networkd.service systemd-networkd-wait-online.service
systemctl mask systemd-networkd.service systemd-networkd-wait-online.service
/tmp/set_locale_and_timezone
/tmp/install_desktop
/tmp/install_user
/tmp/install_secureboot
if [ -f /tmp/install_nvidia ]; then /tmp/install_nvidia; fi
if [ -f /tmp/install_surface ]; then /tmp/install_surface; fi
if [ -f /tmp/install_custom_packages ]; then /tmp/install_custom_packages; fi
if [ -f /tmp/install_custom_script ]; then /tmp/install_custom_script; fi
/tmp/generate_fstab
/tmp/install_initramfs
/tmp/install_efi
yes | DEBIAN_FRONTEND=noninteractive apt autoremove
/tmp/cleanup
exit
POPINIT
chmod 0755 "$linuxloopsdir"/chroot/tmp/init

cleanup_container
set_locale_and_timezone

cat >"$linuxloopsdir"/chroot/tmp/install_user <<POPUSER
#!/bin/bash
set -e
userdel -r -f ubuntu
useradd -s /bin/bash -m '$username'
echo -e '$userpass\n$userpass' | passwd '$username'
usermod -aG sudo '$username'
POPUSER
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_user

case "$desktop" in
	'full')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install pop-desktop
"
	;;
esac
cat >"$linuxloopsdir"/chroot/tmp/install_desktop <<POPDESKTOP
#!/bin/bash
set -e
if [ "$desktop" == "none" ]; then exit 0; fi
$install_desktop
POPDESKTOP
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_desktop

install_secureboot
if [ ! -z "$nvidia" ] && [ "$nvidia" == "Yes" ]; then install_nvidia; fi
if [ ! -z "$surface" ] && [ "$surface" == "Yes" ]; then install_surface "linux-generic-* linux-headers-* linux-image-* linux-modules-*"; fi

if [ ! -z "$CUSTOM_PACKAGES" ]; then
	echo -e "#!/bin/bash\nset -e\nyes | apt install $CUSTOM_PACKAGES" > "$linuxloopsdir"/chroot/tmp/install_custom_packages
	chmod 0755 "$linuxloopsdir"/chroot/tmp/install_custom_packages
fi

if [ -f ./custom_script ]; then
	cp ./custom_script "$linuxloopsdir"/chroot/tmp/install_custom_script
	chmod 0755 "$linuxloopsdir"/chroot/tmp/install_custom_script
fi

generate_fstab

cmdline_extra="$CUSTOM_CMDLINE_PARAMS"
install_initramfstools

install_efi

cleanup

chroot "$linuxloopsdir"/chroot /tmp/init || return_value=1

[ "$return_value" -eq 0 ] && create_swap

umount_chroot

return $return_value
}

chroot_rockylinux()
{
return_value=0

download_lxc_image rockylinux 9 default

mount_chroot

cat >"$linuxloopsdir"/chroot/tmp/init <<'ROCKYLINUXINIT'
#!/bin/bash
set -e
export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
export LD_LIBRARY_PATH=/usr/local/lib64:/usr/local/lib:/usr/lib64:/usr/lib:/lib64:/lib
/tmp/cleanup_container
dnf update -y
dnf install -y ca-certificates openssl
dnf reinstall -y "*"
dnf install -y epel-release
rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL*
dnf update -y
dnf install -y kernel kernel-headers dkms linux-firmware iwl100-firmware iwl1000-firmware iwl105-firmware iwl135-firmware iwl2000-firmware iwl2030-firmware iwl3160-firmware iwl5000-firmware iwl5150-firmware iwl6000g2a-firmware iwl6000g2b-firmware iwl6050-firmware iwl7260-firmware wireless-regdb glibc-locale-source ntfs-3g bash sudo ModemManager NetworkManager-bluetooth NetworkManager-wifi wpa_supplicant bluez cryptsetup e2fsprogs ntfsprogs nano acpid curl thermald bash-completion gpg polkit xdg-user-dirs zstd fwupd patchutils net-tools usb_modeswitch upower efibootmgr bind nss-mdns systemd-networkd systemd-resolved dbus-daemon grub2-efi os-prober shim microcode_ctl mokutil selinux-policy-targeted dosfstools zenity
dnf --enablerepo=crb install -y rocky-sb-certs
systemctl enable dbus.socket dbus-daemon.service named.service NetworkManager.service systemd-resolved.service
systemctl disable systemd-networkd.service systemd-networkd-wait-online.service
systemctl mask systemd-networkd.service systemd-networkd-wait-online.service
systemctl enable --global dbus.socket dbus-daemon.service
/tmp/set_locale_and_timezone
/tmp/install_desktop
/tmp/install_user
/tmp/install_secureboot
if [ -f /tmp/install_custom_packages ]; then /tmp/install_custom_packages; fi
if [ -f /tmp/install_custom_script ]; then /tmp/install_custom_script; fi
/tmp/generate_fstab
/tmp/install_initramfs
/tmp/install_efi
dnf autoremove -y
/tmp/selinux_fix
touch /.autorelabel
/tmp/cleanup
exit
ROCKYLINUXINIT
chmod 0755 "$linuxloopsdir"/chroot/tmp/init

cleanup_container
set_locale_and_timezone

cat >"$linuxloopsdir"/chroot/tmp/install_user <<ROCKYLINUXUSER
#!/bin/bash
set -e
useradd -s /bin/bash -m '$username'
echo -e '$userpass\n$userpass' | passwd '$username'
usermod -aG wheel '$username'
echo "%wheel      ALL=(ALL) ALL" > /etc/sudoers.d/90-wheel
ROCKYLINUXUSER
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_user

case "$desktop" in
	'full')
	install_desktop="
dnf install -y @\"Server with GUI\"
systemctl enable cups-browsed.service
systemctl set-default graphical
"
	;;
esac
cat >"$linuxloopsdir"/chroot/tmp/install_desktop <<ROCKYLINUXDESKTOP
#!/bin/bash
set -e
if [ "$desktop" == "none" ]; then exit 0; fi
$install_desktop
ROCKYLINUXDESKTOP
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_desktop

install_secureboot

if [ ! -z "$CUSTOM_PACKAGES" ]; then
	echo -e "#!/bin/bash\nset -e\ndnf install -y $CUSTOM_PACKAGES" > "$linuxloopsdir"/chroot/tmp/install_custom_packages
	chmod 0755 "$linuxloopsdir"/chroot/tmp/install_custom_packages
fi

if [ -f ./custom_script ]; then
	cp ./custom_script "$linuxloopsdir"/chroot/tmp/install_custom_script
	chmod 0755 "$linuxloopsdir"/chroot/tmp/install_custom_script
fi

generate_fstab

cmdline_extra="$CUSTOM_CMDLINE_PARAMS"
install_dracut

install_efi

selinux_fix

cleanup

chroot "$linuxloopsdir"/chroot /tmp/init || return_value=1

[ "$return_value" -eq 0 ] && create_swap

umount_chroot

return $return_value
}

chroot_steamos-like()
{
return_value=0

download_lxc_image archlinux current default

mount_chroot

cat >"$linuxloopsdir"/chroot/tmp/init <<'STEAMOSLIKEINIT'
#!/bin/bash
set -e
export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
export LD_LIBRARY_PATH=/usr/local/lib64:/usr/local/lib:/usr/lib64:/usr/lib:/lib64:/lib
/tmp/cleanup_container
pacman-key --init
pacman-key --populate
pacman -Syu --noconfirm ca-certificates openssl
sed -i -z 's@#\[multilib]\n#Include = /etc/pacman.d/mirrorlist@\[multilib]\nInclude = /etc/pacman.d/mirrorlist@g' /etc/pacman.conf
pacman-key --init
pacman-key --populate
pacman -Qnq | pacman -Syu --noconfirm -
pacman -Syu --noconfirm linux linux-headers dkms linux-firmware sof-firmware wireless-regdb bash sudo modemmanager networkmanager wpa_supplicant bluez cryptsetup e2fsprogs ntfs-3g nano acpid curl thermald bash-completion gnupg polkit xdg-user-dirs zstd fwupd patchutils net-tools usb_modeswitch upower efibootmgr grub os-prober shim bind amd-ucode intel-ucode sbsigntools mokutil dosfstools btrfs-progs zenity base-devel pkgconfig
systemctl enable bluetooth.service ModemManager.service NetworkManager.service systemd-resolved.service
systemctl disable systemd-networkd.service systemd-networkd-wait-online.service
systemctl mask systemd-networkd.service systemd-networkd-wait-online.service
/tmp/set_locale_and_timezone
/tmp/install_desktop
/tmp/install_steamos_fixes
/tmp/install_user
/tmp/install_secureboot
if [ -f /tmp/install_nvidia ]; then /tmp/install_nvidia; fi
if [ -f /tmp/install_surface ]; then /tmp/install_surface; fi
if [ -f /tmp/install_custom_packages ]; then /tmp/install_custom_packages; fi
if [ -f /tmp/install_custom_script ]; then /tmp/install_custom_script; fi
/tmp/generate_fstab
/tmp/install_initramfs
/tmp/install_efi
/tmp/cleanup
exit
STEAMOSLIKEINIT
chmod 0755 "$linuxloopsdir"/chroot/tmp/init

cleanup_container
set_locale_and_timezone

cat >"$linuxloopsdir"/chroot/tmp/install_user <<STEAMOSLIKEUSER
#!/bin/bash
set -e
useradd -s /bin/bash -m '$username'
echo -e '$userpass\n$userpass' | passwd '$username'
usermod -aG wheel '$username'
echo "%wheel      ALL=(ALL) ALL" > /etc/sudoers.d/90-wheel
cat >/etc/polkit-1/rules.d/50-default.rules <<'POLKIT'
polkit.addAdminRule(function(action, subject) {
    return ["unix-group:wheel"];
});
POLKIT
sudo -Hu '$username' xvfb-run steam -exitsteam
STEAMOSLIKEUSER
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_user

cat >"$linuxloopsdir"/chroot/tmp/install_steamos_fixes <<STEAMOSLIKEFIXES
#!/bin/bash
set -e
echo -e 'vm.max_map_count=1048576\nvm.swappiness=1\nvm.compaction_proactiveness=0' > /etc/sysctl.d/99-steam.conf
cat >/etc/sddm.conf.d/steamos.conf <<'SDDM'
[Autologin]
Relogin=true
Session=plasma
User=$username

[X11]
# Janky workaround for wayland sessions not stopping in sddm, kills
# all active sddm-helper sessions on teardown
DisplayStopCommand=/usr/bin/gamescope-wayland-teardown-workaround
SDDM
ln -s /tmp/.gamescope_session /etc/sddm.conf.d/zz-steamos.conf
mkdir -p /usr/share/wayland-sessions
cat >/usr/share/wayland-sessions/gamescope-wayland.desktop <<'GAMESCOPE-SESSION'
[Desktop Entry]
Encoding=UTF-8
Name=SteamOS (gamescope)
Comment=SteamOS Big Picture session
Exec=gamescope-session
Icon=steamicon.png
Type=Application
DesktopNames=gamescope
GAMESCOPE-SESSION
cat >/usr/bin/gamescope-session <<'GAMESCOPE-SESSION'
#!/bin/bash

##
## Session globals
##
export SDL_VIDEO_MINIMIZE_ON_FOCUS_LOSS=0

export HOMETEST_DESKTOP=1
export HOMETEST_DESKTOP_SESSION=plasma

#export STEAM_USE_DYNAMIC_VRS=1
#export RADV_FORCE_VRS_CONFIG_FILE=\$(mktemp /tmp/radv_vrs.XXXXXXXX)

# Prepare our initial VRS config file
# for dynamic VRS in Mesa.
#mkdir -p "\$(dirname "\$RADV_FORCE_VRS_CONFIG_FILE")"
#echo "1x1" > "\$RADV_FORCE_VRS_CONFIG_FILE"

# Let's try this across the board to see if it breaks anything
# Helps performance in HZD, Cyberpunk, at least
# Expose 8 physical cores, instead of 4c/8t
export WINE_CPU_TOPOLOGY=8:0,1,2,3,4,5,6,7

# To expose vram info from radv's patch we're including
#export WINEDLLOVERRIDES=dxgi=n

# Workaround for steam getting killed immediatly during reboot
# See: jupiter/tasks/-/issues/280
export STEAMOS_STEAM_REBOOT_SENTINEL="/tmp/steamos-reboot-sentinel"
if [[ -e "\$STEAMOS_STEAM_REBOOT_SENTINEL" ]]; then
	rm -f "\$STEAMOS_STEAM_REBOOT_SENTINEL"
	/usr/bin/steamos-polkit-helpers/steamos-reboot-now
	sudo -n reboot
fi

# Workaround for steam getting killed immediatly during shutdown
# Same idea as reboot sentinel above
export STEAMOS_STEAM_SHUTDOWN_SENTINEL="/tmp/steamos-shutdown-sentinel"
if [[ -e "\$STEAMOS_STEAM_SHUTDOWN_SENTINEL" ]]; then
	rm -f "\$STEAMOS_STEAM_SHUTDOWN_SENTINEL"
	/usr/bin/steamos-polkit-helpers/steamos-poweroff-now
	sudo -n poweroff
fi

# Enable volume key management via steam for this session
export STEAM_ENABLE_VOLUME_HANDLER=1

# Have SteamRT's xdg-open send http:// and https:// URLs to Steam
export SRT_URLOPEN_PREFER_STEAM=1

# Disable automatic audio device switching in steam, now handled by wireplumber
export STEAM_DISABLE_AUDIO_DEVICE_SWITCHING=1

# Enable support for xwayland isolation per-game in Steam
export STEAM_MULTIPLE_XWAYLANDS=1

# We have the Mesa integration for the fifo-based dynamic fps-limiter
export STEAM_GAMESCOPE_DYNAMIC_FPSLIMITER=1

# Don't wait for buffers to idle on the client side before sending them to gamescope
export vk_xwayland_wait_ready=false

# Set input method modules for Qt/GTK that will show the Steam keyboard
export QT_IM_MODULE=steam
export GTK_IM_MODULE=Steam

# TODO!
# Bring this back when gamescope side is more complete
#
# Remove vsync handling from Xwayland, we handle it in gamescope
#export vblank_mode=0
#export MESA_VK_WSI_PRESENT_MODE=immediate

# To play nice with the short term callback-based limiter for now
export GAMESCOPE_LIMITER_FILE=\$(mktemp /tmp/gamescope-limiter.XXXXXXXX)

export XCURSOR_THEME=steam

# Workaround for Steam login issue while Steam client change propagates out of Beta
touch ~/.steam/root/config/SteamAppData.vdf || true

ulimit -n 524288

# Create run directory file for startup and stats sockets
#   shellcheck disable=SC2030 # (broken warning)
tmpdir="\$([[ -n \${XDG_RUNTIME_DIR+x} ]] && mktemp -p "\$XDG_RUNTIME_DIR" -d -t gamescope.XXXXXXX)"
socket="\${tmpdir:+\$tmpdir/startup.socket}"
stats="\${tmpdir:+\$tmpdir/stats.pipe}"
# Fail early if we don't have a proper runtime directory setup
#   shellcheck disable=SC2031 # (broken warning)
if [[ -z \$tmpdir || -z \${XDG_RUNTIME_DIR+x} ]]; then
	echo >&2 "!! Failed to find run directory in which to create stats session sockets (is \$XDG_RUNTIME_DIR set?)"
	exit 0
fi

# 1048576 = 1M - passing it like that omits the 'M' suffix - xargs removes whitespace
free_disk_space_megs=\$(df ~/ --output=avail -B1048576 | sed -n '2 p' | xargs)
minimum_free_disk_space_needed_megs=500

if [[ "\$free_disk_space_megs" -lt "\$minimum_free_disk_space_needed_megs" ]]; then
	echo >&2 "gamescope-session: not enough disk space to proceed, trying to find game to delete"

	find ~/.local/share/Steam/steamapps/common/ -mindepth 1 -maxdepth 1 -type d -printf "%T@ %p\0" | sort -n -z | while IFS= read -r -d \$'\0' line; do
		timestamp=\${line%% *}
                game_folder=\${line#* }

		[[ -d \$game_folder ]]  || continue

		acf=\$(grep -F -- "\$(basename -- "\$game_folder")" ~/.local/share/Steam/steamapps/*.acf | grep \"installdir\" | cut -d: -f1)
		[[ -e "\$acf" ]] || continue

		echo >&2 "gamescope-session: deleting \$(basename "\$game_folder")"
		appid=\$(basename "\$acf" | cut -d_ -f2 | cut -d. -f1)

		# TODO leave a note for Steam to display UI to explain what happened, if this logic stays
		# intentionally leave compatdata; could be unclouded save files there
		rm -rf --one-file-system -- "\$game_folder" "\$acf" ~/.local/share/Steam/steamapps/shadercache/"\$appid"

		free_disk_space_megs=\$(df ~/ --output=avail -B1048576 | sed -n '2 p' | xargs)
		[[ "\$free_disk_space_megs" -lt "\$minimum_free_disk_space_needed_megs" ]] || break
	done
fi

export GAMESCOPE_STATS="\$stats"
mkfifo -- "\$stats"
mkfifo -- "\$socket"

# Attempt to claim global session if we're the first one running (e.g. /run/1000/gamescope)
linkname="gamescope-stats"
#   shellcheck disable=SC2031 # (broken warning)
sessionlink="\${XDG_RUNTIME_DIR:+\$XDG_RUNTIME_DIR/}\${linkname}" # Account for XDG_RUNTIME_DIR="" (notfragileatall)
lockfile="\$sessionlink".lck
exec 9>"\$lockfile" # Keep as an fd such that the lock lasts as long as the session if it is taken
if flock -n 9 && rm -f "\$sessionlink" && ln -sf "\$tmpdir" "\$sessionlink"; then
	# Took the lock.  Don't blow up if those commands fail, though.
	echo >&2 "Claimed global gamescope stats session at \"\$sessionlink\""
else
	echo >&2 "!! Failed to claim global gamescope stats session"
fi

#gamescope \\
INTEL_DEBUG=noccs gamescope \\
	--generate-drm-mode fixed \\
	--xwayland-count 2 \\
	--default-touch-mode 4 \\
	--hide-cursor-delay 3000 \\
	--max-scale 2 \\
	--fade-out-duration 200 \\
	-e -R "\$socket" -T "\$stats" \\
	-O '*',eDP-1 \\
	&
gamescope_pid="\$!"

if read -r -t 3 response_x_display response_wl_display <> "\$socket"; then
	export DISPLAY="\$response_x_display"
	export GAMESCOPE_WAYLAND_DISPLAY="\$response_wl_display"
	# We're done!
else
	kill -9 "\$gamescope_pid"
	wait
	exit 0
	# SDDM will restart us
fi

xbindkeys -f /etc/xbindkeysrc

#steamargs=("-steamos3" "-steampal" "-steamdeck" "-gamepadui")
steamargs=("-steamos3" "-gamepadui")

# steamargs+=("-steamfs")

short_session_tracker_file="/tmp/steamos-short-session-tracker"
short_session_duration=60
short_session_count_before_reset=3
SECONDS=0

short_session_count=\$(< "\$short_session_tracker_file" wc -l)

if [[ "\$short_session_count" -ge "\$short_session_count_before_reset" ]]; then
	# TODO could detect if we're in the devkit case below and undo that instead
	# instead of resetting the wrong thing
	# also could print full list of files and sizes in the Steam dir and save as a diagnostic report
	echo >&2 "gamescope-session: detected broken Steam, bootstrapping from OS copy..."
	mkdir -p ~/.local/share/Steam
	# remove some caches and stateful things known to cause Steam to fail to start if corrupt
	rm -rf --one-file-system ~/.local/share/Steam/config/widevine
	# restore clean copy of binaries from RO partition
	tar xf /usr/lib/steam/bootstraplinux_ubuntu12_32.tar.xz -C ~/.local/share/Steam
	# rearm
	rm "\$short_session_tracker_file"
fi

if [[ -x \$HOME/devkit-game/devkit-steam ]]; then
	"\$HOME"/devkit-game/devkit-steam "\${steamargs[@]}"
else
	steam "\${steamargs[@]}"
fi

if [[ "\$SECONDS" -lt "\$short_session_duration" ]]; then
	echo "frog" >> "\$short_session_tracker_file"
else
	rm "\$short_session_tracker_file"
fi

# Ask gamescope to exit nicely
kill \$gamescope_pid

# Start a background sleep for five seconds because we don't trust it
sleep 5 &
sleep_pid=\$!

# Wait for gamescope or the sleep to finish for timeout purposes
ret=0
wait -n \$gamescope_pid \$sleep_pid || ret=\$?

# If we get a SIGTERM/etc while waiting this happens.  Proceed to kill -9 everything but complain
if [[ \$ret = 127 ]]; then
	echo >&2 "gamescope-session: Interrupted while waiting on teardown, force-killing remaining tasks"
fi

# Kill all remaining jobs and warn if unexpected things are in there (should be just sleep_pid, unless gamescope failed
# to exit in time or we hit the interrupt case above)
for job in \$(jobs -p); do
	# Warn about unexpected things
	if [[ \$ret != 127 && \$job = "\$gamescope_pid" ]]; then
		echo >&2 "gamescope-session: gamescope timed out while exiting, killing"
	elif [[ \$ret != 127 && \$job != "\$sleep_pid" ]]; then
		echo >&2 "gamescope-session: unexpected background pid \$job at teardown: "
		# spew some debug about it
		ps -p "\$job" >&2
	fi
	kill -9 "\$job"
done

# This should just be waiting on kill -9'd things. Another signal will cause us to give up, but we should be a little
# stubborn about not letting the session die with gamescope holding on to things.
wait
GAMESCOPE-SESSION
chmod 0755 /usr/bin/gamescope-session
cat >/usr/bin/gamescope-wayland-teardown-workaround <<'TEARDOWN'
#!/bin/bash

set -e

TARGETS=('/bin/bash /usr/bin/gamescope-session'
         '/usr/bin/kwin_x11')

for target in "\${TARGETS[@]}"; do
  for processtree in \$(pgrep -xf "\$target" || true); do
    kill -- "-\$processtree"
  done
done
TEARDOWN
chmod 0755 /usr/bin/gamescope-wayland-teardown-workaround
mkdir -p /etc/xdg/autostart
cat >/etc/xdg/autostart/steam.desktop <<'AUTOSTART'
[Desktop Entry]
Name=Steam
Comment=Application for managing and playing games on Steam
Comment[pt_BR]=Aplicativo para jogar e gerenciar jogos no Steam
Comment[bg]=Приложение за ръководене и пускане на игри в Steam
Comment[cs]=Aplikace pro spravování a hraní her ve službě Steam
Comment[da]=Applikation til at håndtere og spille spil på Steam
Comment[nl]=Applicatie voor het beheer en het spelen van games op Steam
Comment[fi]=Steamin pelien hallintaan ja pelaamiseen tarkoitettu sovellus
Comment[fr]=Application de gestion et d'utilisation des jeux sur Steam
Comment[de]=Anwendung zum Verwalten und Spielen von Spielen auf Steam
Comment[el]=Εφαρμογή διαχείρισης παιχνιδιών στο Steam
Comment[hu]=Alkalmazás a Steames játékok futtatásához és kezeléséhez
Comment[it]=Applicazione per la gestione e l'esecuzione di giochi su Steam
Comment[ja]=Steam 上でゲームを管理＆プレイするためのアプリケーション
Comment[ko]=Steam에 있는 게임을 관리하고 플레이할 수 있는 응용 프로그램
Comment[no]=Program for å administrere og spille spill på Steam
Comment[pt_PT]=Aplicação para organizar e executar jogos no Steam
Comment[pl]=Aplikacja do zarządzania i uruchamiania gier na platformie Steam
Comment[ro]=Aplicație pentru administrarea și jucatul jocurilor pe Steam
Comment[ru]=Приложение для игр и управления играми в Steam
Comment[es]=Aplicación para administrar y ejecutar juegos en Steam
Comment[sv]=Ett program för att hantera samt spela spel på Steam
Comment[zh_CN]=管理和进行 Steam 游戏的应用程序
Comment[zh_TW]=管理並執行 Steam 遊戲的應用程式
Comment[th]=โปรแกรมสำหรับจัดการและเล่นเกมบน Steam
Comment[tr]=Steam üzerinden oyun oynama ve düzenleme uygulaması
Comment[uk]=Програма для керування іграми та запуску ігор у Steam
Comment[vi]=Ứng dụng để quản lý và chơi trò chơi trên Steam
Exec=/usr/bin/steam -silent %U
Icon=steam
Terminal=false
Type=Application
Categories=Network;FileTransfer;Game;
Actions=Store;Community;Library;Servers;Screenshots;News;Settings;BigPicture;Friends;
PrefersNonDefaultGPU=true
X-KDE-RunOnDiscreteGpu=true
#OnlyShowIn=KDE
AUTOSTART
cat >/usr/bin/gamescope-wayland-teardown-workaround <<'TEARDOWN'
#!/bin/bash

set -e

TARGETS=('/bin/bash /usr/bin/gamescope-session'
         '/usr/bin/kwin_x11')

for target in "\${TARGETS[@]}"; do
  for processtree in \$(pgrep -xf "\$target" || true); do
    kill "\$processtree"
  done
done
TEARDOWN
chmod 0755 /usr/bin/gamescope-wayland-teardown-workaround
cat >/usr/bin/steamos-session-select <<'SESSIONSELECT'
#!/bin/bash

set -e

# Become root
if [[ \$EUID != 0 ]]; then
  exec pkexec "\$(realpath \$0)"
  exit 1
fi

rm -f /tmp/.gamescope_session

systemctl reset-failed sddm
systemctl restart sddm
echo "Restarted SDDM"
SESSIONSELECT
chmod 0755 /usr/bin/steamos-session-select
mkdir -p /etc/skel/Desktop
cat >/etc/skel/Desktop/GamingSession.desktop <<'GAMINGSESSION'
[Desktop Entry]
Name=Gaming Session
Exec=steamos-run-session
Icon=input-gaming
Terminal=false
Type=Application
StartupNotify=false
GAMINGSESSION
chmod 0755 /etc/skel/Desktop/GamingSession.desktop
cat >/usr/bin/steamos-run-session <<'RUNGAMINGSESSION'
#!/bin/bash
echo -e '[Autologin]\nSession=gamescope-wayland.desktop' > /tmp/.gamescope_session
chown $username:$username /tmp/.gamescope_session
pkill -u $username
RUNGAMINGSESSION
chmod 0755 /usr/bin/steamos-run-session
cat >/usr/share/polkit-1/actions/org.valve.steamos.policy <<'POLKIT'
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE policyconfig PUBLIC
 "-//freedesktop//DTD PolicyKit Policy Configuration 1.0//EN"
 "http://www.freedesktop.org/standards/PolicyKit/1/policyconfig.dtd">
<policyconfig>

  <vendor>Valve SteamOS</vendor>
  <vendor_url>http://www.steampowered.com</vendor_url>

  <action id="org.valve.policykit.steamos.pkexec.run-steamos-polkit-helpers-steamos-set-timezone">
    <description>Set the timezone</description>
    <icon_name>package-x-generic</icon_name> 
    <defaults>
      <allow_any>yes</allow_any>
      <allow_inactive>yes</allow_inactive>
      <allow_active>yes</allow_active>
    </defaults>
    <annotate key="org.freedesktop.policykit.exec.path">/usr/bin/steamos-polkit-helpers/steamos-set-timezone</annotate>
  </action>

  <action id="org.valve.policykit.steamos.pkexec.run-session-select">
    <description>Helper to switch sessions</description>
    <icon_name>package-x-generic</icon_name>
    <defaults>
      <allow_any>yes</allow_any>
      <allow_inactive>yes</allow_inactive>
      <allow_active>yes</allow_active>
    </defaults>
    <annotate key="org.freedesktop.policykit.exec.path">/usr/bin/steamos-session-select</annotate>
  </action>

  <action id="org.valve.policykit.steamos.pkexec.run-steamos-polkit-helpers-steamos-reboot-now">
    <description>Reboot system</description>
    <icon_name>package-x-generic</icon_name> 
    <defaults>
      <allow_any>yes</allow_any>
      <allow_inactive>yes</allow_inactive>
      <allow_active>yes</allow_active>
    </defaults>
    <annotate key="org.freedesktop.policykit.exec.path">/usr/bin/steamos-polkit-helpers/steamos-reboot-now</annotate>
  </action>

  <action id="org.valve.policykit.steamos.pkexec.run-steamos-polkit-helpers-steamos-poweroff-now">
    <description>Poweroff system</description>
    <icon_name>package-x-generic</icon_name> 
    <defaults>
      <allow_any>yes</allow_any>
      <allow_inactive>yes</allow_inactive>
      <allow_active>yes</allow_active>
    </defaults>
    <annotate key="org.freedesktop.policykit.exec.path">/usr/bin/steamos-polkit-helpers/steamos-poweroff-now</annotate>
  </action>

  <action id="org.valve.policykit.steamos.pkexec.run-steamos-polkit-helpers-steamos-restart-sddm">
    <description>Restart SDDM</description>
    <icon_name>package-x-generic</icon_name>
    <defaults>
      <allow_any>yes</allow_any>
      <allow_inactive>yes</allow_inactive>
      <allow_active>yes</allow_active>
    </defaults>
    <annotate key="org.freedesktop.policykit.exec.path">/usr/bin/steamos-polkit-helpers/steamos-restart-sddm</annotate>
  </action>

  <action id="org.valve.policykit.steamos.pkexec.run-steamos-polkit-helpers-steamos-enable-sshd">
    <description>Enable the SSH server</description>
    <icon_name>package-x-generic</icon_name>
    <defaults>
      <allow_any>yes</allow_any>
      <allow_inactive>yes</allow_inactive>
      <allow_active>yes</allow_active>
    </defaults>
    <annotate key="org.freedesktop.policykit.exec.path">/usr/bin/steamos-polkit-helpers/steamos-enable-sshd</annotate>
  </action>

  <action id="org.valve.policykit.steamos.pkexec.run-steamos-run-session">
    <description>Start SteamOS session</description>
    <icon_name>package-x-generic</icon_name>
    <defaults>
      <allow_any>yes</allow_any>
      <allow_inactive>yes</allow_inactive>
      <allow_active>yes</allow_active>
    </defaults>
    <annotate key="org.freedesktop.policykit.exec.path">/usr/bin/steamos-polkit-helpers/steamos-run-session</annotate>
  </action>

</policyconfig>
POLKIT
mkdir -p /usr/bin/steamos-polkit-helpers
cat >/usr/bin/steamos-polkit-helpers/steamos-set-timezone <<'SETTIMEZONE'
#!/bin/bash

set -e

if [[ \$EUID -ne 0 ]];
then
    exec pkexec --disable-internal-agent "\$0" "\$@"
fi

timedatectl set-timezone "\$1"
SETTIMEZONE
chmod 0755 /usr/bin/steamos-polkit-helpers/steamos-set-timezone
cat >/usr/bin/steamos-polkit-helpers/steamos-reboot-now <<'REBOOT'
#!/bin/bash

set -e

if [[ \$EUID -ne 0 ]];
then
    exec pkexec --disable-internal-agent "\$(realpath \$0)" "\$@"
fi

reboot
REBOOT
chmod 0755 /usr/bin/steamos-polkit-helpers/steamos-reboot-now
cat >/usr/bin/steamos-polkit-helpers/steamos-poweroff-now <<'POWEROFF'
#!/bin/bash

set -e

if [[ \$EUID -ne 0 ]];
then
    exec pkexec --disable-internal-agent "\$(realpath \$0)" "\$@"
fi

poweroff
POWEROFF
chmod 0755 /usr/bin/steamos-polkit-helpers/steamos-poweroff-now
cat >/usr/bin/steamos-polkit-helpers/steamos-restart-sddm <<'RESTARTSDDM'
#!/bin/bash

set -e

if [[ \$EUID -ne 0 ]];
then
    exec pkexec --disable-internal-agent "\$0" "\$@"
fi

exec systemctl restart sddm
RESTARTSDDM
chmod 0755 /usr/bin/steamos-polkit-helpers/steamos-restart-sddm
cat >/usr/bin/steamos-polkit-helpers/steamos-enable-sshd <<'ENABLESSHD'
#!/bin/bash

set -e

if [[ \$EUID -ne 0 ]];
then
    exec pkexec --disable-internal-agent "\$0" "\$@"
fi

exec systemctl enable --now sshd
ENABLESSHD
chmod 0755 /usr/bin/steamos-polkit-helpers/steamos-enable-sshd
cat >/usr/bin/steamos-polkit-helpers/steamos-run-session <<'RUNSESSION'
#!/bin/bash

set -e

if [[ \$EUID -ne 0 ]];
then
    exec pkexec --disable-internal-agent "\$0" "\$@"
fi

steamos-run-session
RUNSESSION
chmod 0755 /usr/bin/steamos-polkit-helpers/steamos-run-session
cat >/usr/bin/steamos-polkit-helpers/steamos-update <<'FAKESTEAMUPDATE'
#!/bin/bash

exit 7
FAKESTEAMUPDATE
chmod 0755 /usr/bin/steamos-polkit-helpers/steamos-update
cat >/usr/bin/steamos-polkit-helpers/jupiter-biosupdate <<'FAKEBIOSUPDATE'
#!/bin/bash

exit 0
FAKEBIOSUPDATE
chmod 0755 /usr/bin/steamos-polkit-helpers/jupiter-biosupdate
STEAMOSLIKEFIXES
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_steamos_fixes

hardware_support="alsa-lib alsa-utils alsa-topology-conf alsa-ucm-conf at-spi2-core avahi cups nss-mdns pulseaudio system-config-printer xorg-server"
basic_packages="gvfs packagekit udisks2 xdg-user-dirs-gtk"
basic_themes="adobe-source-code-pro-fonts adwaita-icon-theme breeze-gtk breeze-icons gnome-backgrounds materia-gtk-theme noto-fonts oxygen-icons papirus-icon-theme ttf-dejavu ttf-roboto"
specific_packages="archlinux-wallpaper gamescope steam vulkan-intel lib32-vulkan-intel vulkan-radeon lib32-vulkan-radeon lib32-pipewire lib32-fontconfig ttf-liberation wqy-zenhei xorg-server-xvfb"
desktop_base="$hardware_support $basic_packages $basic_themes $specific_packages"
desktop_services="avahi-daemon.service cups.service cups-browsed.service"
case "$desktop" in
	'core')
	install_desktop="
pacman -S --noconfirm $desktop_base sddm qt5-virtualkeyboard plasma-desktop plasma-nm plasma-pa kwin dolphin konsole bluedevil powerdevil systemsettings discover kwallet-pam packagekit-qt5
"
	;;
	'full')
	install_desktop="
pacman -S --noconfirm $desktop_base sddm qt5-virtualkeyboard plasma plasma-nm plasma-pa kwin dolphin konsole bluedevil powerdevil systemsettings discover kwallet-pam packagekit-qt5
"
	;;
esac
cat >"$linuxloopsdir"/chroot/tmp/install_desktop <<STEAMOSLIKEDESKTOP
#!/bin/bash
set -e
$install_desktop
systemctl enable $desktop_services sddm.service
mkdir -p /etc/sddm.conf.d
echo -e '[Theme]\nCurrent=breeze' > /etc/sddm.conf.d/99_linuxloops.conf
STEAMOSLIKEDESKTOP
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_desktop

install_secureboot
if [ ! -z "$nvidia" ] && [ "$nvidia" == "Yes" ]; then install_nvidia; fi
if [ ! -z "$surface" ] && [ "$surface" == "Yes" ]; then install_surface "linux linux-headers"; fi

if [ ! -z "$CUSTOM_PACKAGES" ]; then
	echo -e "#!/bin/bash\nset -e\npacman -S --noconfirm $CUSTOM_PACKAGES" > "$linuxloopsdir"/chroot/tmp/install_custom_packages
	chmod 0755 "$linuxloopsdir"/chroot/tmp/install_custom_packages
fi

if [ -f ./custom_script ]; then
	cp ./custom_script "$linuxloopsdir"/chroot/tmp/install_custom_script
	chmod 0755 "$linuxloopsdir"/chroot/tmp/install_custom_script
fi

generate_fstab

cmdline_extra="$CUSTOM_CMDLINE_PARAMS"
install_initcpio

install_efi

cleanup

chroot "$linuxloopsdir"/chroot /tmp/init || return_value=1

[ "$return_value" -eq 0 ] && create_swap

umount_chroot

return $return_value
}

chroot_tails()
{
return_value=0

download_lxc_image archlinux current default

mount --bind "$linuxloopsdir"/chroot "$linuxloopsdir"/chroot

mount_chroot

cat >"$linuxloopsdir"/chroot/tmp/init <<'TAILSINIT'
#!/bin/bash
set -e
export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
export LD_LIBRARY_PATH=/usr/local/lib64:/usr/local/lib:/usr/lib64:/usr/lib:/lib64:/lib
/tmp/cleanup_container
pacman-key --init
pacman-key --populate
pacman -Syu --noconfirm ca-certificates openssl cpio fatresize parted sbsigntools
/tmp/set_locale_and_timezone
/tmp/install
/tmp/cleanup
exit
TAILSINIT
chmod 0755 "$linuxloopsdir"/chroot/tmp/init

cleanup_container
set_locale_and_timezone

cat >"$linuxloopsdir"/chroot/tmp/install <<TAILSINSTALL
#!/bin/bash
set -e
curl -L https://tails.darklab.sh/pub/tails/stable/"\$(curl -L https://tails.darklab.sh/pub/tails/stable/ | grep '<a href="tails-amd64-' | head -1 | cut -d'>' -f2 | cut -d '/' -f1)"/"\$(curl -L https://tails.darklab.sh/pub/tails/stable/ | grep '<a href="tails-amd64-' | head -1 | cut -d'>' -f2 | cut -d '/' -f1)".img -o /tmp/tails.img
dd if=/tmp/tails.img of="$destination_device" bs=1M status=progress
echo -e "Fix\n" | parted ---pretend-input-tty "$destination_device" print
parted "$destination_device" resizepart 1 8GiB
set +e; fatresize -v -s 8G "$partition_path"1; set -e
rm /tmp/tails.img
mkdir -p /isomount
mount "$partition_path"1 /isomount
mkdir -p /tmp/initramfs/scripts/init-bottom /tmp/initramfs/usr/lib/udev/rules.d
cp /tmp/install_initramfs /tmp/initramfs/linuxloops
chmod 0755 /tmp/initramfs/linuxloops
echo '/scripts/init-bottom/linuxloopsfix "\$@"' > /tmp/initramfs/scripts/init-bottom/ORDER
chmod 0755 /tmp/initramfs/scripts/init-bottom/ORDER
cat >/tmp/initramfs/scripts/init-bottom/linuxloopsfix <<'LINUXLOOPSFIX'
cat >/root/etc/udev/rules.d/99-zzzlinuxloops.rules <<'TAILSUDEV'
SUBSYSTEMS=="block", KERNEL=="loop0", ENV{ID_DRIVE_DETACHABLE}:="0", SYMLINK+="TailsBootDev", SYMLINK+="bilibop"
SUBSYSTEMS=="block", KERNEL=="loop0*", ENV{UDISKS_SYSTEM}:="1", GROUP:="floppy"
ENV{ID_FS_LABEL}=="TailsData", KERNEL=="loop0*", ENV{UDISKS_IGNORE}="1"
TAILSUDEV
sed -i 's#loop|##g' /root/lib/live/boot/*
sed -i 's#if (\$device =~ m{mmcblk \[0-9]+ \\\\z}xms) {#if (\$device =~ m{mmcblk [0-9]+ \\\\z}xms or \$device =~ m{loop [0-9]+ \\\\z}xms) {#g' \$(find /root/usr/local/share/perl | grep 'UDisks.pm' | head -1)
sed -i -e 's#method get_udisks_property (Str \$type, Defined \$object, Str \$property) {#method get_udisks_property (Str \$type, Defined \$object, Str \$property) {\nif (\$type eq "Block" and \$property eq "Drive" and \$object =~ m/loop0/) { return "/dev/loop0"; }\nif (\$type eq "Drive" and \$property eq "ConnectionBus" and \$object =~ m/loop0/) { return "sdio"; }\nif (\$type eq "Drive" and \$property eq "Optical" and \$object =~ m/loop0/) { return 0; }\nif (\$type eq "Drive" and \$property eq "Vendor" and \$object =~ m/loop0/) { return ""; }\nif (\$type eq "Drive" and \$property eq "Model" and \$object =~ m/loop0/) { return "linuxloops"; }#g' \$(find /root/usr/local/share/perl | grep 'UDisks.pm' | head -1)
LINUXLOOPSFIX
chmod 0755 /tmp/initramfs/scripts/init-bottom/linuxloopsfix
(cd /tmp/initramfs && find . | cpio -o -H newc | gzip > /isomount/live/linuxloops.img)
if [ "$install_type" == "image" ]; then
	mkdir -p /etc/secureboot_key
	sbattach --signum 1 --detach /etc/secureboot_key/MOK.tmp /isomount/live/vmlinuz
	openssl pkcs7 -print_certs -inform der -in /etc/secureboot_key/MOK.tmp -out /etc/secureboot_key/MOK.pem
	openssl x509 -outform DER -in /etc/secureboot_key/MOK.pem -out /etc/secureboot_key/MOK.der
fi
umount /isomount
TAILSINSTALL
chmod 0755 "$linuxloopsdir"/chroot/tmp/install

cmdline_extra="$CUSTOM_CMDLINE_PARAMS"
install_iso_init

cleanup

chroot "$linuxloopsdir"/chroot /tmp/init || return_value=1

root_device="live-media=/dev/disk/by-uuid/$(blkid -s UUID -o value "$partition_path"1)"

umount_chroot

return $return_value
}

chroot_ubuntu()
{
return_value=0

download_lxc_image ubuntu lunar default

mount_chroot

cat >"$linuxloopsdir"/chroot/tmp/init <<'UBUNTUINIT'
#!/bin/bash
set -e
export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
export LD_LIBRARY_PATH=/usr/local/lib64:/usr/local/lib:/usr/lib64:/usr/lib:/lib64:/lib
/tmp/cleanup_container
yes | DEBIAN_FRONTEND=noninteractive apt update
yes | DEBIAN_FRONTEND=noninteractive apt install ca-certificates openssl
echo -e 'Dpkg::Options {\n  "--force-confnew";\n};' > /etc/apt/apt.conf.d/71debconf
echo -e 'APT::Install-Recommends "0";\nAPT::Get::Install-Recommends "false";' > /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install -o APT::Immediate-Configure=false --reinstall $(apt list --installed | cut -d'/' -f1 | sed '1d' | sed -z 's@\n@ @g')
yes | DEBIAN_FRONTEND=noninteractive dpkg --configure -a
echo -e 'Dpkg::Options {\n  "--force-confdef";\n};' > /etc/apt/apt.conf.d/71debconf
yes | DEBIAN_FRONTEND=noninteractive apt install apt-utils console-setup kmod
yes | DEBIAN_FRONTEND=noninteractive apt update
yes | DEBIAN_FRONTEND=noninteractive apt install linux-generic linux-headers-generic dkms linux-firmware wireless-regdb bash sudo modemmanager network-manager wpasupplicant bluez cryptsetup-initramfs e2fsprogs ntfs-3g nano acpid curl thermald bash-completion gnupg-utils policykit-1 xdg-user-dirs zstd fwupd-signed patchutils net-tools usb-modeswitch upower efibootmgr grub-efi grub-efi-amd64-signed os-prober shim-signed bind9-host dns-root-data amd64-microcode intel-microcode update-manager-core snapd sbsigntool mokutil dosfstools btrfs-progs zenity
systemctl enable systemd-resolved.service
systemctl disable systemd-networkd.service systemd-networkd-wait-online.service
systemctl mask systemd-networkd.service systemd-networkd-wait-online.service
/tmp/set_locale_and_timezone
/tmp/install_desktop
/tmp/install_user
rm -f /etc/apt/apt.conf.d/99linuxloops
/tmp/install_secureboot
if [ -f /tmp/install_nvidia ]; then /tmp/install_nvidia; fi
if [ -f /tmp/install_surface ]; then /tmp/install_surface; fi
if [ -f /tmp/install_custom_packages ]; then /tmp/install_custom_packages; fi
if [ -f /tmp/install_custom_script ]; then /tmp/install_custom_script; fi
/tmp/generate_fstab
/tmp/install_initramfs
/tmp/install_efi
yes | DEBIAN_FRONTEND=noninteractive apt autoremove
/tmp/cleanup
exit
UBUNTUINIT
chmod 0755 "$linuxloopsdir"/chroot/tmp/init

cleanup_container
set_locale_and_timezone

cat >"$linuxloopsdir"/chroot/tmp/install_user <<UBUNTUUSER
#!/bin/bash
set -e
userdel -r -f ubuntu
useradd -s /bin/bash -m '$username'
echo -e '$userpass\n$userpass' | passwd '$username'
usermod -aG sudo '$username'
UBUNTUUSER
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_user

hardware_support="alsa-utils alsa-ucm-conf alsa-topology-conf at-spi2-core avahi-discover cups cups-browsed cups-filters firmware-sof-signed iio-sensor-proxy libnss-mdns pulseaudio system-config-printer xserver-xorg"
basic_packages="gvfs-fuse packagekit udisks2 xdg-user-dirs-gtk"
basic_themes="adwaita-icon-theme breeze-gtk-theme breeze-icon-theme fonts-dejavu fonts-noto fonts-roboto gnome-backgrounds materia-gtk-theme oxygen-icon-theme papirus-icon-theme"
specific_packages="desktop-base plymouth-themes ubuntu-wallpapers fonts-ubuntu"
desktop_base="$hardware_support $basic_packages $basic_themes $specific_packages"
case "$desktop" in
	'budgie')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter budgie-lightdm-theme ubuntu-budgie-desktop budgie-desktop-environment budgie-applications-menu-applet budgie-brightness-controller-applet budgie-hotcorners-applet budgie-indicator-applet budgie-network-manager-applet budgie-rotation-lock-applet budgie-trash-applet ubuntu-budgie-themes pocillo-icon-theme nemo tilix plank gjs
"
	;;
	'budgie-full')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install network-manager-gnome
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter budgie-lightdm-theme ubuntu-budgie-desktop
"
	;;
	'cinnamon')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter cinnamon cinnamon-core gnome-terminal nemo blueman
"
	;;
	'cinnamon-full')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install network-manager-gnome blueman
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter cinnamon-desktop-environment
"
	;;
	'enlightenment')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter enlightenment terminology
yes | DEBIAN_FRONTEND=noninteractive apt purge network-manager
yes | DEBIAN_FRONTEND=noninteractive apt install connman
find /usr/lib -type f -name enlightenment_system -exec chmod 4755 {} \;
"
	;;
	'gnome')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base gdm3 gnome-session gnome-control-center gnome-terminal nautilus gnome-keyring libpam-gnome-keyring
"
	;;
	'gnome-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base gdm3 gnome gnome-control-center gnome-terminal nautilus gnome-keyring libpam-gnome-keyring
"
	;;
	'kde')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base sddm kubuntu-desktop dolphin plasma-discover konsole plasma-nm plasma-pa bluedevil libpam-kwallet5
"
	;;
	'kde-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base sddm kubuntu-desktop
"
	;;
	'lxde')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter lxde lxterminal pcmanfm lxde-icon-theme network-manager-gnome blueman
"
	;;
	'lxde-full')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install network-manager-gnome blueman
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter lxde
"
	;;
	'lxqt')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter lubuntu-desktop qterminal pcmanfm-qt network-manager-gnome blueman humanity-icon-theme
"
	;;
	'lxqt-full')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install network-manager-gnome blueman
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter lubuntu-desktop humanity-icon-theme
"
	;;
	'mate')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter ubuntu-mate-desktop ubuntu-mate-themes ubuntu-mate-wallpapers mate-control-center mate-applets mate-indicator-applet mate-applet-brisk-menu mate-themes mate-icon-theme mate-terminal caja ayatana-indicator-application ayatana-indicator-datetime ayatana-indicator-notifications ayatana-indicator-power ayatana-indicator-session ayatana-indicator-sound network-manager-gnome blueman
"
	;;
	'mate-full')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install network-manager-gnome blueman
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter ubuntu-mate-desktop
"
	;;
	'studio-full')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install network-manager-gnome
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base sddm ubuntustudio-desktop ardour obs-studio krita gimp kdenlive digikam darktable
"
	;;
	'ubuntu')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base gdm3 ubuntu-desktop-minimal gnome-terminal nautilus gnome-keyring libpam-gnome-keyring yaru-theme-gtk yaru-theme-icon yaru-theme-sound
"
	;;
	'ubuntu-full')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install network-manager-gnome
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base gdm3 ubuntu-desktop gnome-terminal nautilus gnome-keyring libpam-gnome-keyring
"
	;;
	'unity')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter ubuntu-unity-desktop network-manager-gnome indicator-applet indicator-application indicator-session nautilus gnome-terminal
"
	;;
	'unity-full')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install network-manager-gnome
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter ubuntu-unity-desktop indicator-applet indicator-application indicator-session nautilus gnome-terminal
"
	;;
	'xfce')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter xubuntu-desktop xfce4-goodies xubuntu-icon-theme xfce4-power-manager-plugins xfce4-pulseaudio-plugin xfce4-terminal thunar xfce4-notifyd network-manager-gnome blueman greybird-gtk-theme elementary-xfce-icon-theme
"
	;;
	'xfce-full')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install network-manager-gnome blueman
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter xubuntu-desktop
"
	;;
esac
cat >"$linuxloopsdir"/chroot/tmp/install_desktop <<UBUNTUDESKTOP
#!/bin/bash
set -e
if [ "$desktop" == "none" ]; then exit 0; fi
$install_desktop
echo -e 'APT::Install-Recommends \"0\";\nAPT::Get::Install-Recommends \"false\";' > /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install update-manager software-properties-gtk
mkdir -p /usr/share/glib-2.0/schemas
cat >/usr/share/glib-2.0/schemas/zz_linuxloops.gschema.override <<'DCONF'
[org.gnome.desktop.background:Budgie]
picture-uri="file:///usr/share/backgrounds/warty-final-ubuntu.png"
[org.gnome.desktop.interface:Budgie]
gtk-theme="Arc"
icon-theme="Papirus"
[org.cinnamon.desktop.background]
picture-uri="file:///usr/share/backgrounds/warty-final-ubuntu.png"
[org.cinnamon.desktop.interface]
gtk-theme="Materia"
icon-theme="Papirus"
[org.cinnamon.desktop.wm.preferences]
theme="Materia"
DCONF
if [ ! -z "\$(command -v glib-compile-schemas)" ]; then glib-compile-schemas /usr/share/glib-2.0/schemas/; fi
mkdir -p /etc/xdg/autostart
cat >/etc/xdg/autostart/budgie-nemo.desktop <<'NEMODESKTOP'
[Desktop Entry]
Type=Application
Name=Nemo
Comment=Start Nemo desktop at log in
Exec=nemo-desktop
OnlyShowIn=Budgie;
AutostartCondition=GSettings org.nemo.desktop show-desktop-icons
X-GNOME-AutoRestart=true
NoDisplay=true
NEMODESKTOP
mkdir -p /etc/lightdm
echo -e '[Greeter]\nbackground = /usr/share/backgrounds/warty-final-ubuntu.png\ndraw-user-backgrounds = true' > /etc/lightdm/slick-greeter.conf
UBUNTUDESKTOP
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_desktop

install_secureboot
if [ ! -z "$nvidia" ] && [ "$nvidia" == "Yes" ]; then install_nvidia; fi
if [ ! -z "$surface" ] && [ "$surface" == "Yes" ]; then install_surface "linux-generic-* linux-headers-* linux-image-* linux-modules-*"; fi

if [ ! -z "$CUSTOM_PACKAGES" ]; then
	echo -e "#!/bin/bash\nset -e\nyes | DEBIAN_FRONTEND=noninteractive apt install $CUSTOM_PACKAGES" > "$linuxloopsdir"/chroot/tmp/install_custom_packages
	chmod 0755 "$linuxloopsdir"/chroot/tmp/install_custom_packages
fi

if [ -f ./custom_script ]; then
	cp ./custom_script "$linuxloopsdir"/chroot/tmp/install_custom_script
	chmod 0755 "$linuxloopsdir"/chroot/tmp/install_custom_script
fi

generate_fstab

cmdline_extra="$CUSTOM_CMDLINE_PARAMS"
install_initramfstools

install_efi

cleanup

chroot "$linuxloopsdir"/chroot /tmp/init || return_value=1

[ "$return_value" -eq 0 ] && create_swap

umount_chroot

return $return_value
}

chroot_ubuntu-lts()
{
return_value=0

download_lxc_image ubuntu jammy default

mount_chroot

cat >"$linuxloopsdir"/chroot/tmp/init <<'UBUNTUINIT'
#!/bin/bash
set -e
export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
export LD_LIBRARY_PATH=/usr/local/lib64:/usr/local/lib:/usr/lib64:/usr/lib:/lib64:/lib
/tmp/cleanup_container
yes | DEBIAN_FRONTEND=noninteractive apt update
yes | DEBIAN_FRONTEND=noninteractive apt install ca-certificates openssl
echo -e 'Dpkg::Options {\n  "--force-confnew";\n};' > /etc/apt/apt.conf.d/71debconf
echo -e 'APT::Install-Recommends "0";\nAPT::Get::Install-Recommends "false";' > /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install -o APT::Immediate-Configure=false --reinstall $(apt list --installed | cut -d'/' -f1 | sed '1d' | sed -z 's@\n@ @g')
yes | DEBIAN_FRONTEND=noninteractive dpkg --configure -a
echo -e 'Dpkg::Options {\n  "--force-confdef";\n};' > /etc/apt/apt.conf.d/71debconf
yes | DEBIAN_FRONTEND=noninteractive apt install apt-utils console-setup kmod
yes | DEBIAN_FRONTEND=noninteractive apt update
yes | DEBIAN_FRONTEND=noninteractive apt install linux-generic linux-headers-generic dkms linux-firmware wireless-regdb bash sudo modemmanager network-manager wpasupplicant bluez cryptsetup-initramfs e2fsprogs ntfs-3g nano acpid curl thermald bash-completion gnupg-utils policykit-1 xdg-user-dirs zstd fwupd-signed patchutils net-tools usb-modeswitch upower efibootmgr grub-efi grub-efi-amd64-signed os-prober shim-signed bind9-host dns-root-data amd64-microcode intel-microcode update-manager-core snapd sbsigntool mokutil dosfstools btrfs-progs zenity
systemctl enable systemd-resolved.service
systemctl disable systemd-networkd.service systemd-networkd-wait-online.service
systemctl mask systemd-networkd.service systemd-networkd-wait-online.service
/tmp/set_locale_and_timezone
/tmp/install_desktop
/tmp/install_user
rm -f /etc/apt/apt.conf.d/99linuxloops
/tmp/install_secureboot
if [ -f /tmp/install_nvidia ]; then /tmp/install_nvidia; fi
if [ -f /tmp/install_surface ]; then /tmp/install_surface; fi
if [ -f /tmp/install_custom_packages ]; then /tmp/install_custom_packages; fi
if [ -f /tmp/install_custom_script ]; then /tmp/install_custom_script; fi
/tmp/generate_fstab
/tmp/install_initramfs
/tmp/install_efi
yes | DEBIAN_FRONTEND=noninteractive apt autoremove
/tmp/cleanup
exit
UBUNTUINIT
chmod 0755 "$linuxloopsdir"/chroot/tmp/init

cleanup_container
set_locale_and_timezone

cat >"$linuxloopsdir"/chroot/tmp/install_user <<UBUNTUUSER
#!/bin/bash
set -e
userdel -r -f ubuntu
useradd -s /bin/bash -m '$username'
echo -e '$userpass\n$userpass' | passwd '$username'
usermod -aG sudo '$username'
UBUNTUUSER
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_user

hardware_support="alsa-utils alsa-ucm-conf alsa-topology-conf at-spi2-core avahi-discover cups cups-browsed cups-filters firmware-sof-signed iio-sensor-proxy libnss-mdns pulseaudio system-config-printer xserver-xorg"
basic_packages="gvfs-fuse packagekit udisks2 xdg-user-dirs-gtk"
basic_themes="adwaita-icon-theme breeze-gtk-theme breeze-icon-theme fonts-dejavu fonts-noto fonts-roboto gnome-backgrounds materia-gtk-theme oxygen-icon-theme papirus-icon-theme"
specific_packages="desktop-base plymouth-themes ubuntu-wallpapers fonts-ubuntu"
desktop_base="$hardware_support $basic_packages $basic_themes $specific_packages"
case "$desktop" in
	'none')
	install_desktop=""
	;;
	'budgie')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter budgie-lightdm-theme ubuntu-budgie-desktop budgie-desktop-environment budgie-applications-menu-applet budgie-brightness-controller-applet budgie-hotcorners-applet budgie-indicator-applet budgie-network-manager-applet budgie-rotation-lock-applet budgie-trash-applet ubuntu-budgie-themes pocillo-icon-theme nemo tilix plank gjs
"
	;;
	'budgie-full')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install network-manager-gnome
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter budgie-lightdm-theme ubuntu-budgie-desktop
"
	;;
	'cinnamon')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter cinnamon cinnamon-core gnome-terminal nemo blueman
"
	;;
	'cinnamon-full')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install network-manager-gnome blueman
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter cinnamon-desktop-environment
"
	;;
	'enlightenment')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter enlightenment terminology
yes | DEBIAN_FRONTEND=noninteractive apt purge network-manager
yes | DEBIAN_FRONTEND=noninteractive apt install connman
find /usr/lib -type f -name enlightenment_system -exec chmod 4755 {} \;
"
	;;
	'gnome')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base gdm3 gnome-session gnome-control-center gnome-terminal nautilus gnome-keyring libpam-gnome-keyring
"
	;;
	'gnome-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base gdm3 gnome gnome-control-center gnome-terminal nautilus gnome-keyring libpam-gnome-keyring
"
	;;
	'kde')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base sddm kubuntu-desktop dolphin plasma-discover konsole plasma-nm plasma-pa bluedevil libpam-kwallet5
"
	;;
	'kde-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base sddm kubuntu-desktop
"
	;;
	'lxde')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter lxde lxterminal pcmanfm lxde-icon-theme network-manager-gnome blueman
"
	;;
	'lxde-full')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install network-manager-gnome blueman
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter lxde
"
	;;
	'lxqt')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter lubuntu-desktop qterminal pcmanfm-qt network-manager-gnome blueman humanity-icon-theme
"
	;;
	'lxqt-full')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install network-manager-gnome blueman
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter lubuntu-desktop humanity-icon-theme
"
	;;
	'mate')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter ubuntu-mate-desktop ubuntu-mate-themes ubuntu-mate-wallpapers mate-control-center mate-applets mate-indicator-applet mate-applet-brisk-menu mate-themes mate-icon-theme mate-terminal caja ayatana-indicator-application ayatana-indicator-datetime ayatana-indicator-notifications ayatana-indicator-power ayatana-indicator-session ayatana-indicator-sound network-manager-gnome blueman
"
	;;
	'mate-full')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install network-manager-gnome blueman
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter ubuntu-mate-desktop
"
	;;
	'studio-full')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install network-manager-gnome
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base sddm ubuntustudio-desktop ardour obs-studio krita gimp kdenlive digikam darktable
"
	;;
	'ubuntu')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base gdm3 ubuntu-desktop-minimal gnome-terminal nautilus gnome-keyring libpam-gnome-keyring yaru-theme-gtk yaru-theme-icon yaru-theme-sound
"
	;;
	'ubuntu-full')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install network-manager-gnome
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base gdm3 ubuntu-desktop gnome-terminal nautilus gnome-keyring libpam-gnome-keyring
"
	;;
	'xfce')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter xubuntu-desktop xfce4-goodies xubuntu-icon-theme xfce4-power-manager-plugins xfce4-pulseaudio-plugin xfce4-terminal thunar xfce4-notifyd network-manager-gnome blueman greybird-gtk-theme elementary-xfce-icon-theme
"
	;;
	'xfce-full')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install network-manager-gnome blueman
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install $desktop_base lightdm slick-greeter xubuntu-desktop
"
	;;
esac
cat >"$linuxloopsdir"/chroot/tmp/install_desktop <<UBUNTUDESKTOP
#!/bin/bash
set -e
if [ "$desktop" == "none" ]; then exit 0; fi
$install_desktop
echo -e 'APT::Install-Recommends \"0\";\nAPT::Get::Install-Recommends \"false\";' > /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install update-manager software-properties-gtk
mkdir -p /usr/share/glib-2.0/schemas
cat >/usr/share/glib-2.0/schemas/zz_linuxloops.gschema.override <<'DCONF'
[org.gnome.desktop.background:Budgie]
picture-uri="file:///usr/share/backgrounds/warty-final-ubuntu.png"
[org.gnome.desktop.interface:Budgie]
gtk-theme="Arc"
icon-theme="Papirus"
[org.cinnamon.desktop.background]
picture-uri="file:///usr/share/backgrounds/warty-final-ubuntu.png"
[org.cinnamon.desktop.interface]
gtk-theme="Materia"
icon-theme="Papirus"
[org.cinnamon.desktop.wm.preferences]
theme="Materia"
DCONF
if [ ! -z "\$(command -v glib-compile-schemas)" ]; then glib-compile-schemas /usr/share/glib-2.0/schemas/; fi
mkdir -p /etc/xdg/autostart
cat >/etc/xdg/autostart/budgie-nemo.desktop <<'NEMODESKTOP'
[Desktop Entry]
Type=Application
Name=Nemo
Comment=Start Nemo desktop at log in
Exec=nemo-desktop
OnlyShowIn=Budgie;
AutostartCondition=GSettings org.nemo.desktop show-desktop-icons
X-GNOME-AutoRestart=true
NoDisplay=true
NEMODESKTOP
mkdir -p /etc/lightdm
echo -e '[Greeter]\nbackground = /usr/share/backgrounds/warty-final-ubuntu.png\ndraw-user-backgrounds = true' > /etc/lightdm/slick-greeter.conf
UBUNTUDESKTOP
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_desktop

install_secureboot
if [ ! -z "$nvidia" ] && [ "$nvidia" == "Yes" ]; then install_nvidia; fi
if [ ! -z "$surface" ] && [ "$surface" == "Yes" ]; then install_surface "linux-generic-* linux-headers-* linux-image-* linux-modules-*"; fi

if [ ! -z "$CUSTOM_PACKAGES" ]; then
	echo -e "#!/bin/bash\nset -e\nyes | DEBIAN_FRONTEND=noninteractive apt install $CUSTOM_PACKAGES" > "$linuxloopsdir"/chroot/tmp/install_custom_packages
	chmod 0755 "$linuxloopsdir"/chroot/tmp/install_custom_packages
fi

if [ -f ./custom_script ]; then
	cp ./custom_script "$linuxloopsdir"/chroot/tmp/install_custom_script
	chmod 0755 "$linuxloopsdir"/chroot/tmp/install_custom_script
fi

generate_fstab

cmdline_extra="$CUSTOM_CMDLINE_PARAMS"
install_initramfstools

install_efi

cleanup

chroot "$linuxloopsdir"/chroot /tmp/init || return_value=1

[ "$return_value" -eq 0 ] && create_swap

umount_chroot

return $return_value
}

chroot_voidlinux()
{
return_value=0

download_lxc_image voidlinux current default

mount_chroot

cat >"$linuxloopsdir"/chroot/tmp/init <<'VOIDLINUXINIT'
#!/bin/bash
set -e
export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
export LD_LIBRARY_PATH=/usr/local/lib64:/usr/local/lib:/usr/lib64:/usr/lib:/lib64:/lib
/tmp/cleanup_container
xbps-install -Syu
xbps-install -y ca-certificates openssl
xbps-remove -y base-voidstrap
xbps-install -fy $(xbps-query -l | awk '{ print $2 }' | xargs -n1 xbps-uhelper getpkgname | sed -z 's@\n@ @g') void-repo-nonfree
xbps-install -Syu
xbps-install -y base-system linux linux-headers dkms linux-firmware crda bash sudo ModemManager NetworkManager wpa_supplicant bluez cryptsetup e2fsprogs ntfs-3g nano acpid curl thermald bash-completion gnupg polkit xdg-user-dirs zstd fwupd patch net-tools usb-modeswitch upower efibootmgr grub-x86_64-efi os-prober bind dnssec-anchors sbsigntool mokutil dosfstools btrfs-progs zenity
ln -s /etc/sv/agetty-tty1 /etc/sv/agetty-tty2 /etc/sv/agetty-tty3 /etc/sv/agetty-tty4 /etc/sv/agetty-tty5 /etc/sv/agetty-tty6 /etc/sv/dbus /etc/sv/dhcpcd /etc/sv/named /etc/sv/NetworkManager /etc/sv/polkitd /etc/sv/uuidd /etc/runit/runsvdir/default/
/tmp/set_locale_and_timezone
/tmp/install_desktop
/tmp/install_user
/tmp/install_secureboot
if [ -f /tmp/install_nvidia ]; then /tmp/install_nvidia; fi
if [ -f /tmp/install_custom_packages ]; then /tmp/install_custom_packages; fi
if [ -f /tmp/install_custom_script ]; then /tmp/install_custom_script; fi
/tmp/generate_fstab
/tmp/install_initramfs
/tmp/install_efi
/tmp/cleanup
exit
VOIDLINUXINIT
chmod 0755 "$linuxloopsdir"/chroot/tmp/init

cleanup_container
set_locale_and_timezone

cat >"$linuxloopsdir"/chroot/tmp/install_user <<VOIDLINUXUSER
#!/bin/bash
set -e
useradd -s /bin/bash -m '$username'
echo -e '$userpass\n$userpass' | passwd '$username'
usermod -aG wheel '$username'
echo "%wheel      ALL=(ALL) ALL" > /etc/sudoers.d/90-wheel
VOIDLINUXUSER
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_user

hardware_support="alsa-utils alsa-ucm-conf at-spi2-core avahi-discover cups cups-filters sof-firmware nss-mdns pulseaudio system-config-printer xorg"
basic_packages="gvfs PackageKit udisks2 xdg-user-dirs-gtk"
basic_themes="adwaita-icon-theme breeze-gtk breeze-icons dejavu-fonts-ttf noto-fonts-ttf fonts-roboto-ttf gnome-backgrounds oxygen-icons5 papirus-icon-theme"
specific_packages="font-adobe-source-code-pro plymouth"
desktop_base="$hardware_support $basic_packages $basic_themes $specific_packages"
desktop_services="/etc/sv/avahi-daemon /etc/sv/bluetoothd /etc/sv/cupsd /etc/sv/cups-browsed"
case "$desktop" in
	'gnome')
	install_desktop="
xbps-install -y $desktop_base gdm gnome-core gnome-terminal
ln -s /etc/sv/gdm  /etc/runit/runsvdir/default/
"
	;;
	'gnome-full')
	install_desktop="
xbps-install -y $desktop_base gdm gnome
ln -s /etc/sv/gdm /etc/runit/runsvdir/default/
"
	;;
	'kde')
	install_desktop="
xbps-install -y $desktop_base sddm kde5 dolphin konsole
ln -s /etc/sv/sddm /etc/runit/runsvdir/default/
"
	;;
	'kde-full')
	install_desktop="
xbps-install -y $desktop_base sddm kde5 kde5-baseapps
ln -s /etc/sv/sddm /etc/runit/runsvdir/default/
"
	;;
	'lxde')
	install_desktop="
xbps-install -y $desktop_base lightdm lightdm-gtk3-greeter lxde network-manager-applet blueman
ln -s /etc/sv/lightdm /etc/runit/runsvdir/default/
"
	;;
	'lxqt')
	install_desktop="
xbps-install -y $desktop_base lightdm lightdm-gtk3-greeter lxqt network-manager-applet blueman
ln -s /etc/sv/lightdm /etc/runit/runsvdir/default/
"
	;;
	'mate')
	install_desktop="
xbps-install -y $desktop_base lightdm lightdm-gtk3-greeter mate network-manager-applet blueman mate-terminal mate-power-manager mate-applets
ln -s /etc/sv/lightdm /etc/runit/runsvdir/default/
"
	;;
	'mate-full')
	install_desktop="
xbps-install -y $desktop_base lightdm lightdm-gtk3-greeter mate mate-extra network-manager-applet blueman mate-terminal mate-power-manager mate-applets
ln -s /etc/sv/lightdm /etc/runit/runsvdir/default/
"
	;;
	'xfce')
	install_desktop="
xbps-install -y $desktop_base lightdm lightdm-gtk3-greeter xfce4 xfce4-notifyd xfce4-pulseaudio-plugin network-manager-applet blueman
ln -s /etc/sv/lightdm /etc/runit/runsvdir/default/
"
	;;
esac
cat >"$linuxloopsdir"/chroot/tmp/install_desktop <<VOIDLINUXDESKTOP
#!/bin/bash
set -e
if [ "$desktop" == "none" ]; then exit 0; fi
$install_desktop
ln -s $desktop_services /etc/runit/runsvdir/default/
VOIDLINUXDESKTOP
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_desktop

install_secureboot
if [ ! -z "$nvidia" ] && [ "$nvidia" == "Yes" ]; then install_nvidia; fi

if [ ! -z "$CUSTOM_PACKAGES" ]; then
	echo -e "#!/bin/bash\nset -e\nxbps-install $CUSTOM_PACKAGES" > "$linuxloopsdir"/chroot/tmp/install_custom_packages
	chmod 0755 "$linuxloopsdir"/chroot/tmp/install_custom_packages
fi

if [ -f ./custom_script ]; then
	cp ./custom_script "$linuxloopsdir"/chroot/tmp/install_custom_script
	chmod 0755 "$linuxloopsdir"/chroot/tmp/install_custom_script
fi

generate_fstab

cmdline_extra="$CUSTOM_CMDLINE_PARAMS"
install_dracut

install_efi

cleanup

chroot "$linuxloopsdir"/chroot /tmp/init || return_value=1

[ "$return_value" -eq 0 ] && create_swap

umount_chroot

return $return_value
}

chroot_zorin()
{
return_value=0

download_lxc_image ubuntu focal default

mount_chroot

cat >"$linuxloopsdir"/chroot/tmp/init <<'ZORININIT'
#!/bin/bash
set -e
export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
export LD_LIBRARY_PATH=/usr/local/lib64:/usr/local/lib:/usr/lib64:/usr/lib:/lib64:/lib
/tmp/cleanup_container
yes | DEBIAN_FRONTEND=noninteractive apt update
yes | DEBIAN_FRONTEND=noninteractive apt install ca-certificates openssl gnupg
echo -e 'Dpkg::Options {\n  "--force-confnew";\n};' > /etc/apt/apt.conf.d/71debconf
echo -e 'APT::Install-Recommends "0";\nAPT::Get::Install-Recommends "false";' > /etc/apt/apt.conf.d/99linuxloops
echo -e 'deb http://ppa.launchpad.net/zorinos/apps/ubuntu focal main\n# deb-src http://ppa.launchpad.net/zorinos/apps/ubuntu focal main' > /etc/apt/sources.list.d/zorinos-ubuntu-apps-focal.list
echo -e 'deb http://ppa.launchpad.net/zorinos/drivers/ubuntu focal main\n# deb-src http://ppa.launchpad.net/zorinos/drivers/ubuntu focal main' > /etc/apt/sources.list.d/zorinos-ubuntu-drivers-focal.list
echo -e 'deb http://ppa.launchpad.net/zorinos/patches/ubuntu focal main\n# deb-src http://ppa.launchpad.net/zorinos/patches/ubuntu focal main' > /etc/apt/sources.list.d/zorinos-ubuntu-patches-focal.list
echo -e 'deb http://ppa.launchpad.net/zorinos/stable/ubuntu focal main\n# deb-src http://ppa.launchpad.net/zorinos/stable/ubuntu focal main' > /etc/apt/sources.list.d/zorinos-ubuntu-stable-focal.list
apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 30FCF8F64F71B61C
yes | DEBIAN_FRONTEND=noninteractive apt update
yes | DEBIAN_FRONTEND=noninteractive apt install zorin-os-overlay
yes | DEBIAN_FRONTEND=noninteractive apt update
yes | DEBIAN_FRONTEND=noninteractive apt install -o APT::Immediate-Configure=false --reinstall $(apt list --installed | cut -d'/' -f1 | sed '1d' | sed -z 's@\n@ @g')
yes | DEBIAN_FRONTEND=noninteractive dpkg --configure -a
echo -e 'Dpkg::Options {\n  "--force-confdef";\n};' > /etc/apt/apt.conf.d/71debconf
yes | DEBIAN_FRONTEND=noninteractive apt install apt-utils console-setup kmod
yes | DEBIAN_FRONTEND=noninteractive apt update
yes | DEBIAN_FRONTEND=noninteractive apt install linux-generic-hwe-20.04 linux-headers-generic-hwe-20.04 dkms linux-firmware wireless-regdb bash sudo modemmanager network-manager wpasupplicant bluez cryptsetup-initramfs e2fsprogs ntfs-3g nano acpid curl thermald bash-completion gnupg-utils policykit-1 xdg-user-dirs zstd fwupd-signed patchutils net-tools usb-modeswitch upower efibootmgr grub-efi grub-efi-amd64-signed os-prober shim-signed bind9-host dns-root-data update-manager-core snapd sbsigntool mokutil dosfstools btrfs-progs zenity
systemctl enable systemd-resolved.service
systemctl disable systemd-networkd.service systemd-networkd-wait-online.service
systemctl mask systemd-networkd.service systemd-networkd-wait-online.service
/tmp/set_locale_and_timezone
/tmp/install_desktop
/tmp/install_user
/tmp/install_secureboot
if [ -f /tmp/install_nvidia ]; then /tmp/install_nvidia; fi
if [ -f /tmp/install_surface ]; then /tmp/install_surface; fi
if [ -f /tmp/install_custom_packages ]; then /tmp/install_custom_packages; fi
if [ -f /tmp/install_custom_script ]; then /tmp/install_custom_script; fi
/tmp/generate_fstab
/tmp/install_initramfs
/tmp/install_efi
yes | DEBIAN_FRONTEND=noninteractive apt autoremove
/tmp/cleanup
exit
ZORININIT
chmod 0755 "$linuxloopsdir"/chroot/tmp/init

cleanup_container
set_locale_and_timezone

cat >"$linuxloopsdir"/chroot/tmp/install_user <<ZORINUSER
#!/bin/bash
set -e
userdel -r -f ubuntu
useradd -s /bin/bash -m '$username'
echo -e '$userpass\n$userpass' | passwd '$username'
usermod -aG sudo '$username'
ZORINUSER
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_user

case "$desktop" in
	'core')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install network-manager-gnome
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install zorin-os-desktop
"
	;;
	'lite')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install network-manager-gnome
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install zorin-os-lite-desktop
yes | DEBIAN_FRONTEND=noninteractive apt purge xfce4-indicator-plugin
"
	;;
esac
cat >"$linuxloopsdir"/chroot/tmp/install_desktop <<ZORINDESKTOP
#!/bin/bash
set -e
if [ "$desktop" == "none" ]; then exit 0; fi
$install_desktop
ZORINDESKTOP
chmod 0755 "$linuxloopsdir"/chroot/tmp/install_desktop

install_secureboot
if [ ! -z "$nvidia" ] && [ "$nvidia" == "Yes" ]; then install_nvidia; fi
if [ ! -z "$surface" ] && [ "$surface" == "Yes" ]; then install_surface "linux-generic-* linux-headers-* linux-image-* linux-modules-*"; fi

if [ ! -z "$CUSTOM_PACKAGES" ]; then
	echo -e "#!/bin/bash\nset -e\nyes | DEBIAN_FRONTEND=noninteractive apt install $CUSTOM_PACKAGES" > "$linuxloopsdir"/chroot/tmp/install_custom_packages
	chmod 0755 "$linuxloopsdir"/chroot/tmp/install_custom_packages
fi

if [ -f ./custom_script ]; then
	cp ./custom_script "$linuxloopsdir"/chroot/tmp/install_custom_script
	chmod 0755 "$linuxloopsdir"/chroot/tmp/install_custom_script
fi

generate_fstab

cmdline_extra="$CUSTOM_CMDLINE_PARAMS"
install_initramfstools

install_efi

cleanup

chroot "$linuxloopsdir"/chroot /tmp/init || return_value=1

[ "$return_value" -eq 0 ] && create_swap

umount_chroot

return $return_value
}

live()
{
echo "live ALL=(ALL) NOPASSWD: ALL" >> "$linuxloopsdir"/chroot/etc/sudoers
cat >"$linuxloopsdir"/chroot/etc/lightdm/lightdm.conf <<'LIVEAUTOLOGIN'
[Seat:*]
autologin-user=live
autologin-session=cinnamon
LIVEAUTOLOGIN
cat >"$linuxloopsdir"/chroot/usr/bin/linuxloops <<'LIVELAUNCHER'
#!/bin/bash

set -e

sudo curl -L https://raw.githubusercontent.com/sebanc/linuxloops/main/linuxloops -o /usr/bin/linuxloops.real || zenity --height=480 --width=640 --title="LinuxLoops installer" --error --text="Please make sure you have internet connectivity before running this program.\n"
sudo chmod 0755 /usr/bin/linuxloops.real
sudo bash linuxloops.real "$@"
LIVELAUNCHER
chmod 0755 "$linuxloopsdir"/chroot/usr/bin/linuxloops
mkdir -p "$linuxloopsdir"/chroot/home/live/Desktop
cat >"$linuxloopsdir"/chroot/home/live/Desktop/linuxloops.desktop <<'LIVEICON'
[Desktop Entry]
Name=Linuxloops installer
Exec=linuxloops
Icon=system-software-install
Terminal=true
Type=Application
StartupNotify=false
LIVEICON
chmod 0755 "$linuxloopsdir"/chroot/home/live/Desktop/linuxloops.desktop
chown -R 1000:1000 "$linuxloopsdir"/chroot/home/live
}

start_install()
{
local install_status
local ret
install_status=0
umount_chroot
if mountpoint -q "$linuxloopsdir"/chroot; then umount "$linuxloopsdir"/chroot; fi
if [ "$install_type" == "disk" ]; then
	for i in ls "$fullpath"?*; do
		umount $i > /dev/null 2>&1
		ret="$?"
		if [ ! "$ret" -eq 0 ] && [ ! "$ret" -eq 32 ]; then exit_with_error "Automatic unmounting of partitions failed with error $ret. Please unmount all device partitions manually and try again."; fi
	done
	echo "Creating partition table..."
	write_partition_table "$fullpath"
	destination_device="$fullpath"
	if (expr match "$fullpath" ".*[0-9]$" >/dev/null); then
		partition_path="$destination_device"p
	else
		partition_path="$destination_device"
	fi
else
	truncate -s 0 "$fullpath"
	partition_format="$(df -T "$fullpath" | tail -1 | cut -d' ' -f2)"
	echo "Creating image file on $partition_format partition."
	if [ -z "$partition_format" ]; then
		dd if=/dev/urandom of="$fullpath" bs=1M count=$install_sizeMB status=progress || exit_with_error "The image file could not be created."
	elif [ "$partition_format" == "ext4" ] || [ "$partition_format" == "fuseblk" ] || [ "$partition_format" == "ntfs" ]; then
		fallocate -l "$install_sizeMB"M "$fullpath" || exit_with_error "The image file could not be created."
	elif [ "$partition_format" == "btrfs" ]; then
		chattr +C "$fullpath"
		chattr -c "$fullpath"
		dd if=/dev/urandom of="$fullpath" bs=1M count=$install_sizeMB status=progress || exit_with_error "The image file could not be created."
	else
		dd if=/dev/urandom of="$fullpath" bs=1M count=$install_sizeMB status=progress || exit_with_error "The image file could not be created."
	fi
	chown $SUDO_UID:$SUDO_UID "$fullpath"
	echo "Creating partition table..."
	write_partition_table "$fullpath"
	destination_device="$(losetup --show -fP "$fullpath")" || exit_with_error "losetup command failed."
	partition_path="$destination_device"p
fi
mkdir -p "$linuxloopsdir"/chroot
if [ "$distro" == "brunch" ] || [ "$distro" == "chromeos-flex" ] || [ "$distro" == "tails" ]; then
	chroot_"$distro" || install_status=1
	if [ "$install_status" -eq 0 ] && [ "$install_type" == "disk" ] && [ -f /sys/block/$(echo $destination | sed 's@/dev/@@g')/removable ] && [ "$(cat /sys/block/$(echo $destination | sed 's@/dev/@@g')/removable)" -eq 0 ] && [ ! -z $(command -v efibootmgr) ]; then
		echo "Creating EFI boot manager entry..."
		if [ "$distro" == "brunch" ] || [ "$distro" == "chromeos-flex" ]; then
			efibootmgr -c -d "$destination" -p 12 -L "$distro_name" -l "\efi\\"$bootloader_id"\\"$bootloader_name""
		else
			efibootmgr -c -d "$destination" -p 1 -L "$distro_name" -l "\efi\\"$bootloader_id"\\"$bootloader_name""
		fi
	fi
else
	mkfs.fat -F 32 -n 'EFI' "$partition_path"1 || exit_with_error "Could not make filesystem for EFI partition."
	mkfs.ext4 -E nodiscard -F -L "BOOT" "$partition_path"2 || exit_with_error "Could not make filesystem for BOOT partition."
	if tune2fs -l "$partition_path"2 | grep 'Filesystem features' | grep -q -w large_dir; then tune2fs -O ^large_dir "$partition_path"2; fi
	if tune2fs -l "$partition_path"2 | grep 'Filesystem features' | grep -q -w metadata_csum_seed; then tune2fs -O ^metadata_csum_seed "$partition_path"2; fi
	if tune2fs -l "$partition_path"2 | grep 'Filesystem features' | grep -q -w orphan_file; then tune2fs -O ^orphan_file "$partition_path"2; fi
	if [ "$encryption" == "Yes" ]; then
		echo -n "$userpass" | cryptsetup --cipher aes-xts-plain64 --hash sha256 --key-size 256 luksFormat "$partition_path"3 - || exit_with_error "Could not make luks filesystem for ROOT partition."
		echo -n "$userpass" | cryptsetup --cipher aes-xts-plain64 --hash sha256 --key-size 256 luksOpen "$partition_path"3 luks-"$(blkid -s UUID -o value "$partition_path"3)" - || exit_with_error "Could not open luks filesystem for ROOT partition."
		if [ "$fstype" == "btrfs" ]; then
			mkfs.btrfs -K -L "ROOT" /dev/mapper/luks-"$(blkid -s UUID -o value "$partition_path"3)" || exit_with_error "Could not make btrfs filesystem for ROOT partition."
			mount /dev/mapper/luks-"$(blkid -s UUID -o value "$partition_path"3)" "$linuxloopsdir"/chroot || exit_with_error "Could not mount btrfs ROOT partition."
			btrfs subvolume create "$linuxloopsdir"/chroot/@ || exit_with_error "Could not create subvolume @."
			btrfs subvolume create "$linuxloopsdir"/chroot/@home || exit_with_error "Could not create subvolume @home."
			if [ "$swap_size" -ne 0 ]; then btrfs subvolume create "$linuxloopsdir"/chroot/@swap || exit_with_error "Could not create subvolume @swap."; fi
			umount "$linuxloopsdir"/chroot || exit_with_error "Could not unmount btrfs ROOT partition."
			mount -o subvol=@,compress=zstd /dev/mapper/luks-"$(blkid -s UUID -o value "$partition_path"3)" "$linuxloopsdir"/chroot || exit_with_error "Could not mount subvolume @."
		else
			mkfs.ext4 -E nodiscard -F -L "ROOT" /dev/mapper/luks-"$(blkid -s UUID -o value "$partition_path"3)" || exit_with_error "Could not make ext4 filesystem for ROOT partition."
			if tune2fs -l /dev/mapper/luks-"$(blkid -s UUID -o value "$partition_path"3)" | grep 'Filesystem features' | grep -q -w large_dir; then tune2fs -O ^large_dir /dev/mapper/luks-"$(blkid -s UUID -o value "$partition_path"3)"; fi
			if tune2fs -l /dev/mapper/luks-"$(blkid -s UUID -o value "$partition_path"3)" | grep 'Filesystem features' | grep -q -w metadata_csum_seed; then tune2fs -O ^metadata_csum_seed /dev/mapper/luks-"$(blkid -s UUID -o value "$partition_path"3)"; fi
			if tune2fs -l /dev/mapper/luks-"$(blkid -s UUID -o value "$partition_path"3)" | grep 'Filesystem features' | grep -q -w orphan_file; then tune2fs -O ^orphan_file /dev/mapper/luks-"$(blkid -s UUID -o value "$partition_path"3)"; fi
			mount /dev/mapper/luks-"$(blkid -s UUID -o value "$partition_path"3)" "$linuxloopsdir"/chroot || exit_with_error "Could not mount ROOT partition."
		fi
	else
		if [ "$fstype" == "btrfs" ]; then
			mkfs.btrfs -K -L "ROOT" "$partition_path"3 || exit_with_error "Could not make btrfs filesystem for ROOT partition."
			mount "$partition_path"3 "$linuxloopsdir"/chroot || exit_with_error "Could not mount btrfs ROOT partition."
			btrfs subvolume create "$linuxloopsdir"/chroot/@ || exit_with_error "Could not create subvolume @."
			btrfs subvolume create "$linuxloopsdir"/chroot/@home || exit_with_error "Could not create subvolume @home."
			if [ "$swap_size" -ne 0 ]; then btrfs subvolume create "$linuxloopsdir"/chroot/@swap || exit_with_error "Could not create subvolume @swap."; fi
			umount "$linuxloopsdir"/chroot || exit_with_error "Could not unmount btrfs ROOT partition."
			mount -o subvol=@,compress=zstd "$partition_path"3 "$linuxloopsdir"/chroot || exit_with_error "Could not mount subvolume @."
		else
			mkfs.ext4 -E nodiscard -F -L "ROOT" "$partition_path"3 || exit_with_error "Could not make ext4 filesystem for ROOT partition."
			if tune2fs -l "$partition_path"3 | grep 'Filesystem features' | grep -q -w large_dir; then tune2fs -O ^large_dir "$partition_path"3; fi
			if tune2fs -l "$partition_path"3 | grep 'Filesystem features' | grep -q -w metadata_csum_seed; then tune2fs -O ^metadata_csum_seed "$partition_path"3; fi
			if tune2fs -l "$partition_path"3 | grep 'Filesystem features' | grep -q -w orphan_file; then tune2fs -O ^orphan_file "$partition_path"3; fi		
			mount "$partition_path"3 "$linuxloopsdir"/chroot || exit_with_error "Could not mount ROOT partition."
		fi
	fi
	chroot_"$distro" || install_status=1
	if [ "$live" == "Yes" ]; then live; fi
	if [ "$install_status" -eq 0 ]; then
		if [ "$install_type" == "disk" ] && [ -f /sys/block/$(echo $destination | sed 's@/dev/@@g')/removable ] && [ "$(cat /sys/block/$(echo $destination | sed 's@/dev/@@g')/removable)" -eq 0 ] && [ ! -z $(command -v efibootmgr) ]; then
			echo "Creating EFI boot manager entry..."
			efibootmgr -c -d "$destination" -p 1 -L "$distro_name" -l "\efi\\"$bootloader_id"\\"$bootloader_name""
		fi
	fi
fi
if [ "$install_type" == "image" ] && [ -f "$linuxloopsdir"/chroot/etc/secureboot_key/MOK.der ]; then cp "$linuxloopsdir"/chroot/etc/secureboot_key/MOK.der "$fullpath".der; chown $SUDO_UID:$SUDO_UID "$fullpath".der; fi
if mountpoint -q "$linuxloopsdir"/chroot; then umount "$linuxloopsdir"/chroot; fi
if [ "$encryption" == "Yes" ]; then cryptsetup luksClose luks-"$(blkid -s UUID -o value "$partition_path"3)"; fi
if [ "$install_type" == "image" ]; then losetup -d "$destination_device"; fi
rm -rf "$linuxloopsdir"/chroot/*
return $install_status
}

grub_config()
{
if [ ! -z "$wsl" ]; then
	img_uuid=$(su $(getent passwd $SUDO_UID | cut -d: -f1) -c "PATH=$PATH:/mnt/c/Windows/System32 mountvol.exe $(echo ${fullpath:5:1} | tr a-z A-Z): /L | cut -d'{' -f2 | cut -d'}' -f1")
else
	img_uuid=$(blkid -s PARTUUID -o value "$(df "$fullpath" --output=source | sed 1d)")
fi
img_path=$(if [ $(findmnt -n -o TARGET -T $fullpath) == "/" ]; then echo "$(realpath $fullpath)"; else echo "$(realpath $fullpath)" | sed "s#$(findmnt -n -o TARGET -T $fullpath)##g"; fi)
if [ "$(df -T "$fullpath" | tail -1 | cut -d' ' -f2)" == "btrfs" ] && [ ! -z $(command -v btrfs) ]; then img_subvol="$(btrfs subvolume show $(findmnt -n -o TARGET -T $fullpath) | grep Name: | sed 's@\t\| @@g' | cut -d':' -f2)"; fi
if [ ! -z "$img_subvol" ]; then img_path="/$img_subvol$img_path"; fi
if [ -z "$wsl" ] && ([ "$(grep -o '^ID=[^,]\+' /etc/os-release | cut -d'=' -f2)" == "ubuntu" ] || [ "$(grep -o '^ID=[^,]\+' /etc/os-release | cut -d'=' -f2)" == "linuxmint" ] || [ "$(grep -o '^ID=[^,]\+' /etc/os-release | cut -d'=' -f2)" == "fedora" ] || [ "$(grep -o '^ID=[^,]\+' /etc/os-release | cut -d'=' -f2)" == "zorin" ]); then remove_tpm="\n	rmmod tpm"; fi
if [ "$distro" == "brunch" ]; then
config="submenu '$distro_name' {
menuentry '$distro_name' --class '$distro' {$remove_tpm
	img_path=\"$img_path\"
	img_uuid=\"$img_uuid\"
	search --no-floppy --set=root --file \$img_path
	loopback loop \$img_path
	source (loop,12)/efi/boot/settings.cfg
	if [ -z \$verbose ] -o [ \$verbose -eq 0 ]; then
		linux (loop,7)\$kernel boot=local noresume noswap loglevel=7 options=\$options chromeos_bootsplash=\$chromeos_bootsplash \$cmdline_params \\
			cros_secure cros_debug img_uuid=\$img_uuid img_path=\$img_path \\
			console= vt.global_cursor_default=0 brunch_bootsplash=\$brunch_bootsplash quiet
	else
		linux (loop,7)\$kernel boot=local noresume noswap loglevel=7 options=\$options chromeos_bootsplash=\$chromeos_bootsplash \$cmdline_params \\
			cros_secure cros_debug img_uuid=\$img_uuid img_path=\$img_path
	fi
	initrd (loop,7)/lib/firmware/amd-ucode.img (loop,7)/lib/firmware/intel-ucode.img (loop,7)/initramfs.img
}
menuentry '$distro_name settings' --class '$distro-settings' {$remove_tpm
	img_path=\"$img_path\"
	img_uuid=\"$img_uuid\"
	search --no-floppy --set=root --file \$img_path
	loopback loop \$img_path
	source (loop,12)/efi/boot/settings.cfg
	linux (loop,7)/kernel boot=local noresume noswap loglevel=7 options= chromeos_bootsplash= edit_brunch_config=1 \\
		cros_secure cros_debug img_uuid=\$img_uuid img_path=\$img_path
	initrd (loop,7)/lib/firmware/amd-ucode.img (loop,7)/lib/firmware/intel-ucode.img (loop,7)/initramfs.img
}
}
"
elif [ "$distro" == "chromeos-flex" ]; then
config="menuentry '$distro_name' --class '$distro' {$remove_tpm
	img_path=\"$img_path\"
	img_uuid=\"$img_uuid\"
	search --no-floppy --set=root --file \$img_path
	loopback loop \$img_path
	if [ -f (loop,7)/bootimage.cfg ]; then source (loop,7)/bootimage.cfg; fi
	if [ -z \"\$bootimage\" ]; then bootimage=A; fi
	linux (loop,12)/syslinux/vmlinuz.\$bootimage img_uuid=\$img_uuid img_path=\$img_path bootimage=\$bootimage loop.max_part=16 ro quiet splash boot=local noresume noswap loglevel=7 console= cros_efi kvm-intel.vmentry_l1d_flush=always loadpin.enabled=0 loadpin.enforce=0 rootfstype=ramfs $cmdline_extra
	initrd (loop,7)/initramfs.img (loop,7)/firmwares.img (loop,7)/modules.img
}
"
elif [ "$distro" == "nixos" ]; then
config="menuentry '$distro_name' --class '$distro' {$remove_tpm
	img_path=\"$img_path\"
	img_uuid=\"$img_uuid\"
	search --no-floppy --set=root --file \$img_path
	loopback loop \$img_path
	linuxloops_args=\"img_path=\$img_path img_uuid=\$img_uuid\"
	export linuxloops_args
	if [ -f (loop,2)/grub2/grub.cfg ]; then
		configfile (loop,2)/grub2/grub.cfg
	else
		configfile (loop,2)/grub/grub.cfg
	fi
}
"
elif [ "$distro" == "tails" ]; then
config="menuentry '$distro_name' --class '$distro' {$remove_tpm
	img_path=\"$img_path\"
	img_uuid=\"$img_uuid\"
	search --no-floppy --set=root --file \$img_path
	loopback loop \$img_path
	root_device=\"$root_device\"
	linux (loop,1)/live/vmlinuz rdinit=/linuxloops img_uuid=\$img_uuid img_path=\$img_path boot=live config \$root_device nopersistence noprompt timezone=Etc/UTC noautologin module=Tails slab_nomerge slub_debug=FZ mce=0 vsyscall=none init_on_free=1 mds=full,nosmt page_alloc.shuffle=1 quiet splash $cmdline_extra
	initrd (loop,1)/live/initrd.img (loop,1)/live/linuxloops.img
}
"
else
config="menuentry '$distro_name' --class '$distro' {$remove_tpm
	img_path=\"$img_path\"
	img_uuid=\"$img_uuid\"
	search --no-floppy --set=root --file \$img_path
	loopback loop \$img_path
	linuxloops_args=\"rdinit=/linuxloops img_path=\$img_path img_uuid=\$img_uuid\"
	export linuxloops_args
	if [ -f (loop,2)/grub2/grub.cfg ]; then
		configfile (loop,2)/grub2/grub.cfg
	else
		configfile (loop,2)/grub/grub.cfg
	fi
}
"
fi
echo -e "$config" > "$fullpath".grub.txt
chown $SUDO_UID:$SUDO_UID "$fullpath".grub.txt
if [ -f ./usb_bootloader.img ]; then
	usbboot_loop=$(losetup --show -fP ./usb_bootloader.img)
	mount "$usbboot_loop"p1 "$linuxloopsdir"/chroot
	echo -e "set timeout=5\n"> "$linuxloopsdir"/chroot/efi/boot/grub.cfg
	echo -e "$config" >> "$linuxloopsdir"/chroot/efi/boot/grub.cfg
	umount "$linuxloopsdir"/chroot
	losetup -d $usbboot_loop
	finalise="The grub config to boot $distro has been installed in the usb_bootloader.img file. Write this file to a usb flashdrive with Rufus, dd or any other image writing tool and boot from it."
	if [ ! -z "$zenity" ]; then
		sudo -u $SUDO_USER zenity --height=480 --width=640 --title="LinuxLoops installer" --info --text="$finalise" --ok-label="Exit"
	else
		echo -e "$finalise"
	fi
elif [ ! -z "$wsl" ]; then
	grubinstall="The $distro dual boot disk image has been created and the config needed to boot $distro from Grub2Win has been generated in the file:\n$(echo ${fullpath:5:1} | tr a-z A-Z):\\\\$(echo ${fullpath:7} | sed 's@\/@\\\\@g').grub.txt\n\nNow, install Grub2Win and launch it, click on \"Manage Boot Menu\" -> \"Add a new entry\" -> set \"Type\" as \"Create user section\", open the file $(echo ${fullpath:5:1} | tr a-z A-Z):\\\\$(echo ${fullpath:7} | sed 's@\/@\\\\@g').grub.txt and copy its content in the Grub2Win notepad window, save and close the Grub2Win notepad window then click \"Apply\" and \"OK\"."
	finalise="Please note that $distro will not be bootable and / or stable if you do not perform the below actions (Refer to Windows online resources if needed):\n- Ensure that bitlocker is disabled on the drive which contains the $distro image or disable it.\n- Disable fast startup.\n- Disable hibernation.\n\nOnce done, reboot your computer and select $distro from the Grub2Win menu."
	if [ ! -z "$zenity" ]; then
		sudo -u $SUDO_USER zenity --height=480 --width=640 --title="LinuxLoops installer" --info --text="$grubinstall" --ok-label="Next"
		sudo -u $SUDO_USER zenity --height=480 --width=640 --title="LinuxLoops installer" --info --text="$finalise" --ok-label="Exit"
	else
		echo -e "$grubinstall"
		echo -e ""
		echo -e "$finalise"
	fi
elif [ ! -z "$brunch" ]; then
	grubinstall="The grub config needed to boot $distro has been generated in the file \"$fullpath.grub.txt\".\n\n ****************************************************************************************** \n$config\n ****************************************************************************************** \n\nNow copy the above grub config, run \"sudo edit-brunch-config -g\" and paste it (lines between stars) at the end of the file.\n\nOnce done, press CTRL+X and then ENTER to save, reboot your computer and start $distro"
	if [ ! -z "$zenity" ]; then
		sudo -u $SUDO_USER zenity --height=480 --width=640 --title="LinuxLoops installer" --info --text="$grubinstall" --ok-label="Exit"
	else
		echo -e "$grubinstall"
	fi
elif [ ! -z "$chromeos" ]; then
	source=$(blkid --match-token LABEL=EFI-SYSTEM | head -1 | cut -d':' -f1)
	mkdir -p /mnt/stateful_partition/unencrypted/linuxloops_config/tmp
	mount "$source" /mnt/stateful_partition/unencrypted/linuxloops_config/tmp
	rm -r /mnt/stateful_partition/unencrypted/linuxloops_config/tmp/*
	curl -L https://github.com/sebanc/linuxloops/raw/main/bootloaders/chromebook_boot.tar.gz -o /home/chronos/user/Downloads/chromebook_boot.tar.gz
	tar zxf /home/chronos/user/Downloads/chromebook_boot.tar.gz -C /mnt/stateful_partition/unencrypted/linuxloops_config/tmp
	rm -f /home/chronos/user/Downloads/chromebook_boot.tar.gz
	echo -e "set timeout=5\n"> /mnt/stateful_partition/unencrypted/linuxloops_config/tmp/efi/boot/grub.cfg
	echo -e "$config" >> /mnt/stateful_partition/unencrypted/linuxloops_config/tmp/efi/boot/grub.cfg
	umount /mnt/stateful_partition/unencrypted/linuxloops_config/tmp
	grubinstall="The grub config needed to boot $distro has been added to your boot partition 12, if not already done, refer to MrChromebox instructions to allow booting from legacy hdd boot (through RW_LEGACY firmware or ALT firmware), then reboot your computer and press CTRL+L to start $distro."
	if [ ! -z "$zenity" ]; then
		sudo -u $SUDO_USER zenity --height=480 --width=640 --title="LinuxLoops installer" --info --text="$grubinstall" --ok-label="Exit"
	else
		echo -e "$grubinstall"
	fi
else
	if [ "$(grep -o '^ID=[^,]\+' /etc/os-release | cut -d'=' -f2)" == "fedora" ]; then grub="grub2"; else grub="grub"; fi
	grubinstall="The grub config needed to boot $distro has been generated in the file \"$fullpath.grub.txt\".\n\nIf you have a linux distro installed which uses grub as bootloader, open another terminal and run the below command to generate the grub config automatically:\nsudo cat /etc/grub.d/40_custom $fullpath.grub.txt | sudo tee /etc/grub.d/99_linuxloops; sudo chmod 0755 /etc/grub.d/99_linuxloops; sudo $grub-mkconfig -o /boot/$grub/grub.cfg\n\nOtherwise, add this grub config (lines between stars) manually to another grub bootloader:\n\n ****************************************************************************************** \n$config\n ****************************************************************************************** \n\nOnce the above actions are completed, you can reboot your computer and start $distro."
	if [ ! -z "$zenity" ]; then
		sudo -u $SUDO_USER zenity --height=480 --width=640 --title="LinuxLoops installer" --info --text="$grubinstall" --ok-label="Exit"
	else
		echo -e "$grubinstall"
	fi
fi
}

set_credentials()
{
if [ "$live" == "Yes" ]; then
	username="live"
	userpass="linuxloops"
	hostname="linuxloops"
elif [ "$distro" != "brunch" ] && [ "$distro" != "chromeos-flex" ] && [ "$distro" != "tails" ]; then
	if [ "$encryption" == "Yes" ]; then
		encrypted_text="You have requested encryption, please input your username and the encryption password.\nYour user account password will be set as the encryption password but you can change it later."
		password_text="encrypted partitions password"
	else
		encrypted_text="Please input your username and user account password."
		password_text="user account password"
	fi
	if [ ! -z "$zenity" ]; then
	until false; do
		form=$(sudo -u $SUDO_USER zenity --height=480 --width=640 --title="LinuxLoops installer" --forms --title="Create user" --text="$encrypted_text" --add-entry="Input your username" --add-password="Input your $password_text" --add-password="Confirm your $password_text")
		username="$(echo $form | cut -d'|' -f1)"
		userpass="$(echo $form | cut -d'|' -f2)"
		verifuserpass="$(echo $form | cut -d'|' -f3)"
		if [ -z "$form" ]; then exit 0; fi
		if [ -z "$username" ]; then sudo -u $SUDO_USER zenity --height=480 --width=640 --title="LinuxLoops installer" --error --text="Please define your username.\n"; continue; fi
		if [ -z "$userpass" ]; then sudo -u $SUDO_USER zenity --height=480 --width=640 --title="LinuxLoops installer" --error --text="Please define a password.\n"; continue; fi
		if echo "$username" | grep -q '^[a-z][-a-z0-9]*\$'; then sudo -u $SUDO_USER zenity --height=480 --width=640 --title="LinuxLoops installer" --error --text="Username contains unsupported characters.\n"; continue; fi
		if echo "$userpass" | grep -q '[^a-zA-Z0-9!@#&$£%µ^+-\*/=~¨]'; then sudo -u $SUDO_USER zenity --height=480 --width=640 --title="LinuxLoops installer" --error --text="Password contains unsupported characters.\n"; continue; fi
		if [ "$userpass" != "$verifuserpass" ]; then sudo -u $SUDO_USER zenity --height=480 --width=640 --title="LinuxLoops installer" --error --text="Passwords do not match, try again.\n"; continue; fi
		break
	done
	else
	echo -e "$encrypted_text"
	until false; do
		read -p "Please enter your username: " username
		if [ -z "$username" ]; then echo -e "Please define your username.\n\n"; continue; fi
		if echo "$username" | grep -q '^[a-z][-a-z0-9]*\$'; then echo -e "Username contains unsupported characters.\n\n"; continue; fi
		break
	done
	until false; do
		read -s -p "Input your $password_text password: " userpass
		echo ""
		read -s -p "Verify your $password_text password: " verifuserpass
		echo ""
		if [ -z "$userpass" ]; then echo -e "Please define a password.\n\n"; continue; fi
		if echo "$userpass" | grep -q '[^a-zA-Z0-9!@#&$£%µ^+-\*/=~¨]'; then echo -e "Password contains unsupported characters.\n\n"; continue; fi
		if [ "$userpass" != "$verifuserpass" ]; then echo -e "Passwords do not match, try again.\n\n"; continue; fi
		break
	done
	fi
	hostname="$distro-$RANDOM"
fi
}

install_parameters()
{
linuxloopsdir="$(eval echo ~$SUDO_USER)"/.linuxloops
mkdir -p "$linuxloopsdir"
if [ "$install_type" == "disk" ]; then
	if [ ! -z "$zenity" ]; then
		local t
		local test
		local device
		local size
		t=0
		for i in $(lsblk -drnbpf -o NAME,SIZE); do
			if [ $((t % 2)) == 0 ]; then device=$i; fi
			if [ $((t % 2)) == 1 ]; then
				size=$((i / 1024 /1024 / 1024))
				if [ ! -z "$device" ] && [ ! -z "$size" ] && [ $((size - 14)) -ge 0 ] && ! echo "$device" | grep -q "/dev/loop" && ! echo $device | grep -q $(basename $(realpath "/sys/class/block/$(lsblk -oMOUNTPOINT,PKNAME -rn | grep '/ ' | cut -d' ' -f2)/..")); then
					if [ -z "$(grep -o 'img_uuid=[^ ,]\+' /proc/cmdline | cut -d'=' -f2)" ] || ([ ! -z "$(grep -o 'img_uuid=[^ ,]\+' /proc/cmdline | cut -d'=' -f2)" ] && [ "$device" != "/dev/$(lsblk -ndo pkname $(blkid --match-token PARTUUID=$(grep -o 'img_uuid=[^ ,]\+' /proc/cmdline | cut -d'=' -f2) | cut -d':' -f1))" ]); then test="$test radio $device $size"; fi
				fi
			fi
			t=$((t + 1))
		done
		dev=$(sudo -u $SUDO_USER zenity --height=480 --width=640 --title="LinuxLoops installer" --list --radiolist --text "Select the drive that you want to use for installation." --column "Select" --column "Device" --column "Size (in GB)" $test --ok-label="Next")
		if [ -z "$dev" ]; then exit 1; else destination="$dev"; fi
		fullpath="$destination"
		install_size=$(sudo -u $SUDO_USER zenity --height=480 --width=640 --title="LinuxLoops installer" --scale --text "This device has $(( ($(lsblk -drnbpf -o SIZE $destination) / 1024 /1024 / 1024) )) GB available.\n How much would you like to allocate for $distro ?\n" --min-value=14 --max-value=$(( ($(lsblk -drnbpf -o SIZE $destination) / 1024 /1024 / 1024) )) --value=14 --step 1)
		if [ -z "$install_size" ]; then exit 1; fi
		if [ "$install_size" -eq $(( ($(lsblk -drnbpf -o SIZE $destination) / 1024 /1024 / 1024) )) ]; then install_sizeMB=$(( ($(lsblk -drnbpf -o SIZE $destination) / 1024 /1024) )); else install_sizeMB=$((install_size*1024)); fi
		if [ "$distro" != "brunch" ] && [ "$distro" != "chromeos-flex" ] && [ "$distro" != "tails" ]; then
			if [ -z "$fstype" ] && [ ! -z "$(echo $btrfs_supported | grep -w $distro)" ] && [ ! -z $(command -v btrfs) ] && [ ! -z $(command -v mkfs.btrfs) ]; then fstype=$(sudo -u $SUDO_USER zenity --height=480 --width=640 --title="LinuxLoops installer" --list --text "Which filesystem format would you like for the rootfs partition ?" --column "Filesystem" "ext4" "btrfs" --ok-label="Next"); else fstype="ext4"; fi
			if [ -z "$encryption" ] && [ ! -z $(command -v cryptsetup) ]; then encryption=$(sudo -u $SUDO_USER zenity --height=480 --width=640 --title="LinuxLoops installer" --list --text "Do you want the image to be encrypted ? This is highly recommended if you intend to keep sensitive data in it, however it will slightly impacts performance." --column "Encryption" "Yes" "No" --ok-label="Next"); else encryption="No"; fi
			if [ -z "$encryption" ]; then exit 1; fi
			if [ -z "$swap_size" ]; then swap_size=$(sudo -u $SUDO_USER zenity --height=480 --width=640 --title="LinuxLoops installer" --scale --text "Please select here the swap size (swap is not mandatory, if you do not know what swap is you can select 0).\n" --min-value=0 --max-value=$(( $install_size - 12 )) --value=0 --step 1); fi
			if [ -z "$swap_size" ]; then exit 1; fi
			if [ ! -z "$(echo $nvidia_supported | grep -w $distro)" ]; then nvidia=$(sudo -u $SUDO_USER zenity --height=480 --width=640 --title="LinuxLoops installer" --list --text "Do you want to automatically install the nvidia proprietary drivers ?" --column "Install nvidia driver" "No" "Yes" --ok-label="Next"); else nvidia="No"; fi
			if [ -z "$nvidia" ]; then exit 1; fi
			if [ ! -z "$(echo $surface_supported | grep -w $distro)" ]; then surface=$(sudo -u $SUDO_USER zenity --height=480 --width=640 --title="LinuxLoops installer" --list --text "Do you want to automatically install the surface device patches from https://github.com/linux-surface ? (enable this only if you have a Microsoft Surface device)" --column "Apply Surface patches" "No" "Yes" --ok-label="Next"); else surface="No"; fi
			if [ -z "$surface" ]; then exit 1; fi
		else
			encryption="No"
			swap_size=0
			surface="No"
		fi
	else
		if [ -z "$destination" ]; then echo "The -dst argument has not been specified."; exit 1; fi
		if [ ! -b "$destination" ]; then echo "Disk $destination was not found."; exit 1; fi
		if [ ! "$(lsblk $destination -nd -o TYPE)" == "disk" ]; then echo "Linuxloops can only be installed on a full disk."; exit 1; fi
		fullpath="$destination"
		if [ ! -z "$install_size" ]; then if [ $(( ($(lsblk -drnbpf -o SIZE "$destination") / 1024 /1024 / 1024) )) -lt "$install_size" ]; then echo "You have requested an install size of $install_size GB but this device only has $(( ($(lsblk -drnbpf -o SIZE $destination) / 1024 /1024 / 1024) ))GB available."; exit 1; fi; fi
		if [ -z "$install_size" ]; then install_sizeMB=$(( ($(lsblk -drnbpf -o SIZE "$destination") / 1024 /1024) )); else install_sizeMB=$((install_size*1024)); fi
		if [ "$swap_size" -gt 0 ] && [ $(( install_size - swap_size )) -lt 12 ]; then echo "At least 12 GB should be available for the main partition, please increase the image size or reduce the swap size."; exit 1; fi
		if [ "$fstype" == "btrfs" ] && [ -z "$(echo $btrfs_supported | grep -w $distro)" ]; then echo "btrfs is not available for this distro, supported distros are: $btrfs_supported."; exit 1; fi
		if [ "$nvidia" == "Yes" ] && [ -z "$(echo $nvidia_supported | grep -w $distro)" ]; then echo "nvidia driver is not available for this distro, supported distros are: $nvidia_supported."; exit 1; fi
		if [ "$surface" == "Yes" ] && [ -z "$(echo $surface_supported | grep -w $distro)" ]; then echo "Surface patches are not available for this distro, supported distros are: $surface_supported."; exit 1; fi
	fi
else
	if [ ! -z "$zenity" ]; then
		local path
		if [ ! -z "$wsl" ]; then
			path=$(sudo -u $SUDO_USER zenity --height=480 --width=640 --title="LinuxLoops installer - Select the path to store the $distro disk image" --file-selection --save --file-filter=*.img --filename="/mnt/c/Users/$(echo $(/mnt/c/Windows/System32/cmd.exe /c echo %username% 2> /dev/null) | sed 's/[^a-zA-Z0-9]//g')/$distro.img")
		elif [ ! -z "$chromeos" ] || [ ! -z "$brunch" ]; then
			path=$(sudo -u $SUDO_USER zenity --height=480 --width=640 --title="LinuxLoops installer - Select the path to store the $distro disk image" --file-selection --save --file-filter=*.img --filename="/mnt/stateful_partition/unencrypted/$distro.img")
		else
			path=$(sudo -u $SUDO_USER zenity --height=480 --width=640 --title="LinuxLoops installer - Select the path to store the $distro disk image" --file-selection --save --file-filter=*.img --filename="$(eval echo ~$SUDO_USER)/$distro.img")
		fi
		if [ -z "$path" ]; then exit 1; else destination="$path"; fi
		if [[ "$destination" == *"/"* ]] && ([ -z "$(realpath $destination 2> /dev/null)" ] || [ ! -d "$(echo $(realpath $destination) | sed 's@[^/]*$@@')" ]); then sudo -u $SUDO_USER zenity --height=480 --width=640 --title="LinuxLoops installer" --error --text="Desination path does not exist, please provide an existing path."; install_parameters; return; fi
		rm -f "$destination" "$destination".der "$destination".grub.txt
		sync
		if [[ ! $destination == *"/"* ]]; then path="$PWD/"; else path="$(realpath "$destination")"; path="$(echo ${path} | sed 's@[^/]*$@@')"; fi
		fullpath="$path$(basename $destination)"
		if [ ! -z "$wsl" ] && [ ! -z "${path##/mnt/*/*}" ]; then sudo -u $SUDO_USER zenity --height=480 --width=640 --title="LinuxLoops installer" --error --text="The $distro disk image has to be installed outside of the WSL VM, please specify a path such as /mnt/\&lt;drive letter\&gt;/..."; install_parameters; return; fi
		if ([ ! -z "$chromeos" ] || [ ! -z "$brunch" ]) && [ ! -z "${path##/mnt/stateful_partition/unencrypted/*}" ]; then sudo -u $SUDO_USER zenity --height=480 --width=640 --title="LinuxLoops installer" --error --text="The $distro disk image has to be installed in the unencrypted data partition, please specify a path such as /mnt/stateful_partition/unencrypted/..."; install_parameters; return; fi
		if [ $(( ($(df -k --output=avail "$path" | sed 1d) / 1024 / 1024) - 14 )) -lt 0 ]; then
			sudo -u $SUDO_USER zenity --height=480 --width=640 --title="LinuxLoops installer" --error --text="Not enough space to create image file, the minimum size is 14 GB. Verify that the path you have selected points to a partition with more than 14GB available."
			install_parameters
			return
		elif [ $(( ($(df -k --output=avail "$path" | sed 1d) / 1024 / 1024) - 14 )) -eq 0 ]; then
			sudo -u $SUDO_USER zenity --height=480 --width=640 --title="LinuxLoops installer" --info --text="Exactly 14GB is available on this drive, the installer will proceed with the creation of a 14GB image." --ok-label="Next"
			install_size=14
		else
			install_size=$(sudo -u $SUDO_USER zenity --height=480 --width=640 --title="LinuxLoops installer" --scale --text "This partition has $(( ($(df -k --output=avail $path | sed 1d) / 1024 / 1024) )) GB available.\n How much would you like to allocate for $distro ?\n" --min-value=14 --max-value=$(( ($(df -k --output=avail $path | sed 1d) / 1024 / 1024) )) --value=14 --step 1)
		fi
		if [ -z "$install_size" ]; then exit 1; fi
		install_sizeMB=$((install_size*1024))
		if [ "$distro" != "brunch" ] && [ "$distro" != "chromeos-flex" ] && [ "$distro" != "tails" ]; then
			if [ -z "$fstype" ] && [ ! -z "$(echo $btrfs_supported | grep -w $distro)" ] && [ ! -z $(command -v btrfs) ] && [ ! -z $(command -v mkfs.btrfs) ]; then fstype=$(sudo -u $SUDO_USER zenity --height=480 --width=640 --title="LinuxLoops installer" --list --text "Which filesystem format would you like for the rootfs partition ?" --column "Filesystem" "ext4" "btrfs" --ok-label="Next"); else fstype="ext4"; fi
			if [ -z "$encryption" ] && [ ! -z $(command -v cryptsetup) ]; then encryption=$(sudo -u $SUDO_USER zenity --height=480 --width=640 --title="LinuxLoops installer" --list --text "Do you want the image to be encrypted ? This is highly recommended if you intend to keep sensitive data in it, however it will slightly impacts performance." --column "Encryption" "Yes" "No" --ok-label="Next"); else encryption="No"; fi
			if [ -z "$encryption" ]; then exit 1; fi
			if [ -z "$swap_size" ]; then swap_size=$(sudo -u $SUDO_USER zenity --height=480 --width=640 --title="LinuxLoops installer" --scale --text "Please select here the swap size (swap is not mandatory, if you do not know what swap is you can select 0).\n" --min-value=0 --max-value=$(( $install_size - 12 )) --value=0 --step 1); fi
			if [ -z "$swap_size" ]; then exit 1; fi
			if [ ! -z "$(echo $nvidia_supported | grep -w $distro)" ]; then nvidia=$(sudo -u $SUDO_USER zenity --height=480 --width=640 --title="LinuxLoops installer" --list --text "Do you want to automatically install the nvidia proprietary drivers ?" --column "Install nvidia driver" "No" "Yes" --ok-label="Next"); else nvidia="No"; fi
			if [ -z "$nvidia" ]; then exit 1; fi
			if [ ! -z "$(echo $surface_supported | grep -w $distro)" ]; then surface=$(sudo -u $SUDO_USER zenity --height=480 --width=640 --title="LinuxLoops installer" --list --text "Do you want to automatically install the surface device patches from https://github.com/linux-surface ? (enable this only if you have a Microsoft Surface device)" --column "Apply Surface patches" "No" "Yes" --ok-label="Next"); else surface="No"; fi
			if [ -z "$surface" ]; then exit 1; fi
		else
			encryption="No"
			swap_size=0
			surface="No"
		fi
	else
		if [ -z "$destination" ]; then echo "The -dst argument has not been specified."; fi
		if [ "$swap_size" -gt 0 ] && [ $(( install_size - swap_size )) -lt 12 ]; then echo "At least 12 GB should be available for the main partition, please increase the image size or reduce the swap size."; exit 1; fi
		if [[ "$destination" == *"/"* ]] && ([ -z "$(realpath $destination 2> /dev/null)" ] || [ ! -d "$(echo $(realpath $destination) | sed 's![^/]*$!!')" ]); then echo "Desination path does not exist, please provide an existing path."; exit 1; fi
		rm -f "$destination" "$destination".der "$destination".grub.txt
		sync
		if [[ ! "$destination" == *"/"* ]]; then path="$PWD/"; else path="$(echo $(realpath $destination) | sed 's![^/]*$!!')"; fi
		fullpath="$path$(basename $destination)"
		if [ ! -z "$wsl" ] && [ ! -z "${path##/mnt/*}" ]; then echo "The $distro disk image has to be installed outside of the WSL VM, please specify a path such as /mnt/<drive letter>/..."; exit 1; fi
		if [ ! -z "$chromeos" ] || [ ! -z "$brunch" ] && [ ! -z "${path##/mnt/stateful_partition/unencrypted/*}" ]; then echo "The $distro disk image has to be installed in the unencrypted data partition, please specify a path such as /mnt/stateful_partition/unencrypted/..."; exit 1; fi
		if [ $(( ($(df -k --output=avail "$path" | sed 1d) / 1024 / 1024) - $install_size )) -lt 0 ]; then echo "Not enough space to create image file, available space is $(( ($(df -k --output=avail $path | sed 1d) / 1024 / 1024) )) GB. If you think that this is incorrect, verify that you have correctly mounted the destination partition or if the partition is in ext4 format that there is no reserved space (cf. https://odzangba.wordpress.com/2010/02/20/how-to-free-reserved-space-on-ext4-partitions)"; exit 1; else install_sizeMB=$((install_size*1024)); fi
		if [ "$fstype" == "btrfs" ] && [ -z "$(echo $btrfs_supported | grep -w $distro)" ]; then echo "btrfs is not available for this distro, supported distros are: $btrfs_supported."; exit 1; fi
		if [ "$nvidia" == "Yes" ] && [ -z "$(echo $nvidia_supported | grep -w $distro)" ]; then echo "nvidia driver is not available for this distro, supported distros are: $nvidia_supported."; exit 1; fi
		if [ "$surface" == "Yes" ] && [ -z "$(echo $surface_supported | grep -w $distro)" ]; then echo "Surface patches are not available for this distro, supported distros are: $surface_supported."; exit 1; fi
	fi
fi
set_credentials
if [ ! -z "$zenity" ]; then
	if [ "$install_type" == "disk" ]; then if ! sudo -u $SUDO_USER zenity --height=480 --width=640 --title="LinuxLoops installer" --question --text="WARNING: All data on device $destination will be erased, are you sure you want to continue ?"; then exit 1; fi; fi
	start_install >(sudo -u $SUDO_USER zenity --height=480 --width=640 --title="LinuxLoops installer" --progress --auto-close --pulsate --text="Installing $distro with $desktop environment.\nYou can follow the install process in the terminal window." --percentage=100) || exit_with_error "Failed to install $distro in chroot."
else
	if [ "$install_type" == "disk" ]; then
		read -p "WARNING: All data on device $destination will be erased, are you sure you want to continue ? (type yes to continue)"$'\n' confirm
		if [ -z $confirm ] || [ ! $confirm == "yes" ]; then echo "Invalid answer $confirm, exiting"; exit 1; fi
	fi
	start_install || exit_with_error "Failed to install $distro in chroot."
fi
if [ "$install_type" == "disk" ]; then
	install_finished="Linuxloops installation process is finished.\nYou can now reboot your computer and start $distro by selecting your device in the UEFI boot menu."
	if [ ! -z "$zenity" ]; then
		sudo -u $SUDO_USER zenity --height=480 --width=640 --title="LinuxLoops installer" --info --text="$install_finished" --ok-label="Exit"
	else
		echo -e "$install_finished"
	fi
else
	grub_config
fi
}

check_home_space()
{
case "$distro" in
	'brunch')
		available_space_needed=7
	;;
	'chromeos-flex')
		available_space_needed=7
	;;
	'tails')
		available_space_needed=4
	;;
	*)
		available_space_needed=1
	;;
esac
if [ $(( ($(df -k --output=avail $HOME | sed 1d) / 1024 / 1024) - $available_space_needed )) -lt 0 ]; then
	if [ ! -z "$zenity" ]; then
		sudo -u $SUDO_USER zenity --height=480 --width=640 --title="LinuxLoops installer" --error --text "To install $distro you need $available_space_needed GB of available space in your home directory but you only have $(($(df -k --output=avail $HOME | sed 1d) / 1024 / 1024)) GB."
	else
		echo -e "To install $distro you need $available_space_needed GB of available space in your home directory but you only have $(($(df -k --output=avail $HOME | sed 1d) / 1024 / 1024)) GB."
	fi
	exit 1
fi
}

check_parameters()
{
if [ -z "$destination" ]; then echo -e "Please provide a destination path for the image with \"-dst\" or \"--destination\" argument.\n"; exit 1; fi
if [ -z "$distro" ] || [ -z "$(echo $available_distros | sed -e 's@ @\n@g' | grep -x $distro)" ]; then echo -e "Please select a distro from the below list:\n$available_distros.\n"; exit 1; fi
check_home_space
list_desktops "$distro"
if [ -z "$desktop" ]; then echo -e "Please select an environment from the below list:\n$available_desktops.\n"; exit 1; fi
if [ ! -z "$desktop" ] && [ -z "$(echo $available_desktops | sed -e 's@ @\n@g' | grep -x $desktop)" ]; then echo -e "$desktop desktop environment is not available, please choose from:\n$available_desktops.\n"; exit 1; fi
if [ "$nvidia" == "Yes" ] && [ -z "$(echo $nvidia_supported | sed -e 's@ @\n@g' | grep -x $distro)" ]; then echo -e "nvidia drivers are currently only supported with: \n$nvidia_supported.\n"; exit 1; fi
if [ "$surface" == "Yes" ] && [ -z "$(echo $surface_supported | sed -e 's@ @\n@g' | grep -x $distro)" ]; then echo -e "Linux Surface patches are currently only supported with: \n$surface_supported.\n"; exit 1; fi
if [ "$distro" == "brunch" ] || [ "$distro" == "chromeos-flex" ] || [ "$distro" == "tails" ]; then
	if [ "$encryption" == "Yes" ]; then echo -e "rootfs encryption is not supported with $distro but user data will be encrypted by default.\n"; exit 1; fi
	if [ ! -z "$swap_size" ]; then echo -e "Swap cannot be enabled by design with $distro.\n"; exit 1; fi
fi
if [ -z "$swap_size" ] || [ "$swap_size" -lt 0 ]; then swap_size=0; fi
if [ "$install_type" == "image" ] && [ -z "$install_size" ]; then install_size=14; fi
if ! curl --output /dev/null --silent --head --fail --doh-url https://1.1.1.1/dns-query?name=cloudflare.com https://uk.lxd.images.canonical.com; then echo -e "Linuxloops cannot connect to the lxc server, please make sure you are connected to the internet."; exit 1; fi
if [ "$install_type" == "disk" ] && [ ! -d /sys/firmware/efi ]; then echo "Disk installs are possible when booted in UEFI mode."; exit 1; fi
}

check_dependencies()
{
if ( ! test -z {,} ); then echo "Linuxloops must be ran with \"bash\"."; exit 1; fi
if [ -z $(command -v curl) ]; then echo "\"curl\" program needs to be installed first."; exit 1; fi
if [ -z $(command -v fdisk) ]; then echo "\"fdisk\" program needs to be installed first."; exit 1; fi
if [ -z $(command -v losetup) ]; then echo "\"losetup\" program needs to be installed first."; exit 1; fi
if [ -z $(command -v tar) ]; then echo "\"tar\" program needs to be installed first."; exit 1; fi
if [ -z $(command -v xz) ]; then echo "\"xz\" program needs to be installed first."; exit 1; fi
if [ $(whoami) != "root" ]; then echo "Please run with this script with sudo."; exit 1; fi
if [ -z $(command -v efibootmgr) ]; then echo "Warning: \"efibootmgr\" not found, if you are installing a distro on a hdd the efi boot entries will not be automatically created."; fi
}

if [ -z "$CUSTOM_LOCALE" ]; then CUSTOM_LOCALE="en_US.UTF-8 UTF-8"; fi
if [ -z "$CUSTOM_KEYMAP" ]; then CUSTOM_KEYMAP="us"; fi
if [ -z "$CUSTOM_TIMEZONE" ]; then CUSTOM_TIMEZONE="UTC"; fi
if grep -qi 'Microsoft' /proc/version; then wsl=1; fi
if [ "$(grep -o 'NAME=[^,]\+' /etc/os-release | cut -d'=' -f2)" == "Chrome OS" ]; then if [ -f /etc/brunch_version ]; then brunch=1; else chromeos=1; fi; fi
if [ $# -eq 0 ]; then
	check_dependencies
	if [ -z $(command -v zenity) ]; then echo "To use the GUI installer you need to install the \"zenity\" binary package."; usage; exit 1; fi
	zenity=1
	if ! curl --output /dev/null --silent --head --fail --doh-url https://1.1.1.1/dns-query?name=cloudflare.com https://uk.lxd.images.canonical.com; then sudo -u $SUDO_USER zenity --height=480 --width=640 --title="LinuxLoops installer" --error --text "Linuxloops cannot connect to the lxc server, please make sure you have internet connectivity."; exit 1; fi
	if [ -z $(command -v cryptsetup) ]; then warning="${warning}WARNING: \"cryptsetup\" binary not found, encryption will not be available.\n\n"; fi
	if [ -z $(command -v btrfs) ] || [ -z $(command -v mkfs.btrfs) ]; then warning="${warning}WARNING: \"btrfs\" binary not found, btrfs filesystem will not be supported.\n\n"; fi
	if [ -z $(command -v efibootmgr) ]; then warning="${warning}WARNING: \"efibootmgr\" not found, if you are installing a distro on a hdd the efi boot entries will not be automatically created.\n\n"; fi
	if ! sudo -u $SUDO_USER zenity --height=480 --width=640 --title="LinuxLoops installer" --info --text="Welcome to the LinuxLoops installer.\n\n$warning" --ok-label="Next"; then exit 0; fi
	distro=$(sudo -u $SUDO_USER zenity --height=480 --width=640 --title="LinuxLoops installer" --list --text "Which Linux distribution do you want to install ?" --column "Distribution" $available_distros)
	if [ -z "$distro" ]; then exit 0; fi
	check_home_space
	list_desktops $distro
	desktop=$(sudo -u $SUDO_USER zenity --height=480 --width=640 --title="LinuxLoops installer" --list --text "Which desktop environment do you want to install ?" --column "Desktop environment" $available_desktops)
	if [ -z "$desktop" ]; then exit 0; fi
	if [ -z "$wsl" ]; then install_type=$(sudo -u $SUDO_USER zenity --height=480 --width=640 --title="LinuxLoops installer" --list --text "Do you want to install $distro on a disk or in an image file ?" --column "Choose install type" "disk" "image" --ok-label="Next"); else install_type="image"; fi
	if [ "$install_type" == "disk" ] && [ ! -d /sys/firmware/efi ]; then sudo -u $SUDO_USER zenity --height=480 --width=640 --title="LinuxLoops installer" --error --text "Disk installs are possible when booted in UEFI mode."; exit 1; fi
	if [ -z "$install_type" ]; then exit 1; fi
else
	while [ $# -gt 0 ]; do
		case "$1" in
			-distro | --distribution)
				shift
				distro="$1"
			;;
			-env | --environment)
				shift
				desktop="$1"
			;;
			-dst | --destination)
				shift
				if [ -z "${1##/dev/*}" ]; then install_type="disk"; else install_type="image"; fi
				destination="$1"
			;;
			-s | --size)
				shift
				if [ -z "${1##*[!0-9]*}" ] ; then
					echo "Provided disk image size is not numeric: $1"
					exit 1
				else
					if [ $1 -lt 14 ] ; then
						echo "Disk image size cannot be lower than 14 GB"
						exit 1
					fi
				fi
				install_size=$1
			;;
			-z | --swapsize)
				shift
				if [ -z "${1##*[!0-9]*}" ] ; then
					echo "Provided swap size is not numeric: $1"
					exit 1
				fi
				swap_size=$1
			;;
			-b | --btrfs)
				if [ -z $(command -v btrfs) ] || [ -z $(command -v mkfs.btrfs) ]; then echo "\"btrfs\" binary needs to be installed for btrfs filesystem support."; exit 1; fi
				fstype="btrfs"
			;;
			-e | --encrypt)
				if [ -z $(command -v cryptsetup) ]; then echo "\"cryptsetup\" binary needs to be installed for encryption support."; exit 1; fi
				encryption="Yes"
			;;
			-n | --nvidia)
				nvidia="Yes"
			;;
			-S | --surface)
				surface="Yes"
			;;
			-l | --list)
				list_all
				exit 0
			;;
			-L | --live)
				live="Yes"
			;;
			-h | --help)
				usage
				exit 0
			;;
			*)
				echo "$1 argument is not valid"
				usage
				exit 1
		esac
		shift
	done
	check_dependencies
	check_parameters
fi
install_parameters
