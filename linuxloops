#!/bin/bash

usage()
{
cat << USAGE
LinuxLoops: Flexible linux distro installer.
Usage: sudo bash linuxloops -distro <distribution name> -env <desktop environment> -dst <disk name or disk image path> [-s <total install size>] [-z <swap size>] [-b] [-e] [-L <locale>] [-K <keymap>] [-T <timezone>] [-n] [-S] [-c <custom_packages_list>] [-C <custom_script_path>] [-k <kernel_parameters_list>]
-distro, --distribution <distribution name>			(Distribution to install)
-env, --environment <desktop environment>			(Desktop environment to install)
-dst, --destination <disk name or disk image path>		(e.g. /dev/sda or /ubuntu.img)
-s, --size <total install size>					(number in GB, minimum 14GB)
-z, --swapsize <swap size>					(number in GB)
-b, --btrfs							(Use btrfs for the root filesystem)
-e, --encrypt							(Encrypt the root filesystem)
-L, --locale <locale>						(specify locale to be used, by default "en_US")
-K, --keymap <keymap>						(specify keymap to be used, by default "us")
-T, --timezone <timezone>					(specify timezone to be used, by default "UTC")
-n, --nvidia							(Install nvidia drivers)
-S, --surface							(Add patches for Surface devices from github.com/linux-surface)
-c, --custom-packages						(list of additional packages to be installed - space separated)
-C, --custom-script						(bash script that should be run at the end of the install process)
-k, --kernel-parameters						(specific kernel parameters to be applied - space separated)
-l, --list							(List available distros and desktop environments)
-ll, --list-locales						(List available locales)
-lk, --list-keymaps						(List available keymaps)
-lt, --list-timezones						(List available locales)
-h, --help							(Display this menu)
USAGE
}

available_distros=("AlmaLinux" "Arch" "Artix" "Brunch" "ChromeOS-Flex" "Debian" "Devuan" "Elementary" "Fedora" "Gentoo-openrc" "Gentoo-systemd" "Kali" "LMDE" "Manjaro" "Linuxmint" "MX" "Neon" "NixOS" "openSUSE" "Parrot" "Pop" "Proxmox" "Qubes" "RockyLinux" "SteamOS" "Tails" "Ubuntu" "Ubuntu-LTS" "VoidLinux" "Zorin")
btrfs_supported=("Arch" "Artix" "Debian" "Devuan" "Elementary" "Fedora" "Gentoo-openrc" "Gentoo-systemd" "Kali" "LMDE" "Manjaro" "Linuxmint" "MX" "Neon" "NixOS" "openSUSE" "Parrot" "Pop" "Proxmox" "SteamOS" "Qubes" "Ubuntu" "Ubuntu-LTS" "VoidLinux" "Zorin")
nvidia_supported=("Arch" "Artix" "Debian" "Devuan" "Elementary" "Fedora" "Gentoo-openrc" "Gentoo-systemd" "Kali" "LMDE" "Manjaro" "Linuxmint" "MX" "Neon" "NixOS" "openSUSE" "Parrot" "Pop" "Proxmox" "SteamOS" "Qubes" "Ubuntu" "Ubuntu-LTS" "VoidLinux" "Zorin")
surface_supported=("Arch" "Debian" "Elementary" "Fedora" "Kali" "Manjaro" "Linuxmint" "MX" "Neon" "Proxmox" "SteamOS" "Ubuntu" "Ubuntu-LTS" "Zorin")

list_desktops()
{
case "${1}" in
	'AlmaLinux')
	available_desktops=("none" "full")
	bootstrap="lxc almalinux 9 default"
	bootloader_id="almalinux"
	bootloader_name="shimx64.efi"
	;;
	'Arch')
	available_desktops=("none" "budgie" "cinnamon" "deepin" "deepin-full" "enlightenment" "gnome" "gnome-full" "i3" "kde" "kde-full" "lxde" "lxde-full" "lxqt" "lxqt-full" "mate" "mate-full" "xfce" "xfce-full")
	bootstrap="lxc archlinux current default"
	bootloader_id="arch"
	bootloader_name="shimx64.efi"
	;;
	'Artix')
	available_desktops=("none" "budgie" "cinnamon" "deepin" "deepin-full" "enlightenment" "gnome" "gnome-full" "i3" "kde" "kde-full" "lxde" "lxde-full" "lxqt" "lxqt-full" "mate" "mate-full" "xfce" "xfce-full")
	bootstrap="lxc archlinux current default"
	bootloader_id="artix"
	bootloader_name="shimx64.efi"
	;;
	'Brunch')
	available_desktops=("stable-shyvana" "stable-jinlon" "stable-voxel" "stable-gumboz" "unstable-shyvana" "unstable-jinlon" "unstable-voxel" "unstable-gumboz")
	bootstrap="lxc archlinux current default"
	bootloader_id="boot"
	bootloader_name="bootx64.efi"
	;;
	'ChromeOS-Flex')
	available_desktops=("full" "full-devmode")
	bootstrap="lxc archlinux current default"
	bootloader_id="boot"
	bootloader_name="bootx64.efi"
	;;
	'Debian')
	available_desktops=("none" "budgie" "cinnamon" "cinnamon-full" "enlightenment" "gnome" "gnome-full" "kde" "kde-full" "lxde" "lxde-full" "lxqt" "lxqt-full" "mate" "mate-full" "xfce" "xfce-full")
	bootstrap="lxc debian bookworm default"
	bootloader_id="debian"
	bootloader_name="shimx64.efi"
	;;
	'Devuan')
	available_desktops=("none" "budgie" "cinnamon" "cinnamon-full" "enlightenment" "gnome" "gnome-full" "kde" "kde-full" "lxde" "lxde-full" "lxqt" "lxqt-full" "mate" "mate-full" "xfce" "xfce-full")
	bootstrap="lxc devuan daedalus default"
	bootloader_id="debian"
	bootloader_name="shimx64.efi"
	;;
	'Elementary')
	available_desktops=("none" "full")
	bootstrap="lxc ubuntu jammy default"
	bootloader_id="ubuntu"
	bootloader_name="shimx64.efi"
	;;
	'Fedora')
	available_desktops=("none" "cinnamon" "cinnamon-full" "gnome" "gnome-full" "kde" "kde-full" "lxde" "lxqt" "mate" "mate-full" "xfce" "xfce-full")
	bootstrap="lxc fedora 38 default"
	bootloader_id="fedora"
	bootloader_name="shimx64.efi"
	;;
	'Gentoo-openrc')
	available_desktops=("none" "cinnamon" "enlightenment" "gnome" "kde" "lxqt" "mate" "xfce")
	bootstrap="lxc archlinux current default"
	bootloader_id="boot"
	bootloader_name="bootx64.efi"
	;;
	'Gentoo-systemd')
	available_desktops=("none" "cinnamon" "enlightenment" "gnome" "kde" "lxqt" "mate" "xfce")
	bootstrap="lxc archlinux current default"
	bootloader_id="boot"
	bootloader_name="bootx64.efi"
	;;
	'Kali')
	available_desktops=("none" "budgie" "budgie-full" "cinnamon" "cinnamon-full" "enlightenment" "enlightenment-full" "gnome" "gnome-full" "i3" "i3-full" "kde" "kde-full" "lxde" "lxde-full" "mate" "mate-full" "xfce" "xfce-full")
	bootloader_id="kali"
	bootloader_name="grubx64.efi"
	grub_theme="/boot/grub/themes/kali/theme.txt"
	bootstrap="lxc kali current default"
	;;
	'LMDE')
	available_desktops=("none" "cinnamon" "cinnamon-full")
	bootstrap="lxc debian bullseye default"
	bootloader_id="linuxmint"
	bootloader_name="shimx64.efi"
	grub_theme="/boot/grub/themes/linuxmint/theme.txt"
	;;
	'Manjaro')
	available_desktops=("none" "budgie" "cinnamon" "deepin" "enlightenment" "gnome" "gnome-full" "kde" "kde-full" "lxde" "lxqt" "mate" "mate-full" "xfce" "xfce-full")
	bootstrap="lxc archlinux current default"
	bootloader_id="manjaro"
	bootloader_name="shimx64.efi"
	;;
	'Mint')
	available_desktops=("none" "cinnamon" "cinnamon-full" "mate" "mate-full" "xfce" "xfce-full")
	bootstrap="lxc ubuntu jammy default"
	bootloader_id="linuxmint"
	bootloader_name="shimx64.efi"
	grub_theme="/boot/grub/themes/linuxmint/theme.txt"
	;;
	'MX')
	available_desktops=("none" "budgie" "cinnamon" "cinnamon-full" "enlightenment" "gnome" "gnome-full" "kde" "kde-full" "lxde" "lxde-full" "lxqt" "lxqt-full" "mate" "mate-full" "xfce" "xfce-full")
	bootstrap="lxc debian bookworm default"
	bootloader_id="debian"
	bootloader_name="shimx64.efi"
	;;
	'Neon')
	available_desktops=("none" "essentials" "full")
	bootstrap="lxc ubuntu jammy default"
	bootloader_id="neon"
	bootloader_name="shimx64.efi"
	grub_theme="/boot/grub/themes/breeze/theme.txt"
	;;
	'NixOS')
	available_desktops=("none" "budgie-full" "cinnamon-full" "deepin-full" "gnome-full" "kde-full" "lxqt-full" "mate-full" "pantheon-full" "xfce-full")
	bootstrap="lxc archlinux current default"
	bootloader_id="nixos"
	bootloader_name="grubx64.efi"
	;;
	'openSUSE')
	available_desktops=("none" "budgie" "budgie-full" "cinnamon" "cinnamon-full" "deepin" "deepin-full" "enlightenment" "enlightenment-full" "gnome" "gnome-full" "kde" "kde-full" "lxde" "lxde-full" "lxqt" "lxqt-full" "mate" "mate-full" "xfce" "xfce-full")
	bootstrap="lxc opensuse tumbleweed default"
	bootloader_id="opensuse"
	bootloader_name="shim.efi"
	;;
	'Parrot')
	available_desktops=("none" "budgie" "budgie-full" "cinnamon" "cinnamon-full" "enlightenment" "enlightenment-full" "gnome" "gnome-full" "i3" "i3-full" "kde" "kde-full" "lxde" "lxde-full" "mate" "mate-full" "xfce" "xfce-full")
	bootstrap="lxc debian bullseye default"
	bootloader_id="parrot"
	bootloader_name="grubx64.efi"
	;;
	'Pop')
	available_desktops=("none" "full")
	bootstrap="lxc ubuntu jammy default"
	bootloader_id="pop"
	bootloader_name="shimx64.efi"
	;;
	'Proxmox')
	available_desktops=("none" "budgie" "cinnamon" "cinnamon-full" "enlightenment" "gnome" "gnome-full" "kde" "kde-full" "lxde" "lxde-full" "lxqt" "lxqt-full" "mate" "mate-full" "xfce" "xfce-full")
	bootstrap="lxc debian bookworm default"
	bootloader_id="proxmox"
	bootloader_name="shimx64.efi"
	;;
	'Qubes')
	available_desktops=("full")
	bootstrap="iso https://ftp.qubes-os.org/iso/Qubes-R4.1.2-x86_64.iso /LiveOS/squashfs.img /LiveOS/rootfs.img"
	bootloader_id="qubes"
	bootloader_name="xen.efi"
	;;
	'RockyLinux')
	available_desktops=("none" "full")
	bootstrap="lxc rockylinux 9 default"
	bootloader_id="rocky"
	bootloader_name="shimx64.efi"
	;;
	'SteamOS')
	available_desktops=("none" "full" "full-autologin")
	bootstrap="lxc archlinux current default"
	bootloader_id="steamos"
	bootloader_name="shimx64.efi"
	;;
	'Tails')
	available_desktops=("full")
	bootstrap="lxc archlinux current default"
	bootloader_id="boot"
	bootloader_name="bootx64.efi"
	;;
	'Ubuntu')
	available_desktops=("none" "budgie" "budgie-full" "cinnamon" "cinnamon-full" "enlightenment" "gnome" "gnome-full" "kde" "kde-full" "lxde" "lxde-full" "lxqt" "lxqt-full" "mate" "mate-full" "studio-full" "ubuntu" "ubuntu-full" "unity" "unity-full" "xfce" "xfce-full")
	bootstrap="lxc ubuntu lunar default"
	bootloader_id="ubuntu"
	bootloader_name="shimx64.efi"
	;;
	'Ubuntu-LTS')
	available_desktops=("none" "budgie" "budgie-full" "cinnamon" "cinnamon-full" "enlightenment" "gnome" "gnome-full" "kde" "kde-full" "lxde" "lxde-full" "lxqt" "lxqt-full" "mate" "mate-full" "studio-full" "ubuntu" "ubuntu-full" "xfce" "xfce-full")
	bootstrap="lxc ubuntu jammy default"
	bootloader_id="ubuntu"
	bootloader_name="shimx64.efi"
	;;
	'VoidLinux')
	available_desktops=("none" "gnome" "gnome-full" "kde" "kde-full" "lxde" "lxqt" "mate" "mate-full" "xfce")
	bootstrap="lxc voidlinux current default"
	bootloader_id="boot"
	bootloader_name="bootx64.efi"
	;;
	'Zorin')
	available_desktops=("none" "core" "lite")
	bootstrap="lxc ubuntu focal default"
	bootloader_id="ubuntu"
	bootloader_name="shimx64.efi"
	;;
esac
}

available_locales=(
"x" "en_US" "American English, United States"
"x" "aa_DJ" "Afar, Djibouti"
"x" "aa_ER" "Afar, Eritrea"
"x" "aa_ET" "Afar, Ethiopia"
"x" "ab_GE" "Abkhazian, Georgia"
"x" "af_ZA" "Afrikaans, South Africa"
"x" "agr_PE" "Aguaruna, Peru"
"x" "ak_GH" "Akan, Ghana"
"x" "am_ET" "Amharic, Ethiopia"
"x" "an_ES" "Aragonese, Spain"
"x" "anp_IN" "Angika, India"
"x" "ar_AE" "Arabic, United Arab Emirates"
"x" "ar_BH" "Arabic, Bahrain"
"x" "ar_DZ" "Arabic, Algeria"
"x" "ar_EG" "Arabic, Egypt"
"x" "ar_IN" "Arabic, India"
"x" "ar_IQ" "Arabic, Iraq"
"x" "ar_JO" "Arabic, Jordan"
"x" "ar_KW" "Arabic, Kuwait"
"x" "ar_LB" "Arabic, Lebanon"
"x" "ar_LY" "Arabic, Libya"
"x" "ar_MA" "Arabic, Morocco"
"x" "ar_OM" "Arabic, Oman"
"x" "ar_QA" "Arabic, Qatar"
"x" "ar_SA" "Arabic, Saudi Arabia"
"x" "ar_SD" "Arabic, Sudan"
"x" "ar_SS" "Arabic, South Sudan"
"x" "ar_SY" "Arabic, Syria"
"x" "ar_TN" "Arabic, Tunisia"
"x" "ar_YE" "Arabic, Yemen"
"x" "as_IN" "Assamese, India"
"x" "ast_ES" "Asturian, Spain"
"x" "ayc_PE" "Aymara, Peru"
"x" "az_AZ" "Azerbaijani, Azerbaijan"
"x" "az_IR" "South Azerbaijani, Iran"
"x" "be_BY" "Belarusian, Belarus"
"x" "bem_ZM" "Bemba, Zambia"
"x" "ber_DZ" "Berber, Algeria"
"x" "ber_MA" "Berber, Morocco"
"x" "bg_BG" "Bulgarian, Bulgaria"
"x" "bhb_IN" "Bhili, India"
"x" "bho_IN" "Bhojpuri, India"
"x" "bho_NP" "Bhojpuri, Nepal"
"x" "bi_VU" "Bislama, Vanuatu"
"x" "bn_BD" "Bangla, Bangladesh"
"x" "bn_IN" "Bangla, India"
"x" "bo_CN" "Tibetan, China"
"x" "bo_IN" "Tibetan, India"
"x" "br_FR" "Breton, France"
"x" "brx_IN" "Bodo, India"
"x" "bs_BA" "Bosnian, Bosnia & Herzegovina"
"x" "byn_ER" "Blin, Eritrea"
"x" "ca_AD" "Catalan, Andorra"
"x" "ca_ES" "Catalan, Spain"
"x" "ca_FR" "Catalan, France"
"x" "ca_IT" "Catalan, Italy"
"x" "ce_RU" "Chechen, Russia"
"x" "chr_US" "Cherokee, United States"
"x" "ckb_IQ" "Central Kurdish, Iraq"
"x" "cmn_TW" "Mandarin Chinese, Taiwan"
"x" "crh_UA" "Crimean Tatar, Ukraine"
"x" "csb_PL" "Kashubian, Poland"
"x" "cs_CZ" "Czech, Czech Republic"
"x" "cv_RU" "Chuvash, Russia"
"x" "cy_GB" "Welsh, United Kingdom"
"x" "da_DK" "Danish, Denmark"
"x" "de_AT" "Austrian German, Austria"
"x" "de_BE" "German, Belgium"
"x" "de_CH" "Swiss High German, Switzerland"
"x" "de_DE" "German, Germany"
"x" "de_IT" "German, Italy"
"x" "de_LI" "German, Liechtenstein"
"x" "de_LU" "German, Luxembourg"
"x" "doi_IN" "Dogri, India"
"x" "dsb_DE" "Lower Sorbian, Germany"
"x" "dv_MV" "Divehi, Maldives"
"x" "dz_BT" "Dzongkha, Bhutan"
"x" "el_CY" "Greek, Cyprus"
"x" "el_GR" "Greek, Greece"
"x" "en_AG" "English, Antigua & Barbuda"
"x" "en_AU" "Australian English, Australia"
"x" "en_BW" "English, Botswana"
"x" "en_CA" "Canadian English, Canada"
"x" "en_DK" "English, Denmark"
"x" "en_GB" "British English, United Kingdom"
"x" "en_HK" "English, Hong Kong SAR China"
"x" "en_IE" "English, Ireland"
"x" "en_IL" "English, Israel"
"x" "en_IN" "English, India"
"x" "en_NG" "English, Nigeria"
"x" "en_NZ" "English, New Zealand"
"x" "en_PH" "English, Philippines"
"x" "en_SC" "English, Seychelles"
"x" "en_SG" "English, Singapore"
"x" "en_ZA" "English, South Africa"
"x" "en_ZM" "English, Zambia"
"x" "en_ZW" "English, Zimbabwe"
"x" "es_AR" "Spanish, Argentina"
"x" "es_BO" "Spanish, Bolivia"
"x" "es_CL" "Spanish, Chile"
"x" "es_CO" "Spanish, Colombia"
"x" "es_CR" "Spanish, Costa Rica"
"x" "es_CU" "Spanish, Cuba"
"x" "es_DO" "Spanish, Dominican Republic"
"x" "es_EC" "Spanish, Ecuador"
"x" "es_ES" "European Spanish, Spain"
"x" "es_GT" "Spanish, Guatemala"
"x" "es_HN" "Spanish, Honduras"
"x" "es_MX" "Mexican Spanish, Mexico"
"x" "es_NI" "Spanish, Nicaragua"
"x" "es_PA" "Spanish, Panama"
"x" "es_PE" "Spanish, Peru"
"x" "es_PR" "Spanish, Puerto Rico"
"x" "es_PY" "Spanish, Paraguay"
"x" "es_SV" "Spanish, El Salvador"
"x" "es_UY" "Spanish, Uruguay"
"x" "es_VE" "Spanish, Venezuela"
"x" "et_EE" "Estonian, Estonia"
"x" "eu_ES" "Basque, Spain"
"x" "fa_IR" "Persian, Iran"
"x" "ff_SN" "Fulah, Senegal"
"x" "fi_FI" "Finnish, Finland"
"x" "fil_PH" "Filipino, Philippines"
"x" "fo_FO" "Faroese, Faroe Islands"
"x" "fr_BE" "French, Belgium"
"x" "fr_CA" "Canadian French, Canada"
"x" "fr_CH" "Swiss French, Switzerland"
"x" "fr_FR" "French, France"
"x" "fr_LU" "French, Luxembourg"
"x" "fur_IT" "Friulian, Italy"
"x" "fy_DE" "Western Frisian, Germany"
"x" "fy_NL" "Western Frisian, Netherlands"
"x" "ga_IE" "Irish, Ireland"
"x" "gd_GB" "Scottish Gaelic, United Kingdom"
"x" "gez_ER" "Geez, Eritrea"
"x" "gez_ET" "Geez, Ethiopia"
"x" "gl_ES" "Galician, Spain"
"x" "gu_IN" "Gujarati, India"
"x" "gv_GB" "Manx, United Kingdom"
"x" "hak_TW" "Hakka Chinese, Taiwan"
"x" "ha_NG" "Hausa, Nigeria"
"x" "he_IL" "Hebrew, Israel"
"x" "hif_FJ" "Fiji Hindi, Fiji"
"x" "hi_IN" "Hindi, India"
"x" "hne_IN" "Chhattisgarhi, India"
"x" "hr_HR" "Croatian, Croatia"
"x" "hsb_DE" "Upper Sorbian, Germany"
"x" "ht_HT" "Haitian Creole, Haiti"
"x" "hu_HU" "Hungarian, Hungary"
"x" "hy_AM" "Armenian, Armenia"
"x" "ia_FR" "Interlingua, France"
"x" "id_ID" "Indonesian, Indonesia"
"x" "ig_NG" "Igbo, Nigeria"
"x" "ik_CA" "Inupiaq, Canada"
"x" "is_IS" "Icelandic, Iceland"
"x" "it_CH" "Italian, Switzerland"
"x" "it_IT" "Italian, Italy"
"x" "iu_CA" "Inuktitut, Canada"
"x" "ja_JP" "Japanese, Japan"
"x" "kab_DZ" "Kabyle, Algeria"
"x" "ka_GE" "Georgian, Georgia"
"x" "kk_KZ" "Kazakh, Kazakhstan"
"x" "kl_GL" "Kalaallisut, Greenland"
"x" "km_KH" "Khmer, Cambodia"
"x" "kn_IN" "Kannada, India"
"x" "kok_IN" "Konkani, India"
"x" "ko_KR" "Korean, South Korea"
"x" "ks_IN" "Kashmiri, India"
"x" "ku_TR" "Kurdish, Turkey"
"x" "kw_GB" "Cornish, United Kingdom"
"x" "ky_KG" "Kyrgyz, Kyrgyzstan"
"x" "lb_LU" "Luxembourgish, Luxembourg"
"x" "lg_UG" "Ganda, Uganda"
"x" "li_BE" "Limburgish, Belgium"
"x" "lij_IT" "Ligurian, Italy"
"x" "li_NL" "Limburgish, Netherlands"
"x" "ln_CD" "Lingala, Democratic Republic of the Congo"
"x" "lo_LA" "Lao, Laos"
"x" "lt_LT" "Lithuanian, Lithuania"
"x" "lv_LV" "Latvian, Latvia"
"x" "lzh_TW" "Literary Chinese, Taiwan"
"x" "mag_IN" "Magahi, India"
"x" "mai_IN" "Maithili, India"
"x" "mai_NP" "Maithili, Nepal"
"x" "mfe_MU" "Morisyen, Mauritius"
"x" "mg_MG" "Malagasy, Madagascar"
"x" "mhr_RU" "Meadow Mari, Russia"
"x" "mi_NZ" "Maori, New Zealand"
"x" "miq_NI" "Miskito, Nicaragua"
"x" "mjw_IN" "Karbi, India"
"x" "mk_MK" "Macedonian, Macedonia"
"x" "ml_IN" "Malayalam, India"
"x" "mni_IN" "Manipuri, India"
"x" "mn_MN" "Mongolian, Mongolia"
"x" "mnw_MM" "Mon, Myanmar"
"x" "mr_IN" "Marathi, India"
"x" "ms_MY" "Malay, Malaysia"
"x" "mt_MT" "Maltese, malta"
"x" "my_MM" "Burmese, Myanmar (Burma)"
"x" "nan_TW" "Min Nan Chinese, Taiwan"
"x" "nb_NO" "Norwegian Bokm<U00E5>l, Norway"
"x" "nds_DE" "Low German, Germany"
"x" "nds_NL" "Low Saxon, Netherlands"
"x" "ne_NP" "Nepali, Nepal"
"x" "nhn_MX" "Central Nahuatl, Mexico"
"x" "niu_NU" "Niuean, Niue"
"x" "niu_NZ" "Niuean, New Zealand"
"x" "nl_AW" "Dutch, Aruba"
"x" "nl_BE" "Flemish, Belgium"
"x" "nl_NL" "Dutch, Netherlands"
"x" "nn_NO" "Norwegian Nynorsk, Norway"
"x" "nr_ZA" "South Ndebele, South Africa"
"x" "nso_ZA" "Northern Sotho, South Africa"
"x" "oc_FR" "Occitan, France"
"x" "om_ET" "Oromo, Ethiopia"
"x" "om_KE" "Oromo, Kenya"
"x" "or_IN" "Odia, India"
"x" "os_RU" "Ossetic, Russia"
"x" "pa_IN" "Punjabi, India"
"x" "pap_AW" "Papiamento, Aruba"
"x" "pap_CW" "Papiamento, Cura<U00E7>ao"
"x" "pa_PK" "Punjabi, Pakistan"
"x" "pl_PL" "Polish, Poland"
"x" "ps_AF" "Pashto, Afghanistan"
"x" "pt_BR" "Brazilian Portuguese, Brazil"
"x" "pt_PT" "European Portuguese, Portugal"
"x" "quz_PE" "Cusco Quechua, Peru"
"x" "raj_IN" "Rajasthani, India"
"x" "rif_MA" "Tarifit, Morocco"
"x" "ro_RO" "Romanian, Romania"
"x" "ru_RU" "Russian, Russia"
"x" "ru_UA" "Russian, Ukraine"
"x" "rw_RW" "Kinyarwanda, Rwanda"
"x" "sah_RU" "Sakha, Russian Federation"
"x" "sa_IN" "Sanskrit, India"
"x" "sat_IN" "Santali, India"
"x" "sc_IT" "Sardinian, Italy"
"x" "sd_IN" "Sindhi, India"
"x" "se_NO" "Northern Sami, Norway"
"x" "sgs_LT" "Samogitian, Lithuania"
"x" "shn_MM" "Shan, Myanmar"
"x" "shs_CA" "Shuswap, Canada"
"x" "sid_ET" "Sidamo, Ethiopia"
"x" "si_LK" "Sinhala, Sri Lanka"
"x" "sk_SK" "Slovak, Slovakia"
"x" "sl_SI" "Slovenian, Slovenia"
"x" "sm_WS" "Samoan, Samoa"
"x" "so_DJ" "Somali, Djibouti"
"x" "so_ET" "Somali, Ethiopia"
"x" "so_KE" "Somali, Kenya"
"x" "so_SO" "Somali, Somalia"
"x" "sq_AL" "Albanian, Albania"
"x" "sq_MK" "Albanian, Macedonia"
"x" "sr_ME" "Serbian, Montenegro"
"x" "sr_RS" "Serbian, Serbia"
"x" "ss_ZA" "Swati, South Africa"
"x" "st_ZA" "Southern Sotho, South Africa"
"x" "sv_FI" "Swedish, Finland"
"x" "sv_SE" "Swedish, Sweden"
"x" "sw_KE" "Swahili, Kenya"
"x" "sw_TZ" "Swahili, Tanzania"
"x" "szl_PL" "Silesian, Poland"
"x" "ta_IN" "Tamil, India"
"x" "ta_LK" "Tamil, Sri Lanka"
"x" "tcy_IN" "Tulu, India"
"x" "te_IN" "Telugu, India"
"x" "tg_TJ" "Tajik, Tajikistan"
"x" "the_NP" "Chitwania Tharu, Nepal"
"x" "th_TH" "Thai, Thailand"
"x" "ti_ER" "Tigrinya, Eritrea"
"x" "ti_ET" "Tigrinya, Ethiopia"
"x" "tig_ER" "Tigre, Eritrea"
"x" "tk_TM" "Turkmen, Turkmenistan"
"x" "tl_PH" "Tagalog, Philippines"
"x" "tn_ZA" "Tswana, South Africa"
"x" "to_TO" "Tongan, Tonga"
"x" "tpi_PG" "Tok Pisin, Papua New Guinea"
"x" "tr_CY" "Turkish, Cyprus"
"x" "tr_TR" "Turkish, Turkey"
"x" "ts_ZA" "Tsonga, South Africa"
"x" "tt_RU" "Tatar, Russia"
"x" "ug_CN" "Uyghur, China"
"x" "uk_UA" "Ukrainian, Ukraine"
"x" "unm_US" "Unami Delaware, United States"
"x" "ur_IN" "Urdu, India"
"x" "ur_PK" "Urdu, Pakistan"
"x" "uz_UZ" "Uzbek, Uzbekistan"
"x" "ve_ZA" "Venda, South Africa"
"x" "vi_VN" "Vietnamese, Vietnam"
"x" "wa_BE" "Walloon, Belgium"
"x" "wae_CH" "Walser, Switzerland"
"x" "wal_ET" "Wolaytta, Ethiopia"
"x" "wo_SN" "Wolof, Senegal"
"x" "xh_ZA" "Xhosa, South Africa"
"x" "yi_US" "Yiddish, United States"
"x" "yo_NG" "Yoruba, Nigeria"
"x" "yue_HK" "Cantonese, Hong Kong SAR China"
"x" "yuw_PG" "Yau, Papua New Guinea"
"x" "zh_CN" "Chinese, China"
"x" "zh_HK" "Chinese, Hong Kong SAR China"
"x" "zh_SG" "Chinese, Singapore"
"x" "zh_TW" "Chinese, Taiwan"
"x" "zu_ZA" "Zulu, South Africa"
"x" "C" "Default locale"
)

available_keymaps=(
"x" "us" "USA"
"x" "ad" "Andorra"
"x" "af" "Afghanistan"
"x" "al" "Albania"
"x" "am" "Armenia"
"x" "ara" "Arabic"
"x" "az" "Azerbaijan"
"x" "ba" "Bosnia and Herzegovina"
"x" "bd" "Bangladesh"
"x" "be" "Belgium"
"x" "bg" "Bulgaria"
"x" "br" "Brazil"
"x" "brai" "Braille"
"x" "bt" "Bhutan"
"x" "by" "Belarus"
"x" "ca" "Canada"
"x" "cd" "Congo, Democratic Republic of the"
"x" "ch" "Switzerland"
"x" "cn" "China"
"x" "cz" "Czechia"
"x" "de" "Germany"
"x" "dk" "Denmark"
"x" "ee" "Estonia"
"x" "es" "Spain"
"x" "et" "Ethiopia"
"x" "fi" "Finland"
"x" "fo" "Faroe Islands"
"x" "fr" "France"
"x" "gb" "United Kingdom"
"x" "ge" "Georgia"
"x" "gh" "Ghana"
"x" "gn" "Guinea"
"x" "gr" "Greece"
"x" "hr" "Croatia"
"x" "hu" "Hungary"
"x" "ie" "Ireland"
"x" "il" "Israel"
"x" "in" "India"
"x" "iq" "Iraq"
"x" "ir" "Iran"
"x" "is" "Iceland"
"x" "it" "Italy"
"x" "jp" "Japan"
"x" "kg" "Kyrgyzstan"
"x" "kh" "Cambodia"
"x" "kr" "Korea, Republic of"
"x" "kz" "Kazakhstan"
"x" "la" "Laos"
"x" "latam" "Latin American"
"x" "lk" "Sri Lanka"
"x" "lt" "Lithuania"
"x" "lv" "Latvia"
"x" "ma" "Morocco"
"x" "mao" "Maori"
"x" "me" "Montenegro"
"x" "mk" "Macedonia"
"x" "ml" "Mali"
"x" "mm" "Myanmar"
"x" "mn" "Mongolia"
"x" "mt" "Malta"
"x" "mv" "Maldives"
"x" "ng" "Nigeria"
"x" "nl" "Netherlands"
"x" "no" "Norway"
"x" "np" "Nepal"
"x" "pk" "Pakistan"
"x" "pl" "Poland"
"x" "pt" "Portugal"
"x" "ro" "Romania"
"x" "rs" "Serbia"
"x" "ru" "Russia"
"x" "se" "Sweden"
"x" "si" "Slovenia"
"x" "sk" "Slovakia"
"x" "sn" "Senegal"
"x" "sy" "Syria"
"x" "th" "Thailand"
"x" "tj" "Tajikistan"
"x" "tm" "Turkmenistan"
"x" "tr" "Turkey"
"x" "tw" "Taiwan"
"x" "tz" "Tanzania"
"x" "ua" "Ukraine"
"x" "uz" "Uzbekistan"
"x" "vn" "Vietnam"
"x" "za" "South Africa"
)

available_timezones=(
"x" "UTC"
"x" "Africa/Abidjan"
"x" "Africa/Accra"
"x" "Africa/Addis_Ababa"
"x" "Africa/Algiers"
"x" "Africa/Asmara"
"x" "Africa/Asmera"
"x" "Africa/Bamako"
"x" "Africa/Bangui"
"x" "Africa/Banjul"
"x" "Africa/Bissau"
"x" "Africa/Blantyre"
"x" "Africa/Brazzaville"
"x" "Africa/Bujumbura"
"x" "Africa/Cairo"
"x" "Africa/Casablanca"
"x" "Africa/Ceuta"
"x" "Africa/Conakry"
"x" "Africa/Dakar"
"x" "Africa/Dar_es_Salaam"
"x" "Africa/Djibouti"
"x" "Africa/Douala"
"x" "Africa/El_Aaiun"
"x" "Africa/Freetown"
"x" "Africa/Gaborone"
"x" "Africa/Harare"
"x" "Africa/Johannesburg"
"x" "Africa/Juba"
"x" "Africa/Kampala"
"x" "Africa/Khartoum"
"x" "Africa/Kigali"
"x" "Africa/Kinshasa"
"x" "Africa/Lagos"
"x" "Africa/Libreville"
"x" "Africa/Lome"
"x" "Africa/Luanda"
"x" "Africa/Lubumbashi"
"x" "Africa/Lusaka"
"x" "Africa/Malabo"
"x" "Africa/Maputo"
"x" "Africa/Maseru"
"x" "Africa/Mbabane"
"x" "Africa/Mogadishu"
"x" "Africa/Monrovia"
"x" "Africa/Nairobi"
"x" "Africa/Ndjamena"
"x" "Africa/Niamey"
"x" "Africa/Nouakchott"
"x" "Africa/Ouagadougou"
"x" "Africa/Porto-Novo"
"x" "Africa/Sao_Tome"
"x" "Africa/Timbuktu"
"x" "Africa/Tripoli"
"x" "Africa/Tunis"
"x" "Africa/Windhoek"
"x" "America/Adak"
"x" "America/Anchorage"
"x" "America/Anguilla"
"x" "America/Antigua"
"x" "America/Araguaina"
"x" "America/Argentina/Buenos_Aires"
"x" "America/Argentina/Catamarca"
"x" "America/Argentina/ComodRivadavia"
"x" "America/Argentina/Cordoba"
"x" "America/Argentina/Jujuy"
"x" "America/Argentina/La_Rioja"
"x" "America/Argentina/Mendoza"
"x" "America/Argentina/Rio_Gallegos"
"x" "America/Argentina/Salta"
"x" "America/Argentina/San_Juan"
"x" "America/Argentina/San_Luis"
"x" "America/Argentina/Tucuman"
"x" "America/Argentina/Ushuaia"
"x" "America/Aruba"
"x" "America/Asuncion"
"x" "America/Atikokan"
"x" "America/Atka"
"x" "America/Bahia"
"x" "America/Bahia_Banderas"
"x" "America/Barbados"
"x" "America/Belem"
"x" "America/Belize"
"x" "America/Blanc-Sablon"
"x" "America/Boa_Vista"
"x" "America/Bogota"
"x" "America/Boise"
"x" "America/Buenos_Aires"
"x" "America/Cambridge_Bay"
"x" "America/Campo_Grande"
"x" "America/Cancun"
"x" "America/Caracas"
"x" "America/Catamarca"
"x" "America/Cayenne"
"x" "America/Cayman"
"x" "America/Chicago"
"x" "America/Chihuahua"
"x" "America/Ciudad_Juarez"
"x" "America/Coral_Harbour"
"x" "America/Cordoba"
"x" "America/Costa_Rica"
"x" "America/Creston"
"x" "America/Cuiaba"
"x" "America/Curacao"
"x" "America/Danmarkshavn"
"x" "America/Dawson"
"x" "America/Dawson_Creek"
"x" "America/Denver"
"x" "America/Detroit"
"x" "America/Dominica"
"x" "America/Edmonton"
"x" "America/Eirunepe"
"x" "America/El_Salvador"
"x" "America/Ensenada"
"x" "America/Fort_Nelson"
"x" "America/Fort_Wayne"
"x" "America/Fortaleza"
"x" "America/Glace_Bay"
"x" "America/Godthab"
"x" "America/Goose_Bay"
"x" "America/Grand_Turk"
"x" "America/Grenada"
"x" "America/Guadeloupe"
"x" "America/Guatemala"
"x" "America/Guayaquil"
"x" "America/Guyana"
"x" "America/Halifax"
"x" "America/Havana"
"x" "America/Hermosillo"
"x" "America/Indiana/Indianapolis"
"x" "America/Indiana/Knox"
"x" "America/Indiana/Marengo"
"x" "America/Indiana/Petersburg"
"x" "America/Indiana/Tell_City"
"x" "America/Indiana/Vevay"
"x" "America/Indiana/Vincennes"
"x" "America/Indiana/Winamac"
"x" "America/Indianapolis"
"x" "America/Inuvik"
"x" "America/Iqaluit"
"x" "America/Jamaica"
"x" "America/Jujuy"
"x" "America/Juneau"
"x" "America/Kentucky/Louisville"
"x" "America/Kentucky/Monticello"
"x" "America/Knox_IN"
"x" "America/Kralendijk"
"x" "America/La_Paz"
"x" "America/Lima"
"x" "America/Los_Angeles"
"x" "America/Louisville"
"x" "America/Lower_Princes"
"x" "America/Maceio"
"x" "America/Managua"
"x" "America/Manaus"
"x" "America/Marigot"
"x" "America/Martinique"
"x" "America/Matamoros"
"x" "America/Mazatlan"
"x" "America/Mendoza"
"x" "America/Menominee"
"x" "America/Merida"
"x" "America/Metlakatla"
"x" "America/Mexico_City"
"x" "America/Miquelon"
"x" "America/Moncton"
"x" "America/Monterrey"
"x" "America/Montevideo"
"x" "America/Montreal"
"x" "America/Montserrat"
"x" "America/Nassau"
"x" "America/New_York"
"x" "America/Nipigon"
"x" "America/Nome"
"x" "America/Noronha"
"x" "America/North_Dakota/Beulah"
"x" "America/North_Dakota/Center"
"x" "America/North_Dakota/New_Salem"
"x" "America/Nuuk"
"x" "America/Ojinaga"
"x" "America/Panama"
"x" "America/Pangnirtung"
"x" "America/Paramaribo"
"x" "America/Phoenix"
"x" "America/Port-au-Prince"
"x" "America/Port_of_Spain"
"x" "America/Porto_Acre"
"x" "America/Porto_Velho"
"x" "America/Puerto_Rico"
"x" "America/Punta_Arenas"
"x" "America/Rainy_River"
"x" "America/Rankin_Inlet"
"x" "America/Recife"
"x" "America/Regina"
"x" "America/Resolute"
"x" "America/Rio_Branco"
"x" "America/Rosario"
"x" "America/Santa_Isabel"
"x" "America/Santarem"
"x" "America/Santiago"
"x" "America/Santo_Domingo"
"x" "America/Sao_Paulo"
"x" "America/Scoresbysund"
"x" "America/Shiprock"
"x" "America/Sitka"
"x" "America/St_Barthelemy"
"x" "America/St_Johns"
"x" "America/St_Kitts"
"x" "America/St_Lucia"
"x" "America/St_Thomas"
"x" "America/St_Vincent"
"x" "America/Swift_Current"
"x" "America/Tegucigalpa"
"x" "America/Thule"
"x" "America/Thunder_Bay"
"x" "America/Tijuana"
"x" "America/Toronto"
"x" "America/Tortola"
"x" "America/Vancouver"
"x" "America/Virgin"
"x" "America/Whitehorse"
"x" "America/Winnipeg"
"x" "America/Yakutat"
"x" "America/Yellowknife"
"x" "Antarctica/Casey"
"x" "Antarctica/Davis"
"x" "Antarctica/DumontDUrville"
"x" "Antarctica/Macquarie"
"x" "Antarctica/Mawson"
"x" "Antarctica/McMurdo"
"x" "Antarctica/Palmer"
"x" "Antarctica/Rothera"
"x" "Antarctica/South_Pole"
"x" "Antarctica/Syowa"
"x" "Antarctica/Troll"
"x" "Antarctica/Vostok"
"x" "Arctic/Longyearbyen"
"x" "Asia/Aden"
"x" "Asia/Almaty"
"x" "Asia/Amman"
"x" "Asia/Anadyr"
"x" "Asia/Aqtau"
"x" "Asia/Aqtobe"
"x" "Asia/Ashgabat"
"x" "Asia/Ashkhabad"
"x" "Asia/Atyrau"
"x" "Asia/Baghdad"
"x" "Asia/Bahrain"
"x" "Asia/Baku"
"x" "Asia/Bangkok"
"x" "Asia/Barnaul"
"x" "Asia/Beirut"
"x" "Asia/Bishkek"
"x" "Asia/Brunei"
"x" "Asia/Calcutta"
"x" "Asia/Chita"
"x" "Asia/Choibalsan"
"x" "Asia/Chongqing"
"x" "Asia/Chungking"
"x" "Asia/Colombo"
"x" "Asia/Dacca"
"x" "Asia/Damascus"
"x" "Asia/Dhaka"
"x" "Asia/Dili"
"x" "Asia/Dubai"
"x" "Asia/Dushanbe"
"x" "Asia/Famagusta"
"x" "Asia/Gaza"
"x" "Asia/Harbin"
"x" "Asia/Hebron"
"x" "Asia/Ho_Chi_Minh"
"x" "Asia/Hong_Kong"
"x" "Asia/Hovd"
"x" "Asia/Irkutsk"
"x" "Asia/Istanbul"
"x" "Asia/Jakarta"
"x" "Asia/Jayapura"
"x" "Asia/Jerusalem"
"x" "Asia/Kabul"
"x" "Asia/Kamchatka"
"x" "Asia/Karachi"
"x" "Asia/Kashgar"
"x" "Asia/Kathmandu"
"x" "Asia/Katmandu"
"x" "Asia/Khandyga"
"x" "Asia/Kolkata"
"x" "Asia/Krasnoyarsk"
"x" "Asia/Kuala_Lumpur"
"x" "Asia/Kuching"
"x" "Asia/Kuwait"
"x" "Asia/Macao"
"x" "Asia/Macau"
"x" "Asia/Magadan"
"x" "Asia/Makassar"
"x" "Asia/Manila"
"x" "Asia/Muscat"
"x" "Asia/Nicosia"
"x" "Asia/Novokuznetsk"
"x" "Asia/Novosibirsk"
"x" "Asia/Omsk"
"x" "Asia/Oral"
"x" "Asia/Phnom_Penh"
"x" "Asia/Pontianak"
"x" "Asia/Pyongyang"
"x" "Asia/Qatar"
"x" "Asia/Qostanay"
"x" "Asia/Qyzylorda"
"x" "Asia/Rangoon"
"x" "Asia/Riyadh"
"x" "Asia/Saigon"
"x" "Asia/Sakhalin"
"x" "Asia/Samarkand"
"x" "Asia/Seoul"
"x" "Asia/Shanghai"
"x" "Asia/Singapore"
"x" "Asia/Srednekolymsk"
"x" "Asia/Taipei"
"x" "Asia/Tashkent"
"x" "Asia/Tbilisi"
"x" "Asia/Tehran"
"x" "Asia/Tel_Aviv"
"x" "Asia/Thimbu"
"x" "Asia/Thimphu"
"x" "Asia/Tokyo"
"x" "Asia/Tomsk"
"x" "Asia/Ujung_Pandang"
"x" "Asia/Ulaanbaatar"
"x" "Asia/Ulan_Bator"
"x" "Asia/Urumqi"
"x" "Asia/Ust-Nera"
"x" "Asia/Vientiane"
"x" "Asia/Vladivostok"
"x" "Asia/Yakutsk"
"x" "Asia/Yangon"
"x" "Asia/Yekaterinburg"
"x" "Asia/Yerevan"
"x" "Atlantic/Azores"
"x" "Atlantic/Bermuda"
"x" "Atlantic/Canary"
"x" "Atlantic/Cape_Verde"
"x" "Atlantic/Faeroe"
"x" "Atlantic/Faroe"
"x" "Atlantic/Jan_Mayen"
"x" "Atlantic/Madeira"
"x" "Atlantic/Reykjavik"
"x" "Atlantic/South_Georgia"
"x" "Atlantic/St_Helena"
"x" "Atlantic/Stanley"
"x" "Australia/ACT"
"x" "Australia/Adelaide"
"x" "Australia/Brisbane"
"x" "Australia/Broken_Hill"
"x" "Australia/Canberra"
"x" "Australia/Currie"
"x" "Australia/Darwin"
"x" "Australia/Eucla"
"x" "Australia/Hobart"
"x" "Australia/LHI"
"x" "Australia/Lindeman"
"x" "Australia/Lord_Howe"
"x" "Australia/Melbourne"
"x" "Australia/NSW"
"x" "Australia/North"
"x" "Australia/Perth"
"x" "Australia/Queensland"
"x" "Australia/South"
"x" "Australia/Sydney"
"x" "Australia/Tasmania"
"x" "Australia/Victoria"
"x" "Australia/West"
"x" "Australia/Yancowinna"
"x" "Brazil/Acre"
"x" "Brazil/DeNoronha"
"x" "Brazil/East"
"x" "Brazil/West"
"x" "CET"
"x" "CST6CDT"
"x" "Canada/Atlantic"
"x" "Canada/Central"
"x" "Canada/Eastern"
"x" "Canada/Mountain"
"x" "Canada/Newfoundland"
"x" "Canada/Pacific"
"x" "Canada/Saskatchewan"
"x" "Canada/Yukon"
"x" "Chile/Continental"
"x" "Chile/EasterIsland"
"x" "Cuba"
"x" "EET"
"x" "EST"
"x" "EST5EDT"
"x" "Egypt"
"x" "Eire"
"x" "Etc/GMT"
"x" "Etc/GMT+0"
"x" "Etc/GMT+1"
"x" "Etc/GMT+10"
"x" "Etc/GMT+11"
"x" "Etc/GMT+12"
"x" "Etc/GMT+2"
"x" "Etc/GMT+3"
"x" "Etc/GMT+4"
"x" "Etc/GMT+5"
"x" "Etc/GMT+6"
"x" "Etc/GMT+7"
"x" "Etc/GMT+8"
"x" "Etc/GMT+9"
"x" "Etc/GMT-0"
"x" "Etc/GMT-1"
"x" "Etc/GMT-10"
"x" "Etc/GMT-11"
"x" "Etc/GMT-12"
"x" "Etc/GMT-13"
"x" "Etc/GMT-14"
"x" "Etc/GMT-2"
"x" "Etc/GMT-3"
"x" "Etc/GMT-4"
"x" "Etc/GMT-5"
"x" "Etc/GMT-6"
"x" "Etc/GMT-7"
"x" "Etc/GMT-8"
"x" "Etc/GMT-9"
"x" "Etc/GMT0"
"x" "Etc/Greenwich"
"x" "Etc/UCT"
"x" "Etc/UTC"
"x" "Etc/Universal"
"x" "Etc/Zulu"
"x" "Europe/Amsterdam"
"x" "Europe/Andorra"
"x" "Europe/Astrakhan"
"x" "Europe/Athens"
"x" "Europe/Belfast"
"x" "Europe/Belgrade"
"x" "Europe/Berlin"
"x" "Europe/Bratislava"
"x" "Europe/Brussels"
"x" "Europe/Bucharest"
"x" "Europe/Budapest"
"x" "Europe/Busingen"
"x" "Europe/Chisinau"
"x" "Europe/Copenhagen"
"x" "Europe/Dublin"
"x" "Europe/Gibraltar"
"x" "Europe/Guernsey"
"x" "Europe/Helsinki"
"x" "Europe/Isle_of_Man"
"x" "Europe/Istanbul"
"x" "Europe/Jersey"
"x" "Europe/Kaliningrad"
"x" "Europe/Kiev"
"x" "Europe/Kirov"
"x" "Europe/Kyiv"
"x" "Europe/Lisbon"
"x" "Europe/Ljubljana"
"x" "Europe/London"
"x" "Europe/Luxembourg"
"x" "Europe/Madrid"
"x" "Europe/Malta"
"x" "Europe/Mariehamn"
"x" "Europe/Minsk"
"x" "Europe/Monaco"
"x" "Europe/Moscow"
"x" "Europe/Nicosia"
"x" "Europe/Oslo"
"x" "Europe/Paris"
"x" "Europe/Podgorica"
"x" "Europe/Prague"
"x" "Europe/Riga"
"x" "Europe/Rome"
"x" "Europe/Samara"
"x" "Europe/San_Marino"
"x" "Europe/Sarajevo"
"x" "Europe/Saratov"
"x" "Europe/Simferopol"
"x" "Europe/Skopje"
"x" "Europe/Sofia"
"x" "Europe/Stockholm"
"x" "Europe/Tallinn"
"x" "Europe/Tirane"
"x" "Europe/Tiraspol"
"x" "Europe/Ulyanovsk"
"x" "Europe/Uzhgorod"
"x" "Europe/Vaduz"
"x" "Europe/Vatican"
"x" "Europe/Vienna"
"x" "Europe/Vilnius"
"x" "Europe/Volgograd"
"x" "Europe/Warsaw"
"x" "Europe/Zagreb"
"x" "Europe/Zaporozhye"
"x" "Europe/Zurich"
"x" "Factory"
"x" "GB"
"x" "GB-Eire"
"x" "GMT"
"x" "GMT+0"
"x" "GMT-0"
"x" "GMT0"
"x" "Greenwich"
"x" "HST"
"x" "Hongkong"
"x" "Iceland"
"x" "Indian/Antananarivo"
"x" "Indian/Chagos"
"x" "Indian/Christmas"
"x" "Indian/Cocos"
"x" "Indian/Comoro"
"x" "Indian/Kerguelen"
"x" "Indian/Mahe"
"x" "Indian/Maldives"
"x" "Indian/Mauritius"
"x" "Indian/Mayotte"
"x" "Indian/Reunion"
"x" "Iran"
"x" "Israel"
"x" "Jamaica"
"x" "Japan"
"x" "Kwajalein"
"x" "Libya"
"x" "MET"
"x" "MST"
"x" "MST7MDT"
"x" "Mexico/BajaNorte"
"x" "Mexico/BajaSur"
"x" "Mexico/General"
"x" "NZ"
"x" "NZ-CHAT"
"x" "Navajo"
"x" "PRC"
"x" "PST8PDT"
"x" "Pacific/Apia"
"x" "Pacific/Auckland"
"x" "Pacific/Bougainville"
"x" "Pacific/Chatham"
"x" "Pacific/Chuuk"
"x" "Pacific/Easter"
"x" "Pacific/Efate"
"x" "Pacific/Enderbury"
"x" "Pacific/Fakaofo"
"x" "Pacific/Fiji"
"x" "Pacific/Funafuti"
"x" "Pacific/Galapagos"
"x" "Pacific/Gambier"
"x" "Pacific/Guadalcanal"
"x" "Pacific/Guam"
"x" "Pacific/Honolulu"
"x" "Pacific/Johnston"
"x" "Pacific/Kanton"
"x" "Pacific/Kiritimati"
"x" "Pacific/Kosrae"
"x" "Pacific/Kwajalein"
"x" "Pacific/Majuro"
"x" "Pacific/Marquesas"
"x" "Pacific/Midway"
"x" "Pacific/Nauru"
"x" "Pacific/Niue"
"x" "Pacific/Norfolk"
"x" "Pacific/Noumea"
"x" "Pacific/Pago_Pago"
"x" "Pacific/Palau"
"x" "Pacific/Pitcairn"
"x" "Pacific/Pohnpei"
"x" "Pacific/Ponape"
"x" "Pacific/Port_Moresby"
"x" "Pacific/Rarotonga"
"x" "Pacific/Saipan"
"x" "Pacific/Samoa"
"x" "Pacific/Tahiti"
"x" "Pacific/Tarawa"
"x" "Pacific/Tongatapu"
"x" "Pacific/Truk"
"x" "Pacific/Wake"
"x" "Pacific/Wallis"
"x" "Pacific/Yap"
"x" "Poland"
"x" "Portugal"
"x" "ROC"
"x" "ROK"
"x" "Singapore"
"x" "Turkey"
"x" "UCT"
"x" "US/Alaska"
"x" "US/Aleutian"
"x" "US/Arizona"
"x" "US/Central"
"x" "US/East-Indiana"
"x" "US/Eastern"
"x" "US/Hawaii"
"x" "US/Indiana-Starke"
"x" "US/Michigan"
"x" "US/Mountain"
"x" "US/Pacific"
"x" "US/Samoa"
"x" "Universal"
"x" "W-SU"
"x" "WET"
"x" "Zulu"
)

chroot_AlmaLinux()
{
prepare_bootstrap="
dnf update -y
dnf install -y bash bash-completion bzip2 ca-certificates coreutils cryptsetup curl dosfstools e2fsprogs efibootmgr gzip lsof nano openssl sudo strace tar util-linux xz zstd
"

cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/prepare_chroot <<PREPARE_CHROOT
#!/bin/bash
set -e
dnf install --installroot=/mnt --releasever / -y @core
PREPARE_CHROOT
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/prepare_chroot

cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/chroot_init <<CHROOT_INIT
#!/bin/bash
set -e
dnf install -y epel-release
rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL*
dnf update -y
dnf install -y kernel kernel-headers dkms linux-firmware iwl100-firmware iwl1000-firmware iwl105-firmware iwl135-firmware iwl2000-firmware iwl2030-firmware iwl3160-firmware iwl5000-firmware iwl5150-firmware iwl6000g2a-firmware iwl6000g2b-firmware iwl6050-firmware iwl7260-firmware wireless-regdb glibc-locale-source ntfs-3g bash sudo ModemManager NetworkManager-bluetooth NetworkManager-wifi wpa_supplicant bluez cryptsetup e2fsprogs ntfsprogs nano acpid curl thermald bash-completion gpg polkit xdg-user-dirs zstd fwupd patchutils net-tools usb_modeswitch upower efibootmgr nss-mdns grub2-efi os-prober shim microcode_ctl mokutil dosfstools
dnf --enablerepo=crb install -y almalinux-sb-certs
CHROOT_INIT
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/chroot_init

case "${desktop}" in
	'full')
	install_desktop="
dnf install -y @\"Server with GUI\"
systemctl enable cups-browsed.service
systemctl set-default graphical
"
	;;
esac
cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_desktop <<INSTALL_DESKTOP
#!/bin/bash
set -e
if [ "${desktop}" == "none" ]; then exit 0; fi
${install_desktop}
INSTALL_DESKTOP
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_desktop

cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_user <<INSTALL_USER
#!/bin/bash
set -e
useradd -s /bin/bash -m '${username}'
echo -e '${userpass}\n${userpass}' | passwd '${username}'
usermod -aG wheel '${username}'
echo "%wheel      ALL=(ALL) ALL" > /etc/sudoers.d/90-wheel
INSTALL_USER
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_user

initramfs_type="dracut"
if [ ! -z "${custom_packages}" ]; then
	echo -e "#!/bin/bash\nset -e\ndnf install -y ${custom_packages}" > "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_packages
	chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_packages
fi
if [ ! -z "${custom_script}" ]; then
	cp "${custom_script}" "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_script
	chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_script
fi
}

chroot_Arch()
{
prepare_bootstrap="
curl -l https://archlinux.org/mirrorlist/?ip_version=4 -o /etc/pacman.d/mirrorlist
sed -i 's@#Server = https://geo.mirror.pkgbuild.com@Server = https://geo.mirror.pkgbuild.com@g' /etc/pacman.d/mirrorlist
pacman -Syu --noconfirm --needed bash bash-completion btrfs-progs bzip2 ca-certificates coreutils cryptsetup curl dosfstools e2fsprogs efibootmgr gzip lsof nano openssl reflector sudo strace tar util-linux xz zstd
"

cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/prepare_chroot <<PREPARE_CHROOT
#!/bin/bash
set -e
reflector --latest 10 --threads 10 --connection-timeout 1 --download-timeout 1 --protocol https --sort rate --save /etc/pacman.d/mirrorlist --verbose
pacstrap -G /mnt base base-devel
PREPARE_CHROOT
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/prepare_chroot

cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/chroot_init <<CHROOT_INIT
#!/bin/bash
set -e
pacman-key --init
pacman-key --populate
pacman -Syu --noconfirm --needed linux linux-headers dkms linux-firmware sof-firmware wireless-regdb bash sudo modemmanager networkmanager wpa_supplicant bluez cryptsetup e2fsprogs ntfs-3g nano acpid curl thermald bash-completion gnupg polkit xdg-user-dirs zstd fwupd patchutils net-tools usb_modeswitch upower efibootmgr grub os-prober shim amd-ucode intel-ucode sbsigntools mokutil dosfstools btrfs-progs
systemctl enable bluetooth.service ModemManager.service NetworkManager.service
CHROOT_INIT
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/chroot_init

hardware_support="alsa-lib alsa-utils alsa-topology-conf alsa-ucm-conf at-spi2-core avahi cups nss-mdns pipewire-audio pipewire-alsa pipewire-jack pipewire-pulse wireplumber system-config-printer xorg-server"
basic_packages="gvfs packagekit udisks2 xdg-user-dirs-gtk"
basic_themes="adobe-source-code-pro-fonts adwaita-icon-theme breeze-gtk breeze-icons gnome-backgrounds materia-gtk-theme noto-fonts oxygen-icons papirus-icon-theme ttf-dejavu ttf-roboto"
specific_packages="archlinux-wallpaper"
desktop_base="${hardware_support} ${basic_packages} ${basic_themes} ${specific_packages}"
desktop_services="avahi-daemon.service cups.service cups-browsed.service"
case "${desktop}" in
	'budgie')
	install_desktop="
pacman -S --noconfirm ${desktop_base} lightdm lightdm-slick-greeter budgie-desktop nemo tilix network-manager-applet arc-gtk-theme gnome-control-center
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
systemctl enable lightdm.service
"
	;;
	'cinnamon')
	install_desktop="
pacman -S --noconfirm ${desktop_base} lightdm lightdm-slick-greeter cinnamon gnome-terminal nemo network-manager-applet blueman
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
systemctl enable lightdm.service
"
	;;
	'deepin')
	install_desktop="
pacman -S --noconfirm ${desktop_base} lightdm lightdm-slick-greeter deepin deepin-terminal network-manager-applet
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
systemctl enable lightdm.service
"
	;;
	'deepin-full')
	install_desktop="
pacman -S --noconfirm ${desktop_base} lightdm lightdm-slick-greeter deepin deepin-terminal deepin-extra network-manager-applet
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
systemctl enable lightdm.service
"
	;;
	'enlightenment')
	install_desktop="
systemctl disable NetworkManager.service
pacman -S --noconfirm ${desktop_base} lightdm lightdm-slick-greeter enlightenment connman terminology
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
systemctl enable lightdm.service connman.service
"
	;;
	'gnome')
	install_desktop="
pacman -S --noconfirm ${desktop_base} gdm gnome-shell gnome-control-center gnome-keyring gnome-backgrounds gnome-terminal nautilus
systemctl enable gdm.service
"
	;;
	'gnome-full')
	install_desktop="
pacman -S --noconfirm ${desktop_base} gdm gnome
systemctl enable gdm.service
"
	;;
	'i3')
	install_desktop="
pacman -S --noconfirm ${desktop_base} lightdm lightdm-slick-greeter i3-wm i3status dmenu rxvt-unicode
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
systemctl enable lightdm.service
"
	;;
	'kde')
	install_desktop="
pacman -S --noconfirm ${desktop_base} sddm qt5-virtualkeyboard plasma-desktop plasma-nm plasma-pa kwin dolphin konsole bluedevil powerdevil systemsettings discover kwallet-pam packagekit-qt5
systemctl enable sddm.service
"
	;;
	'kde-full')
	install_desktop="
pacman -S --noconfirm ${desktop_base} sddm qt5-virtualkeyboard plasma dolphin konsole packagekit-qt5
systemctl enable sddm.service
"
	;;
	'lxde')
	install_desktop="
pacman -S --noconfirm ${desktop_base} lightdm lightdm-slick-greeter lxde-common lxde-icon-theme lxappearance lxpanel lxsession lxterminal openbox pcmanfm network-manager-applet blueman
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
systemctl enable lightdm.service
"
	;;
	'lxde-full')
	install_desktop="
pacman -S --noconfirm ${desktop_base} lightdm lightdm-slick-greeter lxde network-manager-applet blueman
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
systemctl enable lightdm.service
"
	;;
	'lxqt')
	install_desktop="
pacman -S --noconfirm ${desktop_base} lightdm lightdm-slick-greeter lxqt-config lxqt-notificationd lxqt-panel lxqt-policykit lxqt-powermanagement lxqt-qtplugin lxqt-session lxqt-themes openbox pcmanfm-qt qterminal network-manager-applet blueman breeze-icons oxygen-icons
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
systemctl enable lightdm.service
"
	;;
	'lxqt-full')
	install_desktop="
pacman -S --noconfirm ${desktop_base} lightdm lightdm-slick-greeter lxqt network-manager-applet blueman breeze-icons oxygen-icons
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
systemctl enable lightdm.service
"
	;;
	'mate')
	install_desktop="
pacman -S --noconfirm ${desktop_base} lightdm lightdm-slick-greeter mate mate-terminal network-manager-applet blueman mate-media mate-power-manager
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
systemctl enable lightdm.service
"
	;;
	'mate-full')
	install_desktop="
pacman -S --noconfirm ${desktop_base} lightdm lightdm-slick-greeter mate mate-terminal mate-extra network-manager-applet blueman
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
systemctl enable lightdm.service
"
	;;
	'xfce')
	install_desktop="
pacman -S --noconfirm ${desktop_base} lightdm lightdm-slick-greeter xfce4 network-manager-applet blueman xfce4-pulseaudio-plugin
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
systemctl enable lightdm.service
"
	;;
	'xfce-full')
	install_desktop="
pacman -S --noconfirm ${desktop_base} lightdm lightdm-slick-greeter xfce4 xfce4-goodies network-manager-applet blueman
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
systemctl enable lightdm.service
"
	;;
esac
cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_desktop <<INSTALL_DESKTOP
#!/bin/bash
set -e
if [ "${desktop}" == "none" ]; then exit 0; fi
${install_desktop}
systemctl enable ${desktop_services}
mkdir -p /usr/share/glib-2.0/schemas
cat >/usr/share/glib-2.0/schemas/zz_linuxloops.gschema.override <<'DCONF'
[org.gnome.desktop.background:Budgie]
picture-uri="file:///usr/share/backgrounds/archlinux/small.png"
[org.gnome.desktop.interface:Budgie]
gtk-theme="Arc"
icon-theme="Papirus"
[org.cinnamon.desktop.background]
picture-uri="file:///usr/share/backgrounds/archlinux/small.png"
[org.cinnamon.desktop.interface]
gtk-theme="Materia"
icon-theme="Papirus"
[org.cinnamon.desktop.wm.preferences]
theme="Materia"
DCONF
if [ ! -z "\$(command -v glib-compile-schemas)" ]; then glib-compile-schemas /usr/share/glib-2.0/schemas/; fi
mkdir -p /etc/skel/.config/xfce4/xfconf/xfce-perchannel-xml
cat > '/etc/skel/.config/xfce4/xfconf/xfce-perchannel-xml/xsettings.xml' <<'XFCETHEME'
<?xml version="1.0" encoding="UTF-8"?>
<channel name="xsettings" version="1.0">
  <property name="Net" type="empty">
    <property name="IconThemeName" type="string" value="Papirus"/>
    <property name="ThemeName" type="string" value="Materia"/>
  </property>
</channel>
XFCETHEME
mkdir -p /etc/xdg/autostart
cat >/etc/xdg/autostart/budgie-nemo.desktop <<'NEMODESKTOP'
[Desktop Entry]
Type=Application
Name=Nemo
Comment=Start Nemo desktop at log in
Exec=nemo-desktop
OnlyShowIn=Budgie;
AutostartCondition=GSettings org.nemo.desktop show-desktop-icons
X-GNOME-AutoRestart=true
NoDisplay=true
NEMODESKTOP
mkdir -p /etc/lightdm /etc/sddm.conf.d
echo -e '[greeter]\nbackground = /usr/share/backgrounds/archlinux/small.png\nuser-background = true' > /etc/lightdm/lightdm-gtk-greeter.conf
echo -e '[Greeter]\nbackground = /usr/share/backgrounds/archlinux/small.png\ndraw-user-backgrounds = true' > /etc/lightdm/slick-greeter.conf
echo -e '[Theme]\nCurrent = breeze' > /etc/sddm.conf.d/99-linuxloops.conf
INSTALL_DESKTOP
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_desktop

cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_user <<INSTALL_USER
#!/bin/bash
set -e
useradd -s /bin/bash -m '${username}'
echo -e '${userpass}\n${userpass}' | passwd '${username}'
usermod -aG wheel '${username}'
echo "%wheel      ALL=(ALL) ALL" > /etc/sudoers.d/90-wheel
cat >/etc/polkit-1/rules.d/50-default.rules <<'POLKIT'
polkit.addAdminRule(function(action, subject) {
    return ["unix-group:wheel"];
});
POLKIT
INSTALL_USER
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_user

surface_remove="linux linux-headers"
initramfs_type="initcpio"
if [ ! -z "${custom_packages}" ]; then
	echo -e "#!/bin/bash\nset -e\npacman -S --noconfirm ${custom_packages}" > "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_packages
	chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_packages
fi
if [ ! -z "${custom_script}" ]; then
	cp "${custom_script}" "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_script
	chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_script
fi
}

chroot_Artix()
{
prepare_bootstrap="
curl -l https://archlinux.org/mirrorlist/?ip_version=4 -o /etc/pacman.d/mirrorlist
sed -i 's@#Server = https://geo.mirror.pkgbuild.com@Server = https://geo.mirror.pkgbuild.com@g' /etc/pacman.d/mirrorlist
pacman -Syu --noconfirm --needed bash bash-completion btrfs-progs bzip2 ca-certificates coreutils cryptsetup curl dosfstools e2fsprogs efibootmgr gzip lsof nano openssl sudo strace tar util-linux xz zstd
"

cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/prepare_chroot <<PREPARE_CHROOT
#!/bin/bash
set -e
curl https://gitea.artixlinux.org/packages/pacman/raw/branch/master/pacman.conf -o /etc/pacman_artix.conf
sed -i 's@SigLevel    = Required DatabaseOptional@SigLevel    = Never@g' /etc/pacman_artix.conf
sed -i 's@#RemoteFileSigLevel = Required@RemoteFileSigLevel = Optional@g' /etc/pacman_artix.conf
curl https://gitea.artixlinux.org/packages/artix-mirrorlist/raw/branch/master/mirrorlist -o /etc/pacman.d/mirrorlist
pacstrap -C /etc/pacman_artix.conf -G /mnt base base-devel elogind-runit
PREPARE_CHROOT
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/prepare_chroot

cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/chroot_init <<CHROOT_INIT
#!/bin/bash
set -e
pacman-key --init
pacman-key --populate
pacman -Sy --noconfirm base runit-system runit elogind-runit mkinitcpio rsync nano lsb-release esysusers etmpfiles artix-branding-base artix-archlinux-support
echo -e "\n[extra]\nInclude = /etc/pacman.d/mirrorlist-arch\n\n[community]\nInclude = /etc/pacman.d/mirrorlist-arch\n\n#[multilib]\n#Include = /etc/pacman.d/mirrorlist-arch" >> /etc/pacman.conf
pacman -Syu --noconfirm linux linux-headers dkms linux-firmware sof-firmware wireless-regdb bash sudo modemmanager networkmanager networkmanager-runit wpa_supplicant bluez bluez-runit cryptsetup e2fsprogs ntfs-3g nano acpid acpid-runit curl thermald bash-completion gnupg polkit xdg-user-dirs zstd fwupd patchutils net-tools usb_modeswitch upower efibootmgr grub os-prober shim amd-ucode intel-ucode sbsigntools mokutil dosfstools btrfs-progs
ln -s /etc/runit/sv/bluetoothd /etc/runit/sv/NetworkManager /etc/runit/runsvdir/default/
dbus-uuidgen > /etc/machine-id
CHROOT_INIT
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/chroot_init

cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_user <<INSTALL_USER
#!/bin/bash
set -e
useradd -s /bin/bash -m '${username}'
echo -e '${userpass}\n${userpass}' | passwd '${username}'
usermod -aG audio,wheel '${username}'
echo "%wheel      ALL=(ALL) ALL" > /etc/sudoers.d/90-wheel
cat >/etc/polkit-1/rules.d/50-default.rules <<'POLKIT'
polkit.addAdminRule(function(action, subject) {
    return ["unix-group:wheel"];
});
POLKIT
cat >/etc/polkit-1/rules.d/50-org.freedesktop.NetworkManager.rules <<'NETWORKMANAGER'
polkit.addRule(function(action, subject) {
    if (action.id.indexOf("org.freedesktop.NetworkManager.") == 0 && subject.isInGroup("wheel")) {
        return polkit.Result.YES;
    }
});
NETWORKMANAGER
INSTALL_USER
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_user

hardware_support="alsa-lib alsa-utils alsa-topology-conf alsa-ucm-conf at-spi2-core avahi avahi-runit cups cups-runit nss-mdns pulseaudio system-config-printer xorg-server"
basic_packages="gvfs packagekit udisks2 xdg-user-dirs-gtk"
basic_themes="adobe-source-code-pro-fonts adwaita-icon-theme breeze-gtk breeze-icons gnome-backgrounds materia-gtk-theme noto-fonts oxygen-icons papirus-icon-theme ttf-dejavu ttf-roboto"
specific_packages="artix-backgrounds artix-dark-theme artix-desktop-presets artix-gtk-presets artix-icons artix-qt-presets ttf-roboto-mono pamac-gtk"
desktop_base="${hardware_support} ${basic_packages} ${basic_themes} ${specific_packages}"
desktop_services="/etc/runit/sv/avahi-daemon /etc/runit/sv/cupsd"
case "${desktop}" in
	'budgie')
	install_desktop="
pacman -S --noconfirm ${desktop_base} lightdm lightdm-slick-greeter lightdm-runit budgie-desktop nemo tilix network-manager-applet arc-gtk-theme gnome-control-center
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
ln -s ${desktop_services} /etc/runit/sv/lightdm /etc/runit/runsvdir/default/
"
	;;
	'cinnamon')
	install_desktop="
pacman -S --noconfirm ${desktop_base} lightdm lightdm-slick-greeter lightdm-runit cinnamon gnome-terminal nemo network-manager-applet blueman
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
ln -s ${desktop_services} /etc/runit/sv/lightdm /etc/runit/runsvdir/default/
"
	;;
	'deepin')
	install_desktop="
pacman -S --noconfirm ${desktop_base} lightdm lightdm-slick-greeter lightdm-runit deepin deepin-terminal network-manager-applet
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
ln -s ${desktop_services} /etc/runit/sv/lightdm /etc/runit/runsvdir/default/
"
	;;
	'deepin-full')
	install_desktop="
pacman -S --noconfirm ${desktop_base} lightdm lightdm-slick-greeter lightdm-runit deepin deepin-terminal deepin-extra network-manager-applet
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
ln -s ${desktop_services} /etc/runit/sv/lightdm /etc/runit/runsvdir/default/
"
	;;
	'enlightenment')
	install_desktop="
rm /etc/runit/runsvdir/default/NetworkManager
pacman -S --noconfirm ${desktop_base} lightdm lightdm-slick-greeter lightdm-runit enlightenment terminology connman connman-runit
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
ln -s ${desktop_services} /etc/runit/sv/lightdm /etc/runit/sv/connmand /etc/runit/runsvdir/default/
"
	;;
	'gnome')
	install_desktop="
pacman -S --noconfirm ${desktop_base} gdm gdm-runit gnome-shell gnome-control-center gnome-keyring gnome-terminal nautilus
ln -s ${desktop_services} /etc/runit/sv/gdm /etc/runit/runsvdir/default/
"
	;;
	'gnome-full')
	install_desktop="
pacman -S --noconfirm ${desktop_base} gdm gdm-runit gnome
ln -s ${desktop_services} /etc/runit/sv/gdm /etc/runit/runsvdir/default/
"
	;;
	'i3')
	install_desktop="
pacman -S --noconfirm ${desktop_base} lightdm lightdm-slick-greeter lightdm-runit i3-wm i3status dmenu rxvt-unicode
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
ln -s ${desktop_services} /etc/runit/sv/lightdm /etc/runit/runsvdir/default/
"
	;;
	'kde')
	install_desktop="
pacman -S --noconfirm ${desktop_base} sddm qt5-virtualkeyboard sddm-runit sddm-theme-artix plasma-desktop plasma-nm plasma-pa kwin dolphin konsole bluedevil powerdevil systemsettings discover kwallet-pam packagekit-qt5 falkon
ln -s ${desktop_services} /etc/runit/sv/sddm /etc/runit/runsvdir/default/
"
	;;
	'kde-full')
	install_desktop="
pacman -S --noconfirm ${desktop_base} sddm qt5-virtualkeyboard sddm-runit sddm-theme-artix plasma dolphin konsole falkon
ln -s ${desktop_services} /etc/runit/sv/sddm /etc/runit/runsvdir/default/
"
	;;
	'lxde')
	install_desktop="
pacman -S --noconfirm ${desktop_base} lightdm lightdm-slick-greeter lightdm-runit lxde-common lxde-icon-theme lxappearance lxpanel lxsession lxterminal openbox pcmanfm network-manager-applet blueman
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
ln -s ${desktop_services} /etc/runit/sv/lightdm /etc/runit/runsvdir/default/
"
	;;
	'lxde-full')
	install_desktop="
pacman -S --noconfirm ${desktop_base} lightdm lightdm-slick-greeter lightdm-runit lxde network-manager-applet blueman
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
ln -s ${desktop_services} /etc/runit/sv/lightdm /etc/runit/runsvdir/default/
"
	;;
	'lxqt')
	install_desktop="
pacman -S --noconfirm ${desktop_base} lightdm lightdm-slick-greeter lightdm-runit lxqt-config lxqt-notificationd lxqt-panel lxqt-policykit lxqt-powermanagement lxqt-qtplugin lxqt-session lxqt-themes openbox pcmanfm-qt qterminal network-manager-applet blueman
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
ln -s ${desktop_services} /etc/runit/sv/lightdm /etc/runit/runsvdir/default/
"
	;;
	'lxqt-full')
	install_desktop="
pacman -S --noconfirm ${desktop_base} lightdm lightdm-slick-greeter lightdm-runit lxqt network-manager-applet blueman
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
ln -s ${desktop_services} /etc/runit/sv/lightdm /etc/runit/runsvdir/default/
"
	;;
	'mate')
	install_desktop="
pacman -S --noconfirm ${desktop_base} lightdm lightdm-slick-greeter lightdm-runit mate mate-terminal network-manager-applet blueman mate-media mate-power-manager mate-applets
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
ln -s ${desktop_services} /etc/runit/sv/lightdm /etc/runit/runsvdir/default/
"
	;;
	'mate-full')
	install_desktop="
pacman -S --noconfirm ${desktop_base} lightdm lightdm-slick-greeter lightdm-runit mate mate-terminal mate-extra network-manager-applet blueman
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
ln -s ${desktop_services} /etc/runit/sv/lightdm /etc/runit/runsvdir/default/
"
	;;
	'xfce')
	install_desktop="
pacman -S --noconfirm ${desktop_base} lightdm lightdm-slick-greeter lightdm-runit xfce4 xfce4-whiskermenu-plugin network-manager-applet blueman xfce4-pulseaudio-plugin
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
ln -s ${desktop_services} /etc/runit/sv/lightdm /etc/runit/runsvdir/default/
"
	;;
	'xfce-full')
	install_desktop="
pacman -S --noconfirm ${desktop_base} lightdm lightdm-slick-greeter lightdm-runit xfce4 xfce4-goodies network-manager-applet blueman
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
ln -s ${desktop_services} /etc/runit/sv/lightdm /etc/runit/runsvdir/default/
"
	;;
esac
cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_desktop <<INSTALL_DESKTOP
#!/bin/bash
set -e
if [ "${desktop}" == "none" ]; then exit 0; fi
${install_desktop}
mkdir -p /usr/share/glib-2.0/schemas
cat >/usr/share/glib-2.0/schemas/zz_linuxloops.gschema.override <<'DCONF'
[org.gnome.desktop.background:Budgie]
picture-uri="file:///usr/share/backgrounds/Artix_dna_spiral_dark.jpg"
[org.gnome.desktop.interface:Budgie]
gtk-theme="Arc"
icon-theme="Papirus"
[org.cinnamon.desktop.background]
picture-uri="file:///usr/share/backgrounds/Artix_dna_spiral_dark.jpg"
[org.cinnamon.desktop.interface]
gtk-theme="Materia"
icon-theme="Papirus"
[org.cinnamon.desktop.wm.preferences]
theme="Materia"
DCONF
if [ ! -z "\$(command -v glib-compile-schemas)" ]; then glib-compile-schemas /usr/share/glib-2.0/schemas/; fi
mkdir -p /etc/skel/.config/xfce4/xfconf/xfce-perchannel-xml
cat > '/etc/skel/.config/xfce4/xfconf/xfce-perchannel-xml/xsettings.xml' <<'XFCETHEME'
<?xml version="1.0" encoding="UTF-8"?>
<channel name="xsettings" version="1.0">
  <property name="Net" type="empty">
    <property name="IconThemeName" type="string" value="Papirus"/>
    <property name="ThemeName" type="string" value="Materia"/>
  </property>
</channel>
XFCETHEME
mkdir -p /etc/xdg/autostart
cat >/etc/xdg/autostart/budgie-nemo.desktop <<'NEMODESKTOP'
[Desktop Entry]
Type=Application
Name=Nemo
Comment=Start Nemo desktop at log in
Exec=nemo-desktop
OnlyShowIn=Budgie;
AutostartCondition=GSettings org.nemo.desktop show-desktop-icons
X-GNOME-AutoRestart=true
NoDisplay=true
NEMODESKTOP
mkdir -p /etc/lightdm /etc/sddm.conf.d
echo -e '[greeter]\nbackground = /usr/share/backgrounds/Artix_dna_spiral_dark.jpg\nuser-background = true' > /etc/lightdm/lightdm-gtk-greeter.conf
echo -e '[Greeter]\nbackground = /usr/share/backgrounds/Artix_dna_spiral_dark.jpg\ndraw-user-backgrounds = true' > /etc/lightdm/slick-greeter.conf
echo -e '[Theme]\nCurrent = artix' > /etc/sddm.conf.d/99-linuxloops.conf
INSTALL_DESKTOP
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_desktop

initramfs_type="initcpio"
if [ ! -z "${custom_packages}" ]; then
	echo -e "#!/bin/bash\nset -e\npacman -S --noconfirm ${custom_packages}" > "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_packages
	chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_packages
fi
if [ ! -z "${custom_script}" ]; then
	cp "${custom_script}" "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_script
	chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_script
fi
}

chroot_Brunch()
{
prepare_bootstrap="
curl -l https://archlinux.org/mirrorlist/?ip_version=4 -o /etc/pacman.d/mirrorlist
sed -i 's@#Server = https://geo.mirror.pkgbuild.com@Server = https://geo.mirror.pkgbuild.com@g' /etc/pacman.d/mirrorlist
pacman -Syu --noconfirm --needed bash bash-completion bzip2 ca-certificates coreutils cryptsetup curl dosfstools e2fsprogs efibootmgr gzip libarchive lsof nano openssl sudo strace tar util-linux unzip xz zstd
"

cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/prepare_chroot <<PREPARE_CHROOT
#!/bin/bash
set -e
/linuxloops/install_script
PREPARE_CHROOT
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/prepare_chroot

cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_script <<INSTALL_SCRIPT
#!/bin/bash
set -e
case "$(echo ${desktop} | cut -d'-' -f2)" in
	'shyvana') board="rammus" ;;
	'jinlon') board="hatch" ;;
	'voxel') board="volteer" ;;
	'gumboz') board="zork" ;;
esac
mkdir -p /isomount/data /isomount/efi /isomount/rootc /isomount/tmp
mkfs.ext4 -E nodiscard -F -L "H-STATE" "${partition_path}"1
mount "${partition_path}"1 /isomount/data
if [ "\$(echo ${desktop} | cut -d'-' -f1)" == "unstable" ]; then
	curl -L \$(curl -L -s "https://api.github.com/repos/sebanc/brunch-unstable/releases/latest" | grep browser_download_url | tr -d '"' | sed 's#browser_download_url: ##g') -o /isomount/data/brunch.tar.gz
else
	curl -L \$(curl -L -s "https://api.github.com/repos/sebanc/brunch/releases/latest" | grep browser_download_url | tr -d '"' | sed 's#browser_download_url: ##g') -o /isomount/data/brunch.tar.gz
fi
mkdir -p /isomount/data/brunch
tar zxf /isomount/data/brunch.tar.gz -C /isomount/data/brunch
rm /isomount/data/brunch.tar.gz
curl -L \$(curl -L https://dl.google.com/dl/edgedl/chromeos/recovery/recovery.conf | grep .bin.zip | cut -d'=' -f2 | grep "\$board" | sort -n | tail -1) -o /isomount/data/recovery.zip
bsdtar -xvf /isomount/data/recovery.zip -C /root
rm -f /isomount/data/recovery.zip
isomount="\$(losetup --show -fP \$(ls /root/chromeos_*.bin))"
for (( i=1; i<=12; i++ )); do
	case \${i} in
		1)
			continue
		;;
		2)
			dd if="\${isomount}"p4 of="${partition_path}""\${i}" bs=1M conv=notrunc status=progress
			continue
		;;
		5)
			dd if="\${isomount}"p3 of="${partition_path}""\${i}" bs=1M conv=notrunc status=progress
			continue
		;;
		7)
			mount /isomount/data/brunch/rootc.img /isomount/tmp
			mkfs.ext4 -E nodiscard -F -L "ROOT-C" "${partition_path}""\${i}"
			if tune2fs -l "${partition_path}""\${i}" | grep 'Filesystem features' | grep -q -w large_dir; then tune2fs -O ^large_dir "${partition_path}""\${i}"; fi
			if tune2fs -l "${partition_path}""\${i}" | grep 'Filesystem features' | grep -q -w metadata_csum_seed; then tune2fs -O ^metadata_csum_seed "${partition_path}""\${i}"; fi
			if tune2fs -l "${partition_path}""\${i}" | grep 'Filesystem features' | grep -q -w orphan_file; then tune2fs -O ^orphan_file "${partition_path}""\${i}"; fi
			mount "${partition_path}""\${i}" /isomount/rootc
			cp -r /isomount/tmp/* /isomount/rootc/
			umount /isomount/rootc
			umount /isomount/tmp
			continue
		;;
		12)
			mount /isomount/data/brunch/efi_secure.img /isomount/tmp
			mkfs.fat -n 'EFI' "${partition_path}""\${i}"
			mount "${partition_path}""\${i}" /isomount/efi
			cp -r /isomount/tmp/* /isomount/efi/
			umount /isomount/efi
			umount /isomount/tmp
			continue
		;;
		6|9|10|11)
			continue
		;;
		*)
			part_source="\${i}"
		;;
	esac
	dd if="\${isomount}"p"\${part_source}" of="${partition_path}""\${i}" bs=1M conv=notrunc status=progress
done
losetup -d "\${isomount}"
rm -rf /isomount/data/*
umount /isomount/data
if [ "${install_type}" == "image" ]; then mkdir -p /mnt/etc/secureboot_key; curl -L https://github.com/sebanc/brunch/raw/main/brunch.der -o /mnt/etc/secureboot_key/MOK.der; fi
INSTALL_SCRIPT
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_script
}

chroot_ChromeOS-Flex()
{
prepare_bootstrap="
curl -l https://archlinux.org/mirrorlist/?ip_version=4 -o /etc/pacman.d/mirrorlist
sed -i 's@#Server = https://geo.mirror.pkgbuild.com@Server = https://geo.mirror.pkgbuild.com@g' /etc/pacman.d/mirrorlist
pacman -Syu --noconfirm --needed bash bash-completion busybox bzip2 ca-certificates coreutils cpio cryptsetup curl dosfstools e2fsprogs efibootmgr gzip libarchive lsof nano ntfs-3g openssl sbsigntools sudo strace tar util-linux unzip xz zstd
"

cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/prepare_chroot <<PREPARE_CHROOT
#!/bin/bash
set -e
/linuxloops/install_script
PREPARE_CHROOT
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/prepare_chroot

if [ "${desktop}" == "full-devmode" ]; then dev_mode="cros_debug"; fi

cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_script <<INSTALL_SCRIPT
#!/bin/bash
set -e
mkdir -p /isomount/data /isomount/roota /isomount/rootc /isomount/efi /isomount/tmp
mkfs.ext4 -E nodiscard -F -L "H-STATE" "${partition_path}"1
mount "${partition_path}"1 /isomount/data
curl -L "\$(curl -L https://dl.google.com/dl/edgedl/chromeos/recovery/cloudready_recovery.conf | grep .bin.zip | tail -1 | cut -d'=' -f2)" -o /isomount/data/recovery.zip || { echo -e "ChromeOS recovery image download failed."; return 1; }
bsdtar -xvf /isomount/data/recovery.zip -C /root || { echo -e "Failed to extract the recovery image."; return 1; }
rm -f /isomount/data/recovery.zip
isomount="\$(losetup --show -fP \$(ls /root/chromeos_*.bin))"
for (( i=1; i<=12; i++ )); do
	(echo "x"; echo "u"; echo "\${i}"; echo "\$(blkid -o value -s PARTUUID "\${isomount}"p"\${i}")"; echo "r"; sleep 5; echo "w") | fdisk "${destination_device}" || { echo -e "Partition UUID update failed. Exiting.\n"; exit 1; }
	case \${i} in
		1)
			continue
		;;
		7)
			mkfs.ext4 -E nodiscard -F -L "ROOT-C" "${partition_path}""\${i}"
			if tune2fs -l "${partition_path}""\${i}" | grep 'Filesystem features' | grep -q -w large_dir; then tune2fs -O ^large_dir "${partition_path}""\${i}"; fi
			if tune2fs -l "${partition_path}""\${i}" | grep 'Filesystem features' | grep -q -w metadata_csum_seed; then tune2fs -O ^metadata_csum_seed "${partition_path}""\${i}"; fi
			if tune2fs -l "${partition_path}""\${i}" | grep 'Filesystem features' | grep -q -w orphan_file; then tune2fs -O ^orphan_file "${partition_path}""\${i}"; fi
			continue
		;;
		12)
			mount "\${isomount}"p12 /isomount/tmp
			mkfs.fat -n 'EFI' "${partition_path}""\${i}"
			mount "${partition_path}""\${i}" /isomount/efi
			cp -r /isomount/tmp/* /isomount/efi/
			umount /isomount/efi
			umount /isomount/tmp
			continue
		;;
		*)
			part_source="\${i}"
		;;
	esac
	dd if="\${isomount}"p"\${part_source}" of="${partition_path}""\${i}" bs=1M conv=notrunc status=progress
done
losetup -d "\${isomount}"
rm -rf /isomount/data/*
umount /isomount/data
if [ "${install_type}" == "image" ]; then
	mount "${partition_path}"7 /isomount/rootc
	mkdir -p /isomount/rootc/initramfs
	cd /isomount/rootc/initramfs
	mkdir -p etc proc sys tmp usr/bin usr/lib usr/mbin usr/sbin
	ln -s /usr/bin bin
	ln -s /usr/lib lib
	ln -s /usr/lib lib64
	ln -s /usr/sbin sbin
	for i in \$(ldd /usr/bin/bash | cut -d' ' -f3); do cp "\${i}" ./usr/lib/; done
	cp -a /usr/bin/bash ./usr/bin/
	for i in \$(ldd /usr/bin/busybox | cut -d' ' -f3); do cp "\${i}" ./usr/lib/; done
	cp -a /usr/bin/busybox ./usr/bin/
	for i in \$(ldd /usr/bin/blkid | cut -d' ' -f3); do cp "\${i}" ./usr/lib/; done
	cp -a /usr/bin/blkid ./usr/mbin/
	for i in \$(ldd /usr/bin/e2fsck | cut -d' ' -f3); do cp "\${i}" ./usr/lib/; done
	cp -a /usr/bin/e2fsck ./usr/mbin/
	for i in \$(ldd /usr/bin/losetup | cut -d' ' -f3); do cp "\${i}" ./usr/lib/; done
	cp -a /usr/bin/losetup ./usr/mbin/
	for i in \$(ldd /usr/bin/mkfs.ext4 | cut -d' ' -f3); do cp "\${i}" ./usr/lib/; done
	cp -a /usr/bin/mkfs.ext4 ./usr/mbin/
	for i in \$(ldd /usr/bin/modprobe | cut -d' ' -f3); do cp "\${i}" ./usr/lib/; done
	cp -a /usr/bin/modprobe ./usr/mbin/
	for i in \$(ldd /usr/bin/ntfs-3g | cut -d' ' -f3); do cp "\${i}" ./usr/lib/; done
	cp -a /usr/bin/ntfs-3g ./usr/mbin/
	for i in \$(ldd /usr/bin/ntfsfix | cut -d' ' -f3); do cp "\${i}" ./usr/lib/; done
	cp -a /usr/bin/ntfsfix ./usr/mbin/
	cp -a /usr/lib/ld-linux-x86-64.so.2 ./usr/lib/
	cp -a /usr/lib/libgcc_s.so.1 ./usr/lib/
	cat >./init <<'INITSCRIPT'
#!/usr/bin/bash
export PATH=/usr/mbin:/usr/sbin:/usr/bin
export LD_LIBRARY_PATH=/usr/lib

busybox mount -t proc none /proc
busybox mount -t sysfs none /sys
busybox mount -t devtmpfs none /dev
busybox --install -s
ln -s /proc/mounts /etc/mtab

if [ ! -z "\$flex_debug" ] && [ "\$flex_debug" -eq 1 ]; then
	echo 0 0 0 0 > /proc/sys/kernel/printk
	exec sh
fi

if { [ ! -z "\$img_uuid" ] || [ ! -z "\$img_part" ]; } && [ ! -z "\$img_path" ]; then
	flex_timeout=0
	until false; do
		if [ ! -z "\$img_uuid" ]; then img_part="\$(blkid --match-token PARTUUID=\$img_uuid | cut -d':' -f1)"; fi
		echo "\$img_uuid | \$img_part"
		if [ -b "\$img_part" ]; then break; fi
		if [ \$flex_timeout == 10 ]; then echo "The boot partition was not found, falling back to shell..." > /dev/kmsg; exec sh; fi
		flex_timeout=\$(( \$flex_timeout + 1 ))
		sleep 1
	done
else
	echo "The grub configuration is invalid, falling back to shell..." > /dev/kmsg
	exec sh
fi

if [ -e "\$img_part" ] && [ ! -z "\$img_path" ]; then
	mkdir /mainroot
	fstype=\$(blkid -s TYPE -o value "\$img_part")
	if [ "\$fstype" == "ntfs" ]; then
		ntfs-3g "\$img_part" /mainroot
	else
		mount -n "\$img_part" /mainroot
	fi
	if [ -f /mainroot/"\$img_path" ]; then
		if [ ! -b /dev/loop0 ]; then mknod -m660 /dev/loop0 b 7 0; fi
		losetup --direct-io=off -P /dev/loop0 /mainroot"\$img_path"
		bootdevice=/dev/loop0
	else
		echo "flex: ChromeOS loopfile \$img_path not found on device \$img_part..." > /dev/kmsg
		exec sh
	fi
fi

if [ ! -z "\$flex_debug" ] && [ "\$flex_debug" -eq 2 ]; then
	echo 0 0 0 0 > /proc/sys/kernel/printk
	exec sh
fi

if [ "\$bootimage" == "B" ]; then bootpart=5; else bootpart=3; fi
printf '\000' | dd of="\$bootdevice"p"\$bootpart" seek=\$((0x464 + 3)) conv=notrunc count=1 bs=1 status=none
mkdir -p chromeosroot
mount "\$bootdevice"p"\$bootpart" /chromeosroot

touch /chromeosroot/.nodelta
cat >/chromeosroot/usr/sbin/mount-encrypted <<'MOUNTS'
#!/bin/bash
if [ \$# -eq 0 ]; then
	if ! mountpoint -q /var && ! mountpoint -q /home/chronos; then
		mkdir -p /mnt/stateful_partition/encrypted/var
		mount -n --bind /mnt/stateful_partition/encrypted/var /var || exit 1
		mkdir -p /mnt/stateful_partition/encrypted/chronos
		mount -n --bind /mnt/stateful_partition/encrypted/chronos /home/chronos || exit 1
	fi
elif [ "\${1}" == "umount" ]; then
	umount /home/chronos
	umount /var
fi
MOUNTS
chmod 0755 /chromeosroot/usr/sbin/mount-encrypted
mv /chromeosroot/bin/chroot /chromeosroot/bin/chroot.orig
cat >/chromeosroot/bin/chroot <<'CHROOT'
#!/bin/bash
if [ "\$EUID" -eq 0 ] && [ "\${1}" == "." ] && [ "\${2}" == "/usr/bin/cros_installer" ]; then
rootpath=\$(echo "\$(rootdev)" | sed 's/.\$//')
rm -rf /mnt/stateful_partition/newroot /mnt/stateful_partition/rootc
mkdir -p /mnt/stateful_partition/newroot /mnt/stateful_partition/rootc
mount "\$rootpath"7 /mnt/stateful_partition/rootc
if [ "\$(rootdev)" == "\$rootpath"3 ]; then
echo "bootimage=B" > /mnt/stateful_partition/rootc/bootimage.cfg
else
echo "bootimage=A" > /mnt/stateful_partition/rootc/bootimage.cfg
fi
find ./lib/firmware | bsdcpio -o -H newc > /mnt/stateful_partition/rootc/firmwares.img
find ./lib/modules | bsdcpio -o -H newc > /mnt/stateful_partition/rootc/modules.img
umount /mnt/stateful_partition/rootc
chroot.orig "\$@"
else
chroot.orig "\$@"
fi
CHROOT
chmod 0755 /chromeosroot/bin/chroot

umount /chromeosroot
printf '\377' | dd of="\$bootdevice"p"\$bootpart" seek=\$((0x464 + 3)) conv=notrunc count=1 bs=1 status=none
mount -o ro "\$bootdevice"p"\$bootpart" /chromeosroot

mount --move /dev /chromeosroot/dev
mount --move /sys /chromeosroot/sys
mount --move /proc /chromeosroot/proc

sync

if [ ! -z "\$flex_debug" ] && [ "\$flex_debug" -eq 3 ]; then
	echo 0 0 0 0 > /roota/proc/sys/kernel/printk
	exec sh
fi

exec switch_root /chromeosroot /sbin/init "\$@"
INITSCRIPT
	chmod 0755 ./init
	find . | cpio -o -H newc > /isomount/rootc/initramfs.img
	mount -o ro "${partition_path}"3 /isomount/roota
	(cd /isomount/roota; find ./lib/firmware | cpio -o -H newc > /isomount/rootc/firmwares.img)
	(cd /isomount/roota; find ./lib/modules | cpio -o -H newc > /isomount/rootc/modules.img)
	umount /isomount/roota
	cd ../../..
	rm -r /isomount/rootc/initramfs
	umount /isomount/rootc
fi
mount "${partition_path}"12 /isomount/efi
if [ "${desktop}" == "full-devmode" ]; then
	sed -i 's@defaultA=2@defaultA=0@g' /isomount/efi/efi/boot/grub.cfg
	sed -i 's@defaultB=3@defaultB=1@g' /isomount/efi/efi/boot/grub.cfg
	sed -i 's@menuentry "local image A" {@local_image_A="@g' /isomount/efi/efi/boot/grub.cfg
	sed -i 's@menuentry "local image B" {@local_image_B="@g' /isomount/efi/efi/boot/grub.cfg
	sed -i 's@menuentry "verified image A" {@verified_image_A="@g' /isomount/efi/efi/boot/grub.cfg
	sed -i 's@menuentry "verified image B" {@verified_image_B="@g' /isomount/efi/efi/boot/grub.cfg
	sed -i 's@menuentry "Alternate USB Boot" {@Alternate_USB_Boot="@g' /isomount/efi/efi/boot/grub.cfg
	sed -i 's@}@"@g' /isomount/efi/efi/boot/grub.cfg
	cat >>/isomount/efi/efi/boot/grub.cfg <<MODEDGRUB

menuentry "local image A" {
  \\\$local_image_A ${dev_mode}
}

menuentry "local image B" {
  \\\$local_image_B ${dev_mode}
}

menuentry "verified image A" {
  \\\$verified_image_A ${dev_mode}
}

menuentry "verified image B" {
  \\\$verified_image_B ${dev_mode}
}
MODEDGRUB
fi
if [ "${install_type}" == "image" ]; then
	mkdir -p /mnt/etc/secureboot_key
	sbattach --signum 1 --detach /mnt/etc/secureboot_key/MOK.tmp /isomount/efi/efi/boot/grubx64.efi
	openssl pkcs7 -print_certs -inform der -in /mnt/etc/secureboot_key/MOK.tmp -out /mnt/etc/secureboot_key/MOK.pem
	openssl x509 -outform DER -in /mnt/etc/secureboot_key/MOK.pem -out /mnt/etc/secureboot_key/MOK.der
fi
umount /isomount/efi
INSTALL_SCRIPT
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_script
}

chroot_Debian()
{
prepare_bootstrap="
yes | DEBIAN_FRONTEND=noninteractive apt update
yes | DEBIAN_FRONTEND=noninteractive apt install bash bash-completion btrfs-progs bzip2 ca-certificates coreutils cryptsetup curl dosfstools e2fsprogs efibootmgr fdisk gzip lsof nano openssl sudo strace tar util-linux xz-utils zstd
"

cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/prepare_chroot <<PREPARE_CHROOT
yes | DEBIAN_FRONTEND=noninteractive apt install debootstrap
debootstrap --arch=amd64 --include=ca-certificates,console-setup,dirmngr,gpg,kbd,locales bookworm /mnt http://deb.debian.org/debian
PREPARE_CHROOT
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/prepare_chroot

cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/chroot_init <<CHROOT_INIT
#!/bin/bash
set -e
cat >/etc/apt/sources.list <<'SOURCESLIST'
deb http://deb.debian.org/debian bookworm main contrib non-free non-free-firmware
# deb-src http://deb.debian.org/debian bookworm main contrib non-free non-free-firmware

deb http://deb.debian.org/debian-security/ bookworm-security main contrib non-free non-free-firmware
# deb-src http://deb.debian.org/debian-security/ bookworm-security main contrib non-free non-free-firmware

deb http://deb.debian.org/debian bookworm-updates main contrib non-free non-free-firmware
# deb-src http://deb.debian.org/debian bookworm-updates main contrib non-free non-free-firmware
SOURCESLIST
yes | DEBIAN_FRONTEND=noninteractive apt update
yes | DEBIAN_FRONTEND=noninteractive apt dist-upgrade
echo -e 'APT::Install-Recommends "0";\nAPT::Get::Install-Recommends "false";' > /etc/apt/apt.conf.d/99linuxloops
echo -e 'Dpkg::Options {\n  "--force-confdef";\n};' > /etc/apt/apt.conf.d/71debconf
yes | DEBIAN_FRONTEND=noninteractive apt install linux-image-amd64 linux-headers-amd64 dkms firmware-linux firmware-atheros firmware-iwlwifi firmware-realtek wireless-regdb bash sudo modemmanager network-manager wpasupplicant bluez cryptsetup-initramfs e2fsprogs ntfs-3g nano acpid curl thermald bash-completion gnupg-utils policykit-1 xdg-user-dirs zstd fwupd-signed patchutils net-tools usb-modeswitch upower efibootmgr grub-efi grub-efi-amd64-signed os-prober shim-signed amd64-microcode intel-microcode lsb-release sbsigntool mokutil dosfstools btrfs-progs
echo -e 'sign_tool="/etc/dkms/sign_helper.sh"' >> /etc/dkms/framework.conf
echo -e '#!/bin/sh\n/lib/modules/"\${1}"/build/scripts/sign-file sha512 /var/lib/shim-signed/mok/MOK.priv /var/lib/shim-signed/mok/MOK.der "\${2}"' > /etc/dkms/sign_helper.sh
chmod 0755 /etc/dkms/sign_helper.sh
CHROOT_INIT
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/chroot_init

hardware_support="alsa-utils alsa-ucm-conf alsa-topology-conf at-spi2-core avahi-discover cups cups-browsed libnss-mdns pipewire-audio pipewire-alsa pipewire-jack pipewire-pulse wireplumber system-config-printer xserver-xorg"
basic_packages="gvfs-fuse packagekit udisks2 xdg-user-dirs-gtk"
basic_themes="adwaita-icon-theme breeze-gtk-theme breeze-icon-theme fonts-dejavu fonts-noto fonts-roboto gnome-backgrounds materia-gtk-theme oxygen-icon-theme papirus-icon-theme"
specific_packages="desktop-base plymouth-themes synaptic"
desktop_base="${hardware_support} ${basic_packages} ${basic_themes} ${specific_packages}"
case "${desktop}" in
	'budgie')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter budgie-desktop arc-theme nemo tilix paper-icon-theme
"
	;;
	'cinnamon')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter cinnamon cinnamon-core network-manager-gnome blueman gnome-terminal nemo
"
	;;
	'cinnamon-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter task-cinnamon-desktop network-manager-gnome blueman
"
	;;
	'enlightenment')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter enlightenment terminology
yes | DEBIAN_FRONTEND=noninteractive apt purge network-manager
yes | DEBIAN_FRONTEND=noninteractive apt install connman
find /usr/lib -type f -name enlightenment_system -exec chmod 4755 {} \;
"
	;;
	'gnome')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} gdm3 gnome-session gnome-shell gnome-control-center gnome-terminal nautilus gnome-icon-theme gnome-keyring libpam-gnome-keyring gnome-packagekit
"
	;;
	'gnome-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} gdm3 task-gnome-desktop
"
	;;
	'kde')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} sddm sddm-theme-breeze kde-plasma-desktop kwin-x11 dolphin plasma-discover konsole plasma-nm plasma-pa bluedevil libpam-kwallet5 powerdevil plasma-widgets-addons systemsettings
"
	;;
	'kde-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} sddm sddm-theme-breeze task-kde-desktop
"
	;;
	'lxde')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter lxde-core lxterminal pcmanfm lxde-icon-theme network-manager-gnome blueman lxappearance
"
	;;
	'lxde-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter task-lxde-desktop network-manager-gnome blueman
"
	;;
	'lxqt')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter lxqt-core qterminal pcmanfm-qt lxqt-theme-debian network-manager-gnome blueman openbox lxqt-powermanagement lxqt-themes
"
	;;
	'lxqt-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter task-lxqt-desktop network-manager-gnome blueman
"
	;;
	'mate')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter mate-desktop mate-session-manager marco mate-control-center mate-notification-daemon mate-applets mate-indicator-applet mate-applet-brisk-menu mate-themes mate-icon-theme mate-terminal caja network-manager-gnome blueman mate-media mate-power-manager
"
	;;
	'mate-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter task-mate-desktop blueman
"
	;;
	'xfce')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter xfce4 xfce4-power-manager-plugins xfce4-terminal thunar xfce4-notifyd network-manager-gnome blueman
"
	;;
	'xfce-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter task-xfce-desktop blueman
"
	;;
esac
cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_desktop <<INSTALL_DESKTOP
#!/bin/bash
set -e
if [ "${desktop}" == "none" ]; then exit 0; fi
${install_desktop}
mkdir -p /usr/share/glib-2.0/schemas
cat >/usr/share/glib-2.0/schemas/zz_linuxloops.gschema.override <<'DCONF'
[org.gnome.desktop.background:Budgie]
picture-uri="file:///usr/share/images/desktop-base/login-background.svg"
[org.gnome.desktop.interface:Budgie]
gtk-theme="Arc"
icon-theme="Papirus"
[org.cinnamon.desktop.background]
picture-uri="file:///usr/share/images/desktop-base/login-background.svg"
[org.cinnamon.desktop.interface]
gtk-theme="Materia"
icon-theme="Papirus"
[org.cinnamon.desktop.wm.preferences]
theme="Materia"
[org.mate.interface]
icon-theme='Papirus'
gtk-theme='Materia'
[org.mate.Marco.general]
theme='Materia'
DCONF
if [ ! -z "\$(command -v glib-compile-schemas)" ]; then glib-compile-schemas /usr/share/glib-2.0/schemas/; fi
mkdir -p /etc/skel/.config/xfce4/xfconf/xfce-perchannel-xml
cat > '/etc/skel/.config/xfce4/xfconf/xfce-perchannel-xml/xsettings.xml' <<'XFCETHEME'
<?xml version="1.0" encoding="UTF-8"?>
<channel name="xsettings" version="1.0">
  <property name="Net" type="empty">
    <property name="IconThemeName" type="string" value="Papirus"/>
    <property name="ThemeName" type="string" value="Materia"/>
  </property>
</channel>
XFCETHEME
mkdir -p /etc/xdg/autostart
cat >/etc/xdg/autostart/budgie-nemo.desktop <<'NEMODESKTOP'
[Desktop Entry]
Type=Application
Name=Nemo
Comment=Start Nemo desktop at log in
Exec=nemo-desktop
OnlyShowIn=Budgie;
AutostartCondition=GSettings org.nemo.desktop show-desktop-icons
X-GNOME-AutoRestart=true
NoDisplay=true
NEMODESKTOP
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[Seat:*]\ngreeter-hide-users=false\n' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
INSTALL_DESKTOP
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_desktop

cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_user <<INSTALL_USER
#!/bin/bash
set -e
useradd -s /bin/bash -m '${username}'
echo -e '${userpass}\n${userpass}' | passwd '${username}'
usermod -aG sudo '${username}'
INSTALL_USER
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_user

surface_remove="linux-headers-* linux-image-*"
initramfs_type="initramfstools"
if [ ! -z "${custom_packages}" ]; then
	echo -e "#!/bin/bash\nset -e\nyes | DEBIAN_FRONTEND=noninteractive apt install ${custom_packages}" > "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_packages
	chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_packages
fi
if [ ! -z "${custom_script}" ]; then
	cp "${custom_script}" "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_script
	chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_script
fi
}

chroot_Devuan()
{
prepare_bootstrap="
yes | DEBIAN_FRONTEND=noninteractive apt update
yes | DEBIAN_FRONTEND=noninteractive apt install bash bash-completion btrfs-progs bzip2 ca-certificates coreutils cryptsetup curl dosfstools e2fsprogs efibootmgr fdisk gzip lsof nano openssl sudo strace tar util-linux xz-utils zstd
"

cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/prepare_chroot <<PREPARE_CHROOT
yes | DEBIAN_FRONTEND=noninteractive apt install debootstrap
LD_LIBRARY_PATH=/usr/local/lib64:/usr/local/lib:/usr/lib64:/usr/lib:/lib64 debootstrap --arch=amd64 --include=ca-certificates,console-setup,dirmngr,gpg,kbd,locales daedalus /mnt http://deb.devuan.org/merged
PREPARE_CHROOT
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/prepare_chroot

cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/chroot_init <<CHROOT_INIT
#!/bin/bash
set -e
cat >/etc/apt/sources.list <<'SOURCESLIST'
deb http://deb.devuan.org/merged daedalus main contrib non-free non-free-firmware
deb http://deb.devuan.org/merged daedalus-updates main contrib non-free non-free-firmware
deb http://deb.devuan.org/merged daedalus-security main contrib non-free non-free-firmware
#deb http://deb.devuan.org/merged daedalus-backports main contrib non-free non-free-firmware
SOURCESLIST
yes | DEBIAN_FRONTEND=noninteractive apt update
yes | DEBIAN_FRONTEND=noninteractive apt dist-upgrade
echo -e 'APT::Install-Recommends "0";\nAPT::Get::Install-Recommends "false";' > /etc/apt/apt.conf.d/99linuxloops
echo -e 'Dpkg::Options {\n  "--force-confdef";\n};' > /etc/apt/apt.conf.d/71debconf
yes | DEBIAN_FRONTEND=noninteractive apt install linux-image-amd64 linux-headers-amd64 dkms firmware-linux firmware-atheros firmware-iwlwifi firmware-realtek wireless-regdb bash sudo modemmanager network-manager wpasupplicant bluez cryptsetup-initramfs e2fsprogs ntfs-3g nano acpid curl thermald bash-completion gnupg-utils policykit-1 xdg-user-dirs zstd fwupd-signed patchutils net-tools usb-modeswitch upower efibootmgr grub-efi grub-efi-amd64-signed os-prober shim-signed amd64-microcode intel-microcode lsb-release sbsigntool mokutil dosfstools btrfs-progs
echo -e 'sign_tool="/etc/dkms/sign_helper.sh"' >> /etc/dkms/framework.conf
echo -e '#!/bin/sh\n/lib/modules/"\${1}"/build/scripts/sign-file sha512 /var/lib/shim-signed/mok/MOK.priv /var/lib/shim-signed/mok/MOK.der "\${2}"' > /etc/dkms/sign_helper.sh
chmod 0755 /etc/dkms/sign_helper.sh
dbus-uuidgen > /etc/machine-id
CHROOT_INIT
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/chroot_init

hardware_support="alsa-utils alsa-ucm-conf alsa-topology-conf at-spi2-core avahi-discover cups cups-browsed libnss-mdns pulseaudio system-config-printer xserver-xorg"
basic_packages="gvfs-fuse packagekit udisks2 xdg-user-dirs-gtk"
basic_themes="adwaita-icon-theme breeze-gtk-theme breeze-icon-theme fonts-dejavu fonts-noto fonts-roboto gnome-backgrounds materia-gtk-theme oxygen-icon-theme papirus-icon-theme"
specific_packages="desktop-base devuan-baseconf synaptic"
desktop_base="${hardware_support} ${basic_packages} ${basic_themes} ${specific_packages}"
case "${desktop}" in
	'budgie')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter budgie-desktop budgie-desktop-view arc-theme nautilus tilix paper-icon-theme
"
	;;
	'cinnamon')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter cinnamon network-manager-gnome blueman gnome-terminal nemo
"
	;;
	'cinnamon-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter task-cinnamon-desktop network-manager-gnome blueman
"
	;;
	'enlightenment')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter enlightenment terminology
yes | DEBIAN_FRONTEND=noninteractive apt purge network-manager
yes | DEBIAN_FRONTEND=noninteractive apt install connman
find /usr/lib -type f -name enlightenment_system -exec chmod 4755 {} \;
"
	;;
	'gnome')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} gdm3 gnome-session gnome-shell gnome-control-center gnome-terminal nautilus gnome-icon-theme gnome-keyring libpam-gnome-keyring gnome-packagekit
"
	;;
	'gnome-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} gdm3 task-gnome-desktop
"
	;;
	'kde')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} sddm sddm-theme-breeze kde-plasma-desktop kwin-x11 dolphin plasma-discover konsole plasma-nm plasma-pa bluedevil libpam-kwallet5 powerdevil plasma-widgets-addons systemsettings
"
	;;
	'kde-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} sddm sddm-theme-breeze task-kde-desktop
"
	;;
	'lxde')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter lxde-core lxterminal pcmanfm lxde-icon-theme network-manager-gnome blueman lxappearance
"
	;;
	'lxde-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter task-lxde-desktop network-manager-gnome blueman
"
	;;
	'lxqt')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter lxqt-core qterminal pcmanfm-qt lxqt-theme-debian network-manager-gnome blueman openbox lxqt-powermanagement lxqt-themes
"
	;;
	'lxqt-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter task-lxqt-desktop network-manager-gnome blueman
"
	;;
	'mate')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter mate-desktop mate-session-manager marco mate-control-center mate-notification-daemon mate-applets mate-indicator-applet mate-applet-brisk-menu mate-themes mate-icon-theme mate-terminal caja network-manager-gnome blueman mate-media mate-power-manager
"
	;;
	'mate-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter task-mate-desktop blueman
"
	;;
	'xfce')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter xfce4 xfce4-power-manager-plugins xfce4-terminal thunar xfce4-notifyd network-manager-gnome blueman
"
	;;
	'xfce-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter task-xfce-desktop blueman
yes | DEBIAN_FRONTEND=noninteractive apt purge slim
"
	;;
esac
cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_desktop <<INSTALL_DESKTOP
#!/bin/bash
set -e
if [ "${desktop}" == "none" ]; then exit 0; fi
${install_desktop}
cat >/usr/share/glib-2.0/schemas/zz_linuxloops.gschema.override <<'DCONF'
[org.gnome.desktop.background:Budgie]
picture-uri="file:///usr/share/images/desktop-base/your-way_deepsea-wide-large.svg"
[org.gnome.desktop.interface:Budgie]
gtk-theme="Arc"
icon-theme="Papirus"
[org.cinnamon.desktop.background]
picture-uri="file:///usr/share/images/desktop-base/your-way_deepsea-wide-large.svg"
[org.cinnamon.desktop.interface]
gtk-theme="Materia"
icon-theme="Papirus"
[org.cinnamon.desktop.wm.preferences]
theme="Materia"
DCONF
if [ ! -z "\$(command -v glib-compile-schemas)" ]; then glib-compile-schemas /usr/share/glib-2.0/schemas/; fi
mkdir -p /etc/xdg/autostart
cat >/etc/xdg/autostart/budgie-nemo.desktop <<'NEMODESKTOP'
[Desktop Entry]
Type=Application
Name=Nemo
Comment=Start Nemo desktop at log in
Exec=nemo-desktop
OnlyShowIn=Budgie;
AutostartCondition=GSettings org.nemo.desktop show-desktop-icons
X-GNOME-AutoRestart=true
NoDisplay=true
NEMODESKTOP
mkdir -p /etc/lightdm/lightdm.conf.d /etc/sddm.conf.d
echo -e '[Seat:*]\ngreeter-hide-users=false\n' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
echo -e '[greeter]\nbackground = /usr/share/images/desktop-base/your-way_deepsea-wide-large.svg\nuser-background = true' > /etc/lightdm/lightdm-gtk-greeter.conf
echo -e '[Greeter]\nbackground = /usr/share/images/desktop-base/your-way_deepsea-wide-large.svg\ndraw-user-backgrounds = true' > /etc/lightdm/slick-greeter.conf
echo -e '[Theme]\nCurrent = breeze' > /etc/sddm.conf.d/99-linuxloops.conf
INSTALL_DESKTOP
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_desktop

cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_user <<INSTALL_USER
#!/bin/bash
set -e
useradd -s /bin/bash -m '${username}'
echo -e '${userpass}\n${userpass}' | passwd '${username}'
usermod -aG sudo '${username}'
INSTALL_USER
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_user

initramfs_type="initramfstools"
if [ ! -z "${custom_packages}" ]; then
	echo -e "#!/bin/bash\nset -e\nyes | DEBIAN_FRONTEND=noninteractive apt install ${custom_packages}" > "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_packages
	chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_packages
fi
if [ ! -z "${custom_script}" ]; then
	cp "${custom_script}" "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_script
	chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_script
fi
}

chroot_Elementary()
{
prepare_bootstrap="
yes | DEBIAN_FRONTEND=noninteractive apt update
yes | DEBIAN_FRONTEND=noninteractive apt install bash bash-completion btrfs-progs bzip2 ca-certificates coreutils cryptsetup curl dosfstools e2fsprogs efibootmgr fdisk gzip lsof nano openssl sudo strace tar util-linux xz-utils zstd
"

cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/prepare_chroot <<PREPARE_CHROOT
yes | DEBIAN_FRONTEND=noninteractive apt install debootstrap
debootstrap --arch=amd64 --include=ca-certificates,console-setup,dirmngr,gpg,gpg-agent,kbd,locales,python3-cffi-backend,software-properties-common jammy /mnt http://archive.ubuntu.com/ubuntu
PREPARE_CHROOT
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/prepare_chroot

cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/chroot_init <<CHROOT_INIT
#!/bin/bash
set -e
cat >/etc/apt/sources.list <<'SOURCESLIST'
deb http://archive.ubuntu.com/ubuntu jammy main restricted universe multiverse
# deb-src http://archive.ubuntu.com/ubuntu jammy main restricted universe multiverse

deb http://archive.ubuntu.com/ubuntu jammy-updates main restricted universe multiverse
# deb-src http://archive.ubuntu.com/ubuntu jammy-updates main restricted universe multiverse

deb http://archive.ubuntu.com/ubuntu jammy-security main restricted universe multiverse
# deb-src http://archive.ubuntu.com/ubuntu jammy-security main restricted universe multiverse
SOURCESLIST
yes | DEBIAN_FRONTEND=noninteractive apt update
yes | DEBIAN_FRONTEND=noninteractive apt dist-upgrade
echo -e 'Package: *\nPin: release o=LP-PPA-elementary-os-*\nPin-Priority: 1000' > /etc/apt/preferences.d/elementary.pref
add-apt-repository ppa:elementary-os/stable -y
add-apt-repository ppa:elementary-os/os-patches -y
yes | DEBIAN_FRONTEND=noninteractive apt update
yes | DEBIAN_FRONTEND=noninteractive apt install -o APT::Immediate-Configure=false --reinstall \$(apt list --installed | cut -d'/' -f1 | sed '1d' | sed -z 's@\n@ @g')
yes | DEBIAN_FRONTEND=noninteractive dpkg --configure -a
echo -e 'Dpkg::Options {\n  "--force-confdef";\n};' > /etc/apt/apt.conf.d/71debconf
yes | DEBIAN_FRONTEND=noninteractive apt install linux-generic linux-headers-generic dkms linux-firmware wireless-regdb bash sudo modemmanager network-manager wpasupplicant bluez cryptsetup-initramfs e2fsprogs ntfs-3g nano acpid curl thermald bash-completion gnupg-utils policykit-1 xdg-user-dirs zstd fwupd patchutils net-tools usb-modeswitch upower efibootmgr grub-efi grub-efi-amd64-signed os-prober shim-signed update-manager-core sbsigntool mokutil dosfstools btrfs-progs
CHROOT_INIT
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/chroot_init

case "${desktop}" in
	'full')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install pantheon-greeter elementary-desktop
yes | DEBIAN_FRONTEND=noninteractive apt purge gdm3 ubuntu-session
"
	;;
esac
cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_desktop <<INSTALL_DESKTOP
#!/bin/bash
set -e
if [ "${desktop}" == "none" ]; then exit 0; fi
${install_desktop}
INSTALL_DESKTOP
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_desktop

cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_user <<INSTALL_USER
#!/bin/bash
set -e
useradd -s /bin/bash -m '${username}'
echo -e '${userpass}\n${userpass}' | passwd '${username}'
usermod -aG sudo '${username}'
INSTALL_USER
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_user

surface_remove="linux-generic-* linux-headers-* linux-image-* linux-modules-*"
initramfs_type="initramfstools"
if [ ! -z "${custom_packages}" ]; then
	echo -e "#!/bin/bash\nset -e\nyes | DEBIAN_FRONTEND=noninteractive apt install ${custom_packages}" > "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_packages
	chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_packages
fi
if [ ! -z "${custom_script}" ]; then
	cp "${custom_script}" "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_script
	chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_script
fi
}

chroot_Fedora()
{
prepare_bootstrap="
dnf update -y
dnf install -y bash bash-completion btrfs-progs bzip2 ca-certificates coreutils cryptsetup curl dosfstools e2fsprogs efibootmgr gzip lsof nano openssl sudo strace tar util-linux xz zstd
"

cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/prepare_chroot <<PREPARE_CHROOT
#!/bin/bash
set -e
dnf install --installroot=/mnt --releasever / -y @core
PREPARE_CHROOT
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/prepare_chroot

cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/chroot_init <<CHROOT_INIT
#!/bin/bash
set -e
dnf install -y https://mirrors.rpmfusion.org/free/fedora/rpmfusion-free-release-\$(rpm -E %fedora).noarch.rpm https://mirrors.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-\$(rpm -E %fedora).noarch.rpm
dnf install -y kernel kernel-headers akmods dkms linux-firmware iwl100-firmware iwl1000-firmware iwl105-firmware iwl135-firmware iwl2000-firmware iwl2030-firmware iwl3160-firmware iwl5000-firmware iwl5150-firmware iwl6000g2a-firmware iwl6000g2b-firmware iwl6050-firmware iwl7260-firmware wireless-regdb glibc-locale-source ntfs-3g bash sudo ModemManager NetworkManager-bluetooth NetworkManager-tui NetworkManager-wifi wpa_supplicant bluez cryptsetup e2fsprogs ntfsprogs nano acpid curl thermald bash-completion gpg polkit xdg-user-dirs zstd fwupd patchutils net-tools usb_modeswitch upower efibootmgr nss-mdns grub2-efi os-prober shim microcode_ctl sbsigntools mokutil selinux-policy-targeted dosfstools btrfs-progs
CHROOT_INIT
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/chroot_init

hardware_support="alsa-lib alsa-utils alsa-sof-firmware alsa-topology at-spi2-core avahi cups cups-browsed nss-mdns system-config-printer xorg-x11-drivers"
basic_packages="gvfs-fuse PackageKit udisks2 xdg-user-dirs-gtk"
basic_themes="adwaita-icon-theme breeze-gtk breeze-icon-theme dejavu-sans-fonts google-noto-sans-fonts google-roboto-fonts gnome-backgrounds materia-gtk-theme oxygen-icon-theme papirus-icon-theme"
specific_packages="dnfdragora dnf-plugin-system-upgrade f37-backgrounds plymouth-system-theme"
desktop_base="${hardware_support} ${basic_packages} ${basic_themes} ${specific_packages}"
desktop_services="avahi-daemon.service cups.service cups-browsed.service"
case "${desktop}" in
	'cinnamon')
	install_desktop="
dnf install -y ${desktop_base} lightdm slick-greeter cinnamon clutter-gtk gnome-terminal nemo paper-icon-theme blueman dnfdragora-updater
"
	;;
	'cinnamon-full')
	install_desktop="
dnf install -y ${desktop_base} lightdm slick-greeter @cinnamon-desktop-environment dnfdragora-updater
"
	;;
	'gnome')
	install_desktop="
dnf install -y ${desktop_base} gdm gnome-shell nautilus gnome-terminal gnome-backgrounds gnome-software gnome-keyring gnome-keyring-pam
"
	;;
	'gnome-full')
	install_desktop="
dnf install -y ${desktop_base} gdm @gnome-desktop
"
	;;
	'kde')
	install_desktop="
dnf install -y ${desktop_base} sddm sddm-breeze plasma-desktop plasma-discover plasma-nm bluedevil dolphin konsole pam-kwallet
"
	;;
	'kde-full')
	install_desktop="
dnf install -y ${desktop_base} sddm sddm-breeze @kde-desktop-environment
"
	;;
	'lxde')
	install_desktop="
dnf install -y ${desktop_base} lightdm slick-greeter @lxde-desktop-environment lxde-themes blueman dnfdragora-updater
"
	;;
	'lxqt')
	install_desktop="
dnf install -y ${desktop_base} lightdm slick-greeter @lxqt-desktop-environment lxqt-themes blueman
"
	;;
	'mate')
	install_desktop="
dnf install -y ${desktop_base} lightdm slick-greeter mate-desktop marco network-manager-applet blueberry mate-session-manager mate-media mate-power-manager caja mate-terminal mate-themes libgnome-keyring dnfdragora-updater
"
	;;
	'mate-full')
	install_desktop="
dnf install -y ${desktop_base} lightdm slick-greeter @mate-desktop-environment dnfdragora-updater
"
	;;
	'xfce')
	install_desktop="
dnf install -y ${desktop_base} lightdm slick-greeter xfdesktop xfce4-session xfce4-settings xfce4-notifyd yaru-theme network-manager-applet blueman thunar xfce4-appfinder xfce4-pulseaudio-plugin xfce4-power-manager xfce4-terminal  xfce4-settings libgnome-keyring dnfdragora-updater
"
	;;
	'xfce-full')
	install_desktop="
dnf install -y ${desktop_base} lightdm slick-greeter @xfce-desktop-environment dnfdragora-updater
"
	;;
esac
cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_desktop <<INSTALL_DESKTOP
#!/bin/bash
set -e
if [ "${desktop}" == "none" ]; then exit 0; fi
${install_desktop}
systemctl enable ${desktop_services}
if [ -f /usr/lib/systemd/user/gnome-keyring-daemon.service ]; then systemctl enable --global gnome-keyring-daemon.service; fi
mkdir -p /usr/share/glib-2.0/schemas
cat >/usr/share/glib-2.0/schemas/zz_linuxloops.gschema.override <<'DCONF'
[org.mate.interface]
icon-theme='Papirus-Light'
DCONF
if [ ! -z "\$(command -v glib-compile-schemas)" ]; then glib-compile-schemas /usr/share/glib-2.0/schemas/; fi
dnf swap -y wireplumber pipewire-media-session
mkdir -p /etc/skel/.config/xfce4/xfconf/xfce-perchannel-xml
cat > '/etc/skel/.config/xfce4/xfconf/xfce-perchannel-xml/xsettings.xml' <<'XFCETHEME'
<?xml version="1.0" encoding="UTF-8"?>
<channel name="xsettings" version="1.0">
  <property name="Net" type="empty">
    <property name="IconThemeName" type="string" value="Papirus"/>
    <property name="ThemeName" type="string" value="Materia-dark"/>
  </property>
</channel>
XFCETHEME
mkdir -p /etc/lightdm
echo -e '[greeter]\nbackground = /usr/share/backgrounds/default.png\nuser-background = true' > /etc/lightdm/lightdm-gtk-greeter.conf
echo -e '[Greeter]\nbackground = /usr/share/backgrounds/default.png\ndraw-user-backgrounds = true' > /etc/lightdm/slick-greeter.conf
INSTALL_DESKTOP
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_desktop

cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_user <<INSTALL_USER
#!/bin/bash
set -e
useradd -s /bin/bash -m '${username}'
echo -e '${userpass}\n${userpass}' | passwd '${username}'
usermod -aG wheel '${username}'
echo "%wheel      ALL=(ALL) ALL" > /etc/sudoers.d/90-wheel
INSTALL_USER
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_user

surface_remove="kernel kernel-headers"
initramfs_type="dracut"
if [ ! -z "${custom_packages}" ]; then
	echo -e "#!/bin/bash\nset -e\ndnf install -y ${custom_packages}" > "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_packages
	chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_packages
fi
if [ ! -z "${custom_script}" ]; then
	cp "${custom_script}" "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_script
	chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_script
fi
}

chroot_Gentoo-openrc()
{
prepare_bootstrap="
curl -l https://archlinux.org/mirrorlist/?ip_version=4 -o /etc/pacman.d/mirrorlist
sed -i 's@#Server = https://geo.mirror.pkgbuild.com@Server = https://geo.mirror.pkgbuild.com@g' /etc/pacman.d/mirrorlist
pacman -Syu --noconfirm --needed bash bash-completion btrfs-progs bzip2 ca-certificates coreutils cryptsetup curl dosfstools e2fsprogs efibootmgr gzip lsof nano openssl reflector sudo strace tar util-linux xz zstd
"

cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/prepare_chroot <<PREPARE_CHROOT
curl -L https://gentoo.osuosl.org/releases/amd64/autobuilds/"$(curl -L https://gentoo.osuosl.org/releases/amd64/autobuilds/latest-stage3-amd64-openrc.txt | sed '/^#/d' | cut -d' ' -f1)" -o /gentoo-stage3.tar.xz
tar xf /gentoo-stage3.tar.xz -C /mnt
rm /gentoo-stage3.tar.xz
PREPARE_CHROOT
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/prepare_chroot

cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/chroot_init <<CHROOT_INIT
#!/bin/bash
set -e
/linuxloops/install_settings
mkdir /etc/portage/package.license 
echo '*/* *' >> /etc/portage/package.license/custom
echo "VIDEO_CARDS=\"amdgpu dummy fbdev intel nouveau qxl radeon radeonsi vesa virtualbox vmware\"" >> /etc/portage/make.conf
echo "USE=\"alsa bluetooth caps cdda cryptsetup dbus device-mapper elogind icu lvm minizip mount modemmanager networkmanager wpasupplicant ogg policykit pulseaudio raw -systemd tracker tty-helpers udev udisks vala\"" >> /etc/portage/make.conf
echo "GRUB_PLATFORMS=\"efi-32 efi-64\"" >> /etc/portage/make.conf
echo -e "MAKEOPTS=\"--jobs 4 --load-average 5\"\nEMERGE_DEFAULT_OPTS=\"--jobs 4\"" >> /etc/portage/make.conf
emerge --sync
eselect profile set default/linux/amd64/17.1
emerge -uDN @world sys-kernel/gentoo-kernel-bin sys-kernel/linux-firmware net-wireless/wireless-regdb app-admin/sudo sys-fs/ntfs3g net-misc/networkmanager sys-fs/cryptsetup app-editors/nano dev-vcs/git sys-power/acpid net-misc/curl sys-power/thermald app-shells/bash-completion app-crypt/gnupg sys-auth/polkit app-arch/zstd sys-auth/pambase dev-lang/rust-bin sys-boot/grub sys-boot/os-prober sys-boot/shim app-crypt/sbsigntools sys-fs/dosfstools sys-fs/btrfs-progs
rc-update add bluetooth default
rc-update add NetworkManager default
CHROOT_INIT
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/chroot_init

newuse="sed -i 's/^USE=.*/USE=\"alsa bluetooth caps cdda dbus elogind icu minizip mount modemmanager networkmanager wpasupplicant ogg policykit pulseaudio raw -systemd tracker tty-helpers udev udisks vala appindicator cairo client cups drm eds egl gles2 gnome-online-accounts gtk gtk3 introspection jpeg libnotify lock mdnsresponder-compat ogg opengl qml text theora tracker wayland X xa xorg zeroconf\"/g' /etc/portage/make.conf"
desktop_base="net-print/cups net-print/cups-filters sys-boot/plymouth"
case "${desktop}" in
	'cinnamon')
	install_desktop="
emerge -uN ${desktop_base} x11-misc/lightdm gnome-extra/cinnamon x11-terms/gnome-terminal gnome-extra/nemo
sed -i 's@DISPLAYMANAGER=\"xdm\"@DISPLAYMANAGER=\"lightdm\"@g' /etc/conf.d/display-manager
rc-update add display-manager default
"
	;;
	'enlightenment')
	newuse="sed -i 's/^USE=.*/USE=\"alsa bluetooth caps cdda dbus elogind icu minizip mount modemmanager networkmanager wpasupplicant ogg policykit pulseaudio raw -systemd tracker tty-helpers udev udisks vala appindicator cairo client cups drm eds egl gles2 gnome-online-accounts gtk gtk3 introspection jpeg libnotify lock mdnsresponder-compat ogg opengl qml text theora tracker wayland X xa xorg zeroconf gles2-only -opengl\"/g' /etc/portage/make.conf"
	install_desktop="
emerge -uN ${desktop_base} x11-misc/lightdm x11-wm/enlightenment x11-terms/terminology
sed -i 's@DISPLAYMANAGER=\"xdm\"@DISPLAYMANAGER=\"lightdm\"@g' /etc/conf.d/display-manager
rc-update add display-manager default
"
	;;
	'gnome')
	install_desktop="
emerge -uN ${desktop_base} gnome-base/gdm gnome-base/gnome x11-terms/gnome-terminal gnome-base/nautilus
sed -i 's@DISPLAYMANAGER=\"xdm\"@DISPLAYMANAGER=\"gdm\"@g' /etc/conf.d/display-manager
rc-update add display-manager default
"
	;;
	'kde')
	install_desktop="
emerge -uN ${desktop_base} x11-misc/sddm kde-plasma/plasma-meta kde-apps/konsole kde-plasma/plasma-nm kde-apps/dolphin kde-plasma/discover
sed -i 's@DISPLAYMANAGER=\"xdm\"@DISPLAYMANAGER=\"sddm\"@g' /etc/conf.d/display-manager
rc-update add display-manager default
"
	;;
	'lxqt')
	install_desktop="
emerge -uN ${desktop_base} x11-misc/lightdm lxqt-base/lxqt-meta x11-terms/qterminal gnome-extra/nm-applet lxqt-base/lxqt-powermanagement
sed -i 's@DISPLAYMANAGER=\"xdm\"@DISPLAYMANAGER=\"lightdm\"@g' /etc/conf.d/display-manager
rc-update add display-manager default
"
	;;
	'mate')
	install_desktop="
emerge -uN ${desktop_base} x11-misc/lightdm mate-base/mate x11-terms/mate-terminal gnome-extra/nm-applet mate-extra/mate-power-manager mate-extra/mate-media
sed -i 's@DISPLAYMANAGER=\"xdm\"@DISPLAYMANAGER=\"lightdm\"@g' /etc/conf.d/display-manager
rc-update add display-manager default
"
	;;
	'xfce')
	install_desktop="
emerge -uN ${desktop_base} x11-misc/lightdm xfce-base/xfce4-meta x11-terms/xfce4-terminal gnome-extra/nm-applet net-wireless/blueman xfce-base/xfce4-power-manager
sed -i 's@DISPLAYMANAGER=\"xdm\"@DISPLAYMANAGER=\"lightdm\"@g' /etc/conf.d/display-manager
rc-update add display-manager default
"
	;;
esac
cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_desktop <<INSTALL_DESKTOP
#!/bin/bash
set -e
if [ "${desktop}" == "none" ]; then exit 0; fi
${newuse}
echo -e "media-libs/libsndfile minimal\nnet-print/cups -zeroconf" > /etc/portage/package.use/dep_cycle_fix
${install_desktop}
rm /etc/portage/package.use/dep_cycle_fix
emerge -uDN @world
rc-update add cupsd default
INSTALL_DESKTOP
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_desktop

cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_user <<INSTALL_USER
#!/bin/bash
set -e
sed -i 's/^password/#password/g' /etc/pam.d/system-auth
echo 'password       required        pam_unix.so nullok sha512 shadow' >> /etc/pam.d/system-auth
useradd -s /bin/bash -m '${username}'
echo -e '${userpass}\n${userpass}' | passwd '${username}'
usermod -aG wheel '${username}'
if [ ! -d /etc/sudoers.d ]; then mkdir -p /etc/sudoers.d; chmod 0750 /etc/sudoers.d; fi
echo "%wheel      ALL=(ALL) ALL" > /etc/sudoers.d/90-wheel
cat >/etc/polkit-1/rules.d/50-default.rules <<'POLKIT'
polkit.addAdminRule(function(action, subject) {
    return ["unix-group:wheel"];
});
POLKIT
INSTALL_USER
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_user

initramfs_type="dracut"
if [ ! -z "${custom_packages}" ]; then
	echo -e "#!/bin/bash\nset -e\nemerge ${custom_packages}" > "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_packages
	chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_packages
fi
if [ ! -z "${custom_script}" ]; then
	cp "${custom_script}" "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_script
	chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_script
fi
}

chroot_Gentoo-systemd()
{
prepare_bootstrap="
curl -l https://archlinux.org/mirrorlist/?ip_version=4 -o /etc/pacman.d/mirrorlist
sed -i 's@#Server = https://geo.mirror.pkgbuild.com@Server = https://geo.mirror.pkgbuild.com@g' /etc/pacman.d/mirrorlist
pacman -Syu --noconfirm --needed bash bash-completion btrfs-progs bzip2 ca-certificates coreutils cryptsetup curl dosfstools e2fsprogs efibootmgr gzip lsof nano openssl reflector sudo strace tar util-linux xz zstd
"

cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/prepare_chroot <<PREPARE_CHROOT
curl -L https://gentoo.osuosl.org/releases/amd64/autobuilds/"$(curl -L https://gentoo.osuosl.org/releases/amd64/autobuilds/latest-stage3-amd64-systemd.txt | sed '/^#/d' | cut -d' ' -f1)" -o /gentoo-stage3.tar.xz
tar xf /gentoo-stage3.tar.xz -C /mnt
rm /gentoo-stage3.tar.xz
PREPARE_CHROOT
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/prepare_chroot

cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/chroot_init <<CHROOT_INIT
#!/bin/bash
set -e
/linuxloops/install_settings
mkdir /etc/portage/package.license 
echo '*/* *' >> /etc/portage/package.license/custom
echo "VIDEO_CARDS=\"amdgpu dummy fbdev intel nouveau qxl radeon radeonsi vesa virtualbox vmware\"" >> /etc/portage/make.conf
echo "USE=\"alsa bluetooth caps cdda cryptsetup dbus device-mapper -elogind icu lvm minizip mount modemmanager networkmanager wpasupplicant ogg policykit pulseaudio raw systemd tracker tty-helpers udev udisks vala\"" >> /etc/portage/make.conf
echo "GRUB_PLATFORMS=\"efi-32 efi-64\"" >> /etc/portage/make.conf
echo -e "MAKEOPTS=\"--jobs 4 --load-average 5\"\nEMERGE_DEFAULT_OPTS=\"--jobs 4\"" >> /etc/portage/make.conf
emerge --sync
eselect profile set default/linux/amd64/17.1
emerge -uDN @world sys-kernel/gentoo-kernel-bin sys-kernel/linux-firmware net-wireless/wireless-regdb app-admin/sudo sys-fs/ntfs3g net-misc/networkmanager sys-fs/cryptsetup app-editors/nano dev-vcs/git sys-power/acpid net-misc/curl sys-power/thermald app-shells/bash-completion app-crypt/gnupg sys-auth/polkit app-arch/zstd sys-auth/pambase dev-lang/rust-bin sys-boot/grub sys-boot/os-prober sys-boot/shim app-crypt/sbsigntools sys-fs/dosfstools sys-fs/btrfs-progs
systemctl enable bluetooth.service NetworkManager.service
CHROOT_INIT
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/chroot_init

newuse="sed -i 's/^USE=.*/USE=\"alsa bluetooth caps cdda dbus -elogind icu minizip mount modemmanager networkmanager wpasupplicant ogg policykit pulseaudio raw systemd tracker tty-helpers udev udisks vala appindicator cairo client cups drm eds egl gles2 gnome-online-accounts gtk gtk3 introspection jpeg libnotify lock mdnsresponder-compat ogg opengl qml text theora tracker wayland X xa xorg zeroconf\"/g' /etc/portage/make.conf"
desktop_base="net-print/cups net-print/cups-filters sys-boot/plymouth"
case "${desktop}" in
	'cinnamon')
	install_desktop="
emerge -uN ${desktop_base} x11-misc/lightdm gnome-extra/cinnamon x11-terms/gnome-terminal gnome-extra/nemo
systemctl enable lightdm.service
"
	;;
	'enlightenment')
	newuse="sed -i 's/^USE=.*/USE=\"alsa bluetooth caps cdda dbus -elogind icu minizip mount modemmanager networkmanager wpasupplicant ogg policykit pulseaudio raw systemd tracker tty-helpers udev udisks vala appindicator cairo client cups drm eds egl gles2 gnome-online-accounts gtk gtk3 introspection jpeg lock mdnsresponder-compat libnotify ogg opengl qml text theora tracker wayland X xa xorg zeroconf gles2-only -opengl\"/g' /etc/portage/make.conf"
	install_desktop="
emerge -uN ${desktop_base} x11-misc/lightdm x11-wm/enlightenment x11-terms/terminology
systemctl enable lightdm.service
"
	;;
	'gnome')
	install_desktop="
emerge -uN ${desktop_base} gnome-base/gdm gnome-base/gnome x11-terms/gnome-terminal gnome-base/nautilus
systemctl enable gdm.service
"
	;;
	'kde')
	install_desktop="
emerge -uN ${desktop_base} x11-misc/sddm kde-plasma/plasma-meta kde-apps/konsole kde-plasma/plasma-nm kde-apps/dolphin kde-plasma/discover
systemctl enable sddm.service
"
	;;
	'lxqt')
	install_desktop="
emerge -uN ${desktop_base} x11-misc/lightdm lxqt-base/lxqt-meta x11-terms/qterminal gnome-extra/nm-applet lxqt-base/lxqt-powermanagement
systemctl enable lightdm.service
"
	;;
	'mate')
	install_desktop="
emerge -uN ${desktop_base} x11-misc/lightdm mate-base/mate x11-terms/mate-terminal gnome-extra/nm-applet mate-extra/mate-power-manager mate-extra/mate-media
systemctl enable lightdm.service
"
	;;
	'xfce')
	install_desktop="
emerge -uN ${desktop_base} x11-misc/lightdm xfce-base/xfce4-meta x11-terms/xfce4-terminal gnome-extra/nm-applet net-wireless/blueman xfce-base/xfce4-power-manager
systemctl enable lightdm.service
"
	;;
esac
cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_desktop <<INSTALL_DESKTOP
#!/bin/bash
set -e
if [ "${desktop}" == "none" ]; then exit 0; fi
${newuse}
echo -e "media-libs/libsndfile minimal\nnet-print/cups -zeroconf" > /etc/portage/package.use/dep_cycle_fix
${install_desktop}
rm /etc/portage/package.use/dep_cycle_fix
emerge -uDN @world
systemctl enable cups.service
systemctl --global enable pulseaudio.service pulseaudio.socket
INSTALL_DESKTOP
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_desktop

cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_user <<INSTALL_USER
#!/bin/bash
set -e
sed -i 's/^password/#password/g' /etc/pam.d/system-auth
echo 'password       required        pam_unix.so nullok sha512 shadow' >> /etc/pam.d/system-auth
useradd -s /bin/bash -m '${username}'
echo -e '${userpass}\n${userpass}' | passwd '${username}'
usermod -aG wheel '${username}'
if [ ! -d /etc/sudoers.d ]; then mkdir -p /etc/sudoers.d; chmod 0750 /etc/sudoers.d; fi
echo "%wheel      ALL=(ALL) ALL" > /etc/sudoers.d/90-wheel
cat >/etc/polkit-1/rules.d/50-default.rules <<'POLKIT'
polkit.addAdminRule(function(action, subject) {
    return ["unix-group:wheel"];
});
POLKIT
INSTALL_USER
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_user

initramfs_type="dracut"
if [ ! -z "${custom_packages}" ]; then
	echo -e "#!/bin/bash\nset -e\nemerge ${custom_packages}" > "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_packages
	chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_packages
fi
if [ ! -z "${custom_script}" ]; then
	cp "${custom_script}" "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_script
	chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_script
fi
}

chroot_Kali()
{
prepare_bootstrap="
yes | DEBIAN_FRONTEND=noninteractive apt update
yes | DEBIAN_FRONTEND=noninteractive apt install bash bash-completion btrfs-progs bzip2 ca-certificates coreutils cryptsetup curl dosfstools e2fsprogs efibootmgr fdisk gzip lsof nano openssl sudo strace tar util-linux xz-utils zstd
"

cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/prepare_chroot <<PREPARE_CHROOT
yes | DEBIAN_FRONTEND=noninteractive apt install debootstrap
debootstrap --arch=amd64 --include=ca-certificates,console-setup,dirmngr,gpg,kbd,locales kali-rolling /mnt http://http.kali.org/kali
PREPARE_CHROOT
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/prepare_chroot

cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/chroot_init <<CHROOT_INIT
#!/bin/bash
set -e
cat >/etc/apt/sources.list <<'SOURCESLIST'
deb http://http.kali.org/kali kali-rolling main contrib non-free non-free-firmware
SOURCESLIST
yes | DEBIAN_FRONTEND=noninteractive apt update
yes | DEBIAN_FRONTEND=noninteractive apt dist-upgrade
echo -e 'APT::Install-Recommends "0";\nAPT::Get::Install-Recommends "false";' > /etc/apt/apt.conf.d/99linuxloops
echo -e 'Dpkg::Options {\n  "--force-confdef";\n};' > /etc/apt/apt.conf.d/71debconf
yes | DEBIAN_FRONTEND=noninteractive apt install linux-image-amd64 linux-headers-amd64 dkms firmware-linux firmware-atheros firmware-iwlwifi firmware-realtek wireless-regdb bash sudo modemmanager network-manager wpasupplicant bluez cryptsetup-initramfs e2fsprogs ntfs-3g nano acpid curl thermald bash-completion gnupg-utils policykit-1 xdg-user-dirs zstd fwupd-signed patchutils net-tools usb-modeswitch upower efibootmgr grub-efi grub-efi-amd64-bin os-prober shim-signed amd64-microcode intel-microcode lsb-release kali-themes sbsigntool mokutil dosfstools btrfs-progs
echo -e 'sign_tool="/etc/dkms/sign_helper.sh"' >> /etc/dkms/framework.conf
echo -e '#!/bin/sh\n/lib/modules/"\${1}"/build/scripts/sign-file sha512 /var/lib/shim-signed/mok/MOK.priv /var/lib/shim-signed/mok/MOK.der "\${2}"' > /etc/dkms/sign_helper.sh
chmod 0755 /etc/dkms/sign_helper.sh
CHROOT_INIT
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/chroot_init

hardware_support="alsa-utils alsa-ucm-conf alsa-topology-conf at-spi2-core avahi-discover avahi-dnsconfd cups cups-browsed cups-filters libnss-mdns pipewire-audio pipewire-alsa pipewire-jack pipewire-pulse wireplumber system-config-printer xserver-xorg"
basic_packages="gvfs-fuse packagekit udisks2 xdg-user-dirs-gtk"
basic_themes="adwaita-icon-theme breeze-gtk-theme breeze-icon-theme fonts-dejavu fonts-noto fonts-roboto gnome-backgrounds materia-gtk-theme oxygen-icon-theme papirus-icon-theme"
specific_packages="desktop-base plymouth-themes synaptic kali-defaults-desktop kali-themes-common"
desktop_base="${hardware_support} ${basic_packages} ${basic_themes} ${specific_packages}"
desktop_services="avahi-daemon.service cups.service cups-browsed.service"
case "${desktop}" in
	'budgie')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter budgie-desktop arc-theme nemo gnome-terminal libgdk-pixbuf2.0-bin
"
	;;
	'budgie-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter budgie-desktop arc-theme nautilus gnome-terminal libgdk-pixbuf2.0-bin
"
	;;
	'cinnamon')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter task-cinnamon-desktop gnome-terminal blueman
"
	;;
	'cinnamon-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter task-cinnamon-desktop gnome-terminal blueman
"
	;;
	'enlightenment')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter kali-desktop-e17 terminology
yes | DEBIAN_FRONTEND=noninteractive apt purge network-manager
yes | DEBIAN_FRONTEND=noninteractive apt install connman
systemctl enable connman.service
find /usr/lib -type f -name enlightenment_system -exec chmod 4755 {} \;
"
	;;
	'enlightenment-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter kali-desktop-e17 terminology
yes | DEBIAN_FRONTEND=noninteractive apt purge network-manager
yes | DEBIAN_FRONTEND=noninteractive apt install connman
systemctl enable connman.service
find /usr/lib -type f -name enlightenment_system -exec chmod 4755 {} \;
"
	;;
	'gnome')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} gdm3 kali-desktop-gnome gnome-keyring libpam-gnome-keyring
"
	;;
	'gnome-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} gdm3 kali-desktop-gnome gnome-keyring
"
	;;
	'i3')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter kali-desktop-i3 pavucontrol pasystray network-manager-gnome blueman
"
	;;
	'i3-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter kali-desktop-i3 pavucontrol pasystray network-manager-gnome blueman
"
	;;
	'kde')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} sddm kali-desktop-kde kwin-x11 dolphin plasma-discover konsole plasma-nm plasma-pa bluedevil libpam-kwallet5 powerdevil plasma-widgets-addons systemsettings
"
	;;
	'kde-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} sddm kali-desktop-kde kwin-x11 plasma-nm plasma-pa powerdevil bluedevil libpam-kwallet5
"
	;;
	'lxde')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter kali-desktop-lxde network-manager-gnome blueman
"
	;;
	'lxde-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter kali-desktop-lxde network-manager-gnome blueman
"
	;;
	'mate')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter kali-desktop-mate mate-power-manager mate-media blueman
"
	;;
	'mate-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter kali-desktop-mate mate-power-manager mate-media blueman
"
	;;
	'xfce')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter kali-desktop-xfce blueman
"
	;;
	'xfce-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter kali-desktop-xfce blueman
"
	;;
esac
cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_desktop <<INSTALL_DESKTOP
#!/bin/bash
set -e
if [ "${desktop}" == "none" ]; then exit 0; fi
${install_desktop}
systemctl enable ${desktop_services}
cat >/usr/share/glib-2.0/schemas/zz_linuxloops.gschema.override <<'DCONF'
[org.gnome.desktop.background:Budgie]
picture-uri="file:///usr/share/backgrounds/kali/login.svg"
[org.gnome.desktop.interface:Budgie]
gtk-theme="Arc"
icon-theme="Papirus"
[org.cinnamon.desktop.background]
picture-uri="file:///usr/share/backgrounds/kali/login.svg"
[org.cinnamon.desktop.interface]
gtk-theme="Materia"
icon-theme="Papirus"
[org.cinnamon.desktop.wm.preferences]
theme="Materia"
DCONF
if [ ! -z "\$(command -v glib-compile-schemas)" ]; then glib-compile-schemas /usr/share/glib-2.0/schemas/; fi
mkdir -p /etc/xdg/autostart
cat >/etc/xdg/autostart/budgie-nemo.desktop <<'NEMODESKTOP'
[Desktop Entry]
Type=Application
Name=Nemo
Comment=Start Nemo desktop at log in
Exec=nemo-desktop
OnlyShowIn=Budgie;
AutostartCondition=GSettings org.nemo.desktop show-desktop-icons
X-GNOME-AutoRestart=true
NoDisplay=true
NEMODESKTOP
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[Seat:*]\ngreeter-hide-users=false\n' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
INSTALL_DESKTOP
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_desktop

cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_user <<INSTALL_USER
#!/bin/bash
set -e
useradd -s /bin/bash -m '${username}'
echo -e '${userpass}\n${userpass}' | passwd '${username}'
usermod -aG sudo '${username}'
INSTALL_USER
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_user

surface_remove="linux-headers-* linux-image-*"
initramfs_type="initramfstools"
if [ ! -z "${custom_packages}" ]; then
	echo -e "#!/bin/bash\nset -e\nyes | DEBIAN_FRONTEND=noninteractive apt install ${custom_packages}" > "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_packages
	chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_packages
fi
if [ ! -z "${custom_script}" ]; then
	cp "${custom_script}" "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_script
	chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_script
fi
}

chroot_Linuxmint()
{
prepare_bootstrap="
yes | DEBIAN_FRONTEND=noninteractive apt update
yes | DEBIAN_FRONTEND=noninteractive apt install bash bash-completion btrfs-progs bzip2 ca-certificates coreutils cryptsetup curl dosfstools e2fsprogs efibootmgr fdisk gzip lsof nano openssl sudo strace tar util-linux xz-utils zstd
"

cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/prepare_chroot <<PREPARE_CHROOT
yes | DEBIAN_FRONTEND=noninteractive apt install debootstrap
debootstrap --arch=amd64 --include=ca-certificates,console-setup,dirmngr,gpg,kbd,locales jammy /mnt http://archive.ubuntu.com/ubuntu
PREPARE_CHROOT
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/prepare_chroot

cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/chroot_init <<CHROOT_INIT
#!/bin/bash
set -e
rm -f /etc/apt/sources.list
cat >/etc/apt/sources.list.d/official-package-repositories.list <<'REPOS'
deb http://packages.linuxmint.com victoria main upstream import backport #id:linuxmint_main

deb http://archive.ubuntu.com/ubuntu jammy main restricted universe multiverse
deb http://archive.ubuntu.com/ubuntu jammy-updates main restricted universe multiverse
deb http://archive.ubuntu.com/ubuntu jammy-backports main restricted universe multiverse

deb http://security.ubuntu.com/ubuntu/ jammy-security main restricted universe multiverse
REPOS
cat >/etc/apt/preferences.d/official-package-repositories.pref <<'PRIORITY'
Package: *
Pin: origin live.linuxmint.com
Pin-Priority: 750

Package: *
Pin: release o=linuxmint,c=upstream
Pin-Priority: 700

Package: *
Pin: release o=LP-PPA-linuxmint-daily-build-team-daily-builds
Pin-Priority: 700
PRIORITY
echo -e 'APT::Install-Recommends "0";\nAPT::Get::Install-Recommends "false";' > /etc/apt/apt.conf.d/99linuxloops
echo -e 'Dpkg::Options {\n  "--force-confnew";\n};' > /etc/apt/apt.conf.d/71debconf
yes | DEBIAN_FRONTEND=noninteractive apt update --allow-insecure-repositories
yes | DEBIAN_FRONTEND=noninteractive apt install linuxmint-keyring mintsources --allow-unauthenticated
yes | DEBIAN_FRONTEND=noninteractive apt update
yes | DEBIAN_FRONTEND=noninteractive apt install -o APT::Immediate-Configure=false --reinstall \$(apt list --installed | cut -d'/' -f1 | sed '1d' | sed -z 's@\n@ @g')
yes | DEBIAN_FRONTEND=noninteractive dpkg --configure -a
echo -e 'Dpkg::Options {\n  "--force-confdef";\n};' > /etc/apt/apt.conf.d/71debconf
yes | DEBIAN_FRONTEND=noninteractive apt install linux-generic linux-headers-generic dkms linux-firmware wireless-regdb bash sudo modemmanager network-manager wpasupplicant bluez cryptsetup-initramfs e2fsprogs ntfs-3g nano acpid curl thermald bash-completion gnupg-utils policykit-1 xdg-user-dirs zstd fwupd-signed patchutils net-tools usb-modeswitch upower efibootmgr grub-efi grub-efi-amd64-signed os-prober shim-signed sbsigntool mokutil dosfstools btrfs-progs
CHROOT_INIT
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/chroot_init

hardware_support="alsa-utils alsa-ucm-conf alsa-topology-conf at-spi2-core avahi-discover cups cups-browsed cups-filters firmware-sof-signed libnss-mdns pipewire pipewire-audio-client-libraries pipewire-pulse wireplumber system-config-printer xserver-xorg"
basic_packages="gvfs-fuse packagekit udisks2 xdg-user-dirs-gtk"
basic_themes="adwaita-icon-theme breeze-gtk-theme breeze-icon-theme fonts-dejavu fonts-noto fonts-roboto gnome-backgrounds materia-gtk-theme oxygen-icon-theme papirus-icon-theme"
specific_packages="desktop-base mint-artwork mint-themes mint-x-icons mint-y-icons mint-backgrounds-vera plymouth-themes fonts-ubuntu mintinstall mintsystem mintupdate mintupgrade ubuntu-system-adjustments grub2-theme-mint"
desktop_base="${hardware_support} ${basic_packages} ${basic_themes} ${specific_packages}"
case "${desktop}" in
	'cinnamon')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install network-manager-gnome blueman
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter mint-meta-cinnamon mint-info-cinnamon cinnamon-desktop-environment gnome-terminal nemo gnome-keyring libpam-gnome-keyring
"
	;;
	'cinnamon-full')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install network-manager-gnome blueman
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter mint-meta-cinnamon mint-info-cinnamon cinnamon-desktop-environment gnome-terminal nemo gnome-keyring libpam-gnome-keyring
"
	;;
	'mate')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install network-manager-gnome blueman
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter mint-meta-mate mint-info-mate mate-desktop-environment gnome-terminal nemo
"
	;;
	'mate-full')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install network-manager-gnome blueman
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter mint-meta-mate mint-info-mate mate-desktop-environment gnome-terminal nemo
"
	;;
	'xfce')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install network-manager-gnome blueman
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter mint-meta-xfce mint-info-xfce xfce4 xfce4-power-manager xfce4-terminal thunar
"
	;;
	'xfce-full')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install network-manager-gnome blueman
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter mint-meta-xfce mint-info-xfce xfce4 xfce4-power-manager xfce4-terminal thunar
"
	;;
esac
cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_desktop <<INSTALL_DESKTOP
#!/bin/bash
set -e
if [ "${desktop}" == "none" ]; then exit 0; fi
${install_desktop}
mkdir -p /etc/lightdm
echo -e '[Greeter]\ndraw-user-backgrounds = true' > /etc/lightdm/slick-greeter.conf
INSTALL_DESKTOP
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_desktop

cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_user <<INSTALL_USER
#!/bin/bash
set -e
useradd -s /bin/bash -m '${username}'
echo -e '${userpass}\n${userpass}' | passwd '${username}'
usermod -aG sudo '${username}'
INSTALL_USER
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_user

surface_remove="linux-generic-* linux-headers-* linux-image-* linux-modules-*"
initramfs_type="initramfstools"
if [ ! -z "${custom_packages}" ]; then
	echo -e "#!/bin/bash\nset -e\nyes | DEBIAN_FRONTEND=noninteractive apt install ${custom_packages}" > "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_packages
	chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_packages
fi
if [ ! -z "${custom_script}" ]; then
	cp "${custom_script}" "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_script
	chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_script
fi
}

chroot_LMDE()
{
prepare_bootstrap="
yes | DEBIAN_FRONTEND=noninteractive apt update
yes | DEBIAN_FRONTEND=noninteractive apt install bash bash-completion btrfs-progs bzip2 ca-certificates coreutils cryptsetup curl dosfstools e2fsprogs efibootmgr fdisk gzip lsof nano openssl sudo strace tar util-linux xz-utils zstd
"

cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/prepare_chroot <<PREPARE_CHROOT
yes | DEBIAN_FRONTEND=noninteractive apt install debootstrap
debootstrap --arch=amd64 --include=ca-certificates,console-setup,dirmngr,gpg,kbd,locales bullseye /mnt http://deb.debian.org/debian
PREPARE_CHROOT
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/prepare_chroot

cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/chroot_init <<CHROOT_INIT
#!/bin/bash
set -e
rm -f /etc/apt/sources.list
cat >/etc/apt/sources.list.d/official-package-repositories.list <<'REPOS'
deb http://packages.linuxmint.com elsie main upstream import backport #id:linuxmint_main

deb https://deb.debian.org/debian bullseye main contrib non-free
deb https://deb.debian.org/debian bullseye-updates main contrib non-free
deb http://security.debian.org bullseye-security main contrib non-free

deb https://deb.debian.org/debian bullseye-backports main contrib non-free
REPOS
cat >/etc/apt/preferences.d/official-package-repositories.pref <<'PRIORITY'
Package: *
Pin: origin live.linuxmint.com
Pin-Priority: 750

Package: *
Pin: release o=linuxmint,c=upstream
Pin-Priority: 700
PRIORITY
echo -e 'APT::Install-Recommends "0";\nAPT::Get::Install-Recommends "false";' > /etc/apt/apt.conf.d/99linuxloops
echo -e 'Dpkg::Options {\n  "--force-confnew";\n};' > /etc/apt/apt.conf.d/71debconf
yes | DEBIAN_FRONTEND=noninteractive apt update --allow-insecure-repositories
yes | DEBIAN_FRONTEND=noninteractive apt install linuxmint-keyring mintsources --allow-unauthenticated
yes | DEBIAN_FRONTEND=noninteractive apt update
yes | DEBIAN_FRONTEND=noninteractive apt install -o APT::Immediate-Configure=false --reinstall \$(apt list --installed | cut -d'/' -f1 | sed '1d' | sed -z 's@\n@ @g')
yes | DEBIAN_FRONTEND=noninteractive dpkg --configure -a
echo -e 'Dpkg::Options {\n  "--force-confdef";\n};' > /etc/apt/apt.conf.d/71debconf
yes | DEBIAN_FRONTEND=noninteractive apt install linux-image-amd64 linux-headers-amd64 dkms firmware-linux firmware-atheros firmware-iwlwifi firmware-realtek wireless-regdb bash sudo modemmanager network-manager wpasupplicant bluez cryptsetup-initramfs e2fsprogs ntfs-3g nano acpid curl thermald bash-completion gnupg-utils policykit-1 xdg-user-dirs zstd fwupd-signed patchutils net-tools usb-modeswitch upower efibootmgr grub-efi grub-efi-amd64-signed os-prober shim-signed bind9-host dns-root-data amd64-microcode intel-microcode lsb-release sbsigntool mokutil dosfstools btrfs-progs
echo -e 'sign_tool="/etc/dkms/sign_helper.sh"' >> /etc/dkms/framework.conf
echo -e '#!/bin/sh\n/lib/modules/"\${1}"/build/scripts/sign-file sha512 /var/lib/shim-signed/mok/MOK.priv /var/lib/shim-signed/mok/MOK.der "\${2}"' > /etc/dkms/sign_helper.sh
chmod 0755 /etc/dkms/sign_helper.sh
CHROOT_INIT
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/chroot_init

hardware_support="alsa-utils alsa-ucm-conf alsa-topology-conf at-spi2-core avahi-discover cups cups-browsed cups-filters firmware-sof-signed libnss-mdns pulseaudio system-config-printer xserver-xorg"
basic_packages="gvfs-fuse packagekit udisks2 xdg-user-dirs-gtk"
basic_themes="adwaita-icon-theme breeze-gtk-theme breeze-icon-theme fonts-dejavu fonts-noto fonts-roboto gnome-backgrounds materia-gtk-theme oxygen-icon-theme papirus-icon-theme"
specific_packages="desktop-base mint-artwork mint-themes mint-x-icons mint-y-icons plymouth-themes fonts-ubuntu mintinstall mintsystem mintupdate mintupgrade grub2-theme-mint"
desktop_base="${hardware_support} ${basic_packages} ${basic_themes} ${specific_packages}"
case "${desktop}" in
	'cinnamon')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install network-manager-gnome blueman
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter mint-meta-cinnamon cinnamon-desktop-environment gnome-terminal nemo gnome-keyring libpam-gnome-keyring
"
	;;
	'cinnamon-full')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install network-manager-gnome blueman
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter mint-meta-cinnamon cinnamon-desktop-environment gnome-terminal nemo gnome-keyring libpam-gnome-keyring
"
	;;
esac
cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_desktop <<INSTALL_DESKTOP
#!/bin/bash
set -e
if [ "${desktop}" == "none" ]; then exit 0; fi
${install_desktop}
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[Seat:*]\ngreeter-hide-users=false\n' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
INSTALL_DESKTOP
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_desktop

cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_user <<INSTALL_USER
#!/bin/bash
set -e
useradd -s /bin/bash -m '${username}'
echo -e '${userpass}\n${userpass}' | passwd '${username}'
usermod -aG sudo '${username}'
INSTALL_USER
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_user

initramfs_type="initramfstools"
if [ ! -z "${custom_packages}" ]; then
	echo -e "#!/bin/bash\nset -e\nyes | DEBIAN_FRONTEND=noninteractive apt install ${custom_packages}" > "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_packages
	chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_packages
fi
if [ ! -z "${custom_script}" ]; then
	cp "${custom_script}" "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_script
	chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_script
fi
}

chroot_Manjaro()
{
prepare_bootstrap="
curl -l https://archlinux.org/mirrorlist/?ip_version=4 -o /etc/pacman.d/mirrorlist
sed -i 's@#Server = https://geo.mirror.pkgbuild.com@Server = https://geo.mirror.pkgbuild.com@g' /etc/pacman.d/mirrorlist
pacman -Syu --noconfirm --needed bash bash-completion btrfs-progs bzip2 ca-certificates coreutils cryptsetup curl dosfstools e2fsprogs efibootmgr gzip lsof nano openssl sudo strace tar util-linux xz zstd
"

cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/prepare_chroot <<PREPARE_CHROOT
#!/bin/bash
set -e
curl https://gitlab.manjaro.org/packages/core/pacman/-/raw/master/pacman.conf?inline=false -o /etc/pacman_manjaro.conf
sed -i 's@SigLevel    = Required DatabaseOptional@SigLevel    = Never@g' /etc/pacman_manjaro.conf
sed -i 's@#RemoteFileSigLevel = Required@RemoteFileSigLevel = Optional@g' /etc/pacman_manjaro.conf
sed -i '/SyncFirst/d' /etc/pacman_manjaro.conf
echo 'Server = https://mirrors.manjaro.org/repo/stable/\$repo/\$arch' > /etc/pacman.d/mirrorlist
pacstrap -C /etc/pacman_manjaro.conf -G /mnt base base-devel
PREPARE_CHROOT
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/prepare_chroot

cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/chroot_init <<CHROOT_INIT
#!/bin/bash
set -e
pacman-key --init
pacman-key --populate
pacman -Syu --noconfirm systemd linux61 linux61-headers dkms linux-firmware sof-firmware wireless-regdb bash sudo modemmanager networkmanager wpa_supplicant bluez cryptsetup e2fsprogs ntfs-3g nano acpid curl thermald bash-completion gnupg polkit xdg-user-dirs zstd fwupd patchutils net-tools usb_modeswitch upower efibootmgr grub os-prober shim amd-ucode intel-ucode sbsigntools mokutil dosfstools btrfs-progs
systemctl enable bluetooth.service ModemManager.service NetworkManager.service
CHROOT_INIT
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/chroot_init

hardware_support="alsa-lib alsa-utils alsa-topology-conf alsa-ucm-conf at-spi2-core avahi cups cups-filters nss-mdns pipewire-audio pipewire-alsa pipewire-jack pipewire-pulse wireplumber system-config-printer xorg-server"
basic_packages="gvfs packagekit udisks2 xdg-user-dirs-gtk"
basic_themes="adobe-source-code-pro-fonts adwaita-icon-theme breeze-gtk breeze-icons gnome-backgrounds materia-gtk-theme noto-fonts oxygen-icons papirus-icon-theme ttf-dejavu ttf-roboto ttf-meslo-nerd-font-powerlevel10k"
specific_packages="manjaro-wallpapers-18.0 manjaro-settings-manager matcha-gtk-theme plymouth-theme-manjaro"
desktop_base="${hardware_support} ${basic_packages} ${basic_themes} ${specific_packages}"
desktop_services="avahi-daemon.service avahi-dnsconfd.service cups.service cups-browsed.service"
case "${desktop}" in
	'budgie')
	install_desktop="
pacman -S --noconfirm ${desktop_base} lightdm lightdm-slick-greeter budgie-desktop manjaro-budgie-settings network-manager-applet tilix nemo arc-gtk-theme papirus-maia-icon-theme pamac-gtk
systemctl enable lightdm.service
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
"
	;;
	'cinnamon')
	install_desktop="
pacman -S --noconfirm ${desktop_base} lightdm lightdm-slick-greeter cinnamon manjaro-cinnamon-settings gnome-terminal nemo pamac-gtk blueman
systemctl enable lightdm.service
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
"
	;;
	'deepin')
	install_desktop="
pacman -S --noconfirm ${desktop_base} lightdm lightdm-slick-greeter deepin deepin-manjaro network-manager-applet deepin-terminal deepin-wallpapers pamac-gtk
systemctl enable lightdm.service
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
"
	;;
	'enlightenment')
	install_desktop="
systemctl disable NetworkManager.service
pacman -S --noconfirm ${desktop_base} lightdm lightdm-slick-greeter enlightenment terminology pamac-gtk connman
systemctl enable lightdm.service connman.service
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
"
	;;
	'gnome')
	install_desktop="
pacman -S --noconfirm ${desktop_base} gdm gnome-shell gnome-control-center gnome-keyring gnome-software gnome-backgrounds gnome-terminal nautilus manjaro-gnome-settings
systemctl enable gdm.service
"
	;;
	'gnome-full')
	install_desktop="
pacman -S --noconfirm ${desktop_base} gdm gnome gnome-extra manjaro-gnome-settings
systemctl enable gdm.service
"
	;;
	'kde')
	install_desktop="
pacman -S --noconfirm ${desktop_base} sddm qt5-virtualkeyboard plasma manjaro-kde-settings dolphin discover packagekit-qt5 konsole pamac-tray-icon-plasma
systemctl enable lightdm.service
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
"
	;;
	'kde-full')
	install_desktop="
pacman -S --noconfirm ${desktop_base} sddm qt5-virtualkeyboard plasma kde-applications manjaro-kde-settings dolphin discover packagekit-qt5 konsole pamac-tray-icon-plasma
systemctl enable lightdm.service
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
"
	;;
	'lxde')
	install_desktop="
pacman -S --noconfirm ${desktop_base} lightdm lightdm-slick-greeter lxde manjaro-lxde-config manjaro-lxde-desktop-settings manjaro-lxde-logout-banner manjaro-lxde-xfce4-notifyd manjaro-lxde-xfce4-volumed-pulse arc-maia-icon-theme kvantum-manjaro lxterminal pcmanfm network-manager-applet blueman pamac-gtk
systemctl enable lightdm.service
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
"
	;;
	'lxqt')
	install_desktop="
pacman -S --noconfirm ${desktop_base} lightdm lightdm-slick-greeter lxqt manjaro-lxqt-config manjaro-lxqt-desktop-settings manjaro-openbox-adapta-maia papirus-maia-icon-theme qterminal pcmanfm-qt network-manager-applet blueman pamac-gtk
systemctl enable lightdm.service
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
"
	;;
	'mate')
	install_desktop="
pacman -S --noconfirm ${desktop_base} lightdm lightdm-slick-greeter mate manjaro-mate-settings arc-maia-icon-theme papirus-maia-icon-theme mate-terminal caja mate-control-center network-manager-applet blueman mate-media mate-power-manager pamac-gtk
systemctl enable lightdm.service
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
"
	;;
	'mate-full')
	install_desktop="
pacman -S --noconfirm ${desktop_base} lightdm lightdm-slick-greeter mate mate-extra manjaro-mate-settings arc-maia-icon-theme papirus-maia-icon-theme mate-terminal caja mate-control-center network-manager-applet blueman mate-media mate-power-manager pamac-gtk
systemctl enable lightdm.service
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
"
	;;
	'xfce')
	install_desktop="
pacman -S --noconfirm ${desktop_base} lightdm lightdm-slick-greeter xfce4 manjaro-xfce-settings xfce4-terminal xfce4-notifyd xfce4-whiskermenu-plugin thunar xfce4-power-manager xfce4-pulseaudio-plugin network-manager-applet blueman pamac-gtk
systemctl enable lightdm.service
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
"
	;;
	'xfce-full')
	install_desktop="
pacman -S --noconfirm ${desktop_base} lightdm lightdm-slick-greeter xfce4 xfce4-goodies manjaro-xfce-settings xfce4-terminal xfce4-notifyd xfce4-whiskermenu-plugin thunar xfce4-power-manager xfce4-pulseaudio-plugin network-manager-applet blueman pamac-gtk
systemctl enable lightdm.service
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[LightDM]\nlogind-check-graphical=true\n\n[Seat:*]\nsession-wrapper=/etc/lightdm/Xsession\ngreeter-session=lightdm-slick-greeter' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
"
	;;
esac
cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_desktop <<INSTALL_DESKTOP
#!/bin/bash
set -e
if [ "${desktop}" == "none" ]; then exit 0; fi
${install_desktop}
systemctl enable ${desktop_services}
cat >/etc/xdg/autostart/budgie-nemo.desktop <<'NEMODESKTOP'
[Desktop Entry]
Type=Application
Name=Nemo
Comment=Start Nemo desktop at log in
Exec=nemo-desktop
OnlyShowIn=Budgie;
AutostartCondition=GSettings org.nemo.desktop show-desktop-icons
X-GNOME-AutoRestart=true
NoDisplay=true
NEMODESKTOP
INSTALL_DESKTOP
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_desktop

cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_user <<INSTALL_USER
#!/bin/bash
set -e
useradd -s /bin/bash -m '${username}'
echo -e '${userpass}\n${userpass}' | passwd '${username}'
usermod -aG wheel '${username}'
echo "%wheel      ALL=(ALL) ALL" > /etc/sudoers.d/90-wheel
cat >/etc/polkit-1/rules.d/50-default.rules <<'POLKIT'
polkit.addAdminRule(function(action, subject) {
    return ["unix-group:wheel"];
});
POLKIT
INSTALL_USER
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_user

surface_remove="linux61 linux61-headers"
initramfs_type="initcpio"
if [ ! -z "${custom_packages}" ]; then
	echo -e "#!/bin/bash\nset -e\npacman -S --noconfirm ${custom_packages}" > "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_packages
	chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_packages
fi
if [ ! -z "${custom_script}" ]; then
	cp "${custom_script}" "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_script
	chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_script
fi
}

chroot_MX()
{
prepare_bootstrap="
yes | DEBIAN_FRONTEND=noninteractive apt update
yes | DEBIAN_FRONTEND=noninteractive apt install bash bash-completion btrfs-progs bzip2 ca-certificates coreutils cryptsetup curl dosfstools e2fsprogs efibootmgr fdisk gzip lsof nano openssl sudo strace tar util-linux xz-utils zstd
"

cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/prepare_chroot <<PREPARE_CHROOT
yes | DEBIAN_FRONTEND=noninteractive apt install debootstrap
debootstrap --arch=amd64 --include=ca-certificates,console-setup,dirmngr,gpg,kbd,locales bookworm /mnt http://deb.debian.org/debian
PREPARE_CHROOT
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/prepare_chroot

cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/chroot_init <<CHROOT_INIT
#!/bin/bash
set -e
cat >/etc/apt/sources.list <<'SOURCESLIST'
deb http://deb.debian.org/debian bookworm main contrib non-free non-free-firmware
# deb-src http://deb.debian.org/debian bookworm main contrib non-free non-free-firmware

deb http://deb.debian.org/debian-security/ bookworm-security main contrib non-free non-free-firmware
# deb-src http://deb.debian.org/debian-security/ bookworm-security main contrib non-free non-free-firmware

deb http://deb.debian.org/debian bookworm-updates main contrib non-free non-free-firmware
# deb-src http://deb.debian.org/debian bookworm-updates main contrib non-free non-free-firmware
SOURCESLIST
yes | DEBIAN_FRONTEND=noninteractive apt update
yes | DEBIAN_FRONTEND=noninteractive apt dist-upgrade
cat >/etc/apt/sources.list.d/mx.list <<'SOURCES'
deb http://mxrepo.com/mx/repo/ bookworm main non-free
#deb http://mxrepo.com/mx/repo/ bookworm ahs
SOURCES
echo -e 'APT::Install-Recommends "0";\nAPT::Get::Install-Recommends "false";' > /etc/apt/apt.conf.d/99linuxloops
echo -e 'Dpkg::Options {\n  "--force-confnew";\n};' > /etc/apt/apt.conf.d/71debconf
yes | DEBIAN_FRONTEND=noninteractive apt update --allow-insecure-repositories
yes | DEBIAN_FRONTEND=noninteractive apt install mx23-archive-keyring --allow-unauthenticated
yes | DEBIAN_FRONTEND=noninteractive apt update
yes | DEBIAN_FRONTEND=noninteractive apt install -o APT::Immediate-Configure=false --reinstall \$(apt list --installed | cut -d'/' -f1 | sed '1d' | sed -z 's@\n@ @g')
yes | DEBIAN_FRONTEND=noninteractive dpkg --configure -a
echo -e 'Dpkg::Options {\n  "--force-confdef";\n};' > /etc/apt/apt.conf.d/71debconf
yes | DEBIAN_FRONTEND=noninteractive apt install linux-image-amd64 linux-headers-amd64 dkms firmware-linux firmware-atheros firmware-iwlwifi firmware-realtek wireless-regdb bash sudo modemmanager network-manager wpasupplicant bluez cryptsetup-initramfs e2fsprogs ntfs-3g nano acpid curl thermald bash-completion gnupg-utils policykit-1 xdg-user-dirs zstd fwupd-signed patchutils net-tools usb-modeswitch upower efibootmgr grub-efi grub-efi-amd64-signed os-prober shim-signed amd64-microcode intel-microcode sbsigntool mokutil dosfstools btrfs-progs
echo -e 'sign_tool="/etc/dkms/sign_helper.sh"' >> /etc/dkms/framework.conf
echo -e '#!/bin/sh\n/lib/modules/"\${1}"/build/scripts/sign-file sha512 /var/lib/shim-signed/mok/MOK.priv /var/lib/shim-signed/mok/MOK.der "\${2}"' > /etc/dkms/sign_helper.sh
chmod 0755 /etc/dkms/sign_helper.sh
CHROOT_INIT
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/chroot_init

hardware_support="alsa-utils alsa-ucm-conf alsa-topology-conf at-spi2-core avahi-discover cups libnss-mdns pipewire-audio pipewire-alsa pipewire-jack pipewire-pulse pipewire-setup-mx wireplumber system-config-printer xserver-xorg"
basic_packages="gvfs-fuse packagekit udisks2 xdg-user-dirs-gtk"
basic_themes="adwaita-icon-theme breeze-gtk-theme breeze-icon-theme fonts-dejavu fonts-noto fonts-roboto gnome-backgrounds materia-gtk-theme oxygen-icon-theme papirus-icon-theme"
specific_packages="desktop-base plymouth-themes-mx synaptic mx-greybird-themes mx-comfort-themes mx-icons-start mx-sound-theme-borealis mx-sound-theme-fresh-and-clean mx23-artwork desktop-defaults-mx-applications desktop-defaults-mx-common"
desktop_base="${hardware_support} ${basic_packages} ${basic_themes} ${specific_packages}"
case "${desktop}" in
	'budgie')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter budgie-desktop arc-theme nautilus tilix
"
	;;
	'cinnamon')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter cinnamon gnome-terminal nemo blueman
"
	;;
	'cinnamon-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter task-cinnamon-desktop blueman
"
	;;
	'enlightenment')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter enlightenment terminology
yes | DEBIAN_FRONTEND=noninteractive apt purge network-manager
yes | DEBIAN_FRONTEND=noninteractive apt install connman
find /usr/lib -type f -name enlightenment_system -exec chmod 4755 {} \;
"
	;;
	'gnome')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} gdm3 gnome-session gnome-shell gnome-control-center gnome-terminal nautilus gnome-icon-theme gnome-keyring libpam-gnome-keyring
"
	;;
	'gnome-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} gdm3 task-gnome-desktop
"
	;;
	'kde')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} sddm sddm-theme-breeze kde-plasma-desktop kwin-x11 dolphin plasma-discover konsole plasma-nm plasma-pa bluedevil libpam-kwallet5 powerdevil plasma-widgets-addons systemsettings plasma-look-and-feel-theme-mx plasma-modified-defaults-mx desktop-defaults-mx-kde
"
	;;
	'kde-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} sddm sddm-theme-breeze task-kde-desktop plasma-look-and-feel-theme-mx plasma-modified-defaults-mx desktop-defaults-mx-kde
"
	;;
	'lxde')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter lxde-core lxterminal pcmanfm lxde-icon-theme network-manager-gnome lxappearance lxinput blueman
"
	;;
	'lxde-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter task-lxde-desktop network-manager-gnome blueman
"
	;;
	'lxqt')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter lxqt-core qterminal pcmanfm-qt lxqt-theme-debian lxde-icon-theme network-manager-gnome mutter lxqt-powermanagement lxqt-themes oxygen-icon-theme blueman
"
	;;
	'lxqt-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter task-lxqt-desktop network-manager-gnome blueman
yes | DEBIAN_FRONTEND=noninteractive apt purge sddm
"
	;;
	'mate')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter mate-desktop mate-session-manager marco mate-control-center mate-notification-daemon mate-applets mate-indicator-applet mate-applet-brisk-menu mate-themes mate-icon-theme mate-terminal caja network-manager-gnome blueman mate-media mate-power-manager
"
	;;
	'mate-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter task-mate-desktop blueman
"
	;;
	'xfce')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter xfce4 xfce4-power-manager xfce4-terminal thunar xfce4-notifyd xfce4-whiskermenu-plugin network-manager-gnome blueman desktop-defaults-mx-xfce papirus-mxblue xfce4-docklike-plugin
"
	;;
	'xfce-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter task-xfce-desktop network-manager-gnome blueman desktop-defaults-mx-xfce papirus-mxblue xfce4-docklike-plugin
"
	;;
esac
cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_desktop <<INSTALL_DESKTOP
#!/bin/bash
set -e
if [ "${desktop}" == "none" ]; then exit 0; fi
${install_desktop}
mkdir -p /usr/share/glib-2.0/schemas
cat >/usr/share/glib-2.0/schemas/zz_linuxloops.gschema.override <<'DCONF'
[org.gnome.desktop.background:Budgie]
picture-uri="file:///usr/share/backgrounds/default23.png"
[org.gnome.desktop.interface:Budgie]
gtk-theme="Arc"
icon-theme="Papirus"
[org.cinnamon.desktop.background]
picture-uri="file:///usr/share/backgrounds/default23.png"
[org.cinnamon.desktop.interface]
gtk-theme="Materia"
icon-theme="Papirus"
[org.cinnamon.desktop.wm.preferences]
theme="Materia"
DCONF
if [ ! -z "\$(command -v glib-compile-schemas)" ]; then glib-compile-schemas /usr/share/glib-2.0/schemas/; fi
mkdir -p /etc/xdg/autostart
cat >/etc/xdg/autostart/budgie-nemo.desktop <<'NEMODESKTOP'
[Desktop Entry]
Type=Application
Name=Nemo
Comment=Start Nemo desktop at log in
Exec=nemo-desktop
OnlyShowIn=Budgie;
AutostartCondition=GSettings org.nemo.desktop show-desktop-icons
X-GNOME-AutoRestart=true
NoDisplay=true
NEMODESKTOP
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[Seat:*]\ngreeter-hide-users=false\n' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
echo -e '[Greeter]\nbackground = /usr/share/backgrounds/default23.png\ndraw-user-backgrounds = true' > /etc/lightdm/slick-greeter.conf
plymouth-set-default-theme MXLiveLogo
INSTALL_DESKTOP
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_desktop

cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_user <<INSTALL_USER
#!/bin/bash
set -e
useradd -s /bin/bash -m '${username}'
echo -e '${userpass}\n${userpass}' | passwd '${username}'
usermod -aG audio,sudo '${username}'
INSTALL_USER
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_user

surface_remove="linux-headers-* linux-image-*"
initramfs_type="initramfstools"
if [ ! -z "${custom_packages}" ]; then
	echo -e "#!/bin/bash\nset -e\nyes | DEBIAN_FRONTEND=noninteractive apt install ${custom_packages}" > "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_packages
	chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_packages
fi
if [ ! -z "${custom_script}" ]; then
	cp "${custom_script}" "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_script
	chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_script
fi
}

chroot_Neon()
{
prepare_bootstrap="
yes | DEBIAN_FRONTEND=noninteractive apt update
yes | DEBIAN_FRONTEND=noninteractive apt install bash bash-completion btrfs-progs bzip2 ca-certificates coreutils cryptsetup curl dosfstools e2fsprogs efibootmgr fdisk gzip lsof nano openssl sudo strace tar util-linux xz-utils zstd
"

cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/prepare_chroot <<PREPARE_CHROOT
yes | DEBIAN_FRONTEND=noninteractive apt install debootstrap
debootstrap --arch=amd64 --include=ca-certificates,console-setup,dirmngr,gpg,gpg-agent,kbd,locales,python3-cffi-backend,software-properties-common jammy /mnt http://archive.ubuntu.com/ubuntu
PREPARE_CHROOT
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/prepare_chroot

cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/chroot_init <<CHROOT_INIT
#!/bin/bash
set -e
cat >/etc/apt/sources.list <<'SOURCESLIST'
deb http://archive.ubuntu.com/ubuntu jammy main restricted universe multiverse
# deb-src http://archive.ubuntu.com/ubuntu jammy main restricted universe multiverse

deb http://archive.ubuntu.com/ubuntu jammy-updates main restricted universe multiverse
# deb-src http://archive.ubuntu.com/ubuntu jammy-updates main restricted universe multiverse

deb http://archive.ubuntu.com/ubuntu jammy-security main restricted universe multiverse
# deb-src http://archive.ubuntu.com/ubuntu jammy-security main restricted universe multiverse
SOURCESLIST
yes | DEBIAN_FRONTEND=noninteractive apt update
yes | DEBIAN_FRONTEND=noninteractive apt dist-upgrade
cat >/etc/apt/sources.list.d/neon.list <<'RECOMMENDS'
deb http://archive.neon.kde.org/user/ jammy main
RECOMMENDS
echo -e 'Dpkg::Options {\n  "--force-confnew";\n};' > /etc/apt/apt.conf.d/71debconf
yes | DEBIAN_FRONTEND=noninteractive apt update --allow-insecure-repositories
yes | DEBIAN_FRONTEND=noninteractive apt install neon-keyring neon-settings --allow-unauthenticated
yes | DEBIAN_FRONTEND=noninteractive apt update
yes | DEBIAN_FRONTEND=noninteractive apt install -o APT::Immediate-Configure=false --reinstall \$(apt list --installed | cut -d'/' -f1 | sed '1d' | sed -z 's@\n@ @g')
yes | DEBIAN_FRONTEND=noninteractive dpkg --configure -a
echo -e 'Dpkg::Options {\n  "--force-confdef";\n};' > /etc/apt/apt.conf.d/71debconf
yes | DEBIAN_FRONTEND=noninteractive apt install linux-generic linux-headers-generic dkms linux-firmware wireless-regdb bash sudo modemmanager network-manager wpasupplicant bluez cryptsetup-initramfs e2fsprogs ntfs-3g nano acpid curl thermald bash-completion gnupg-utils policykit-1 xdg-user-dirs zstd fwupd-signed patchutils net-tools usb-modeswitch upower efibootmgr grub-efi grub-efi-amd64-signed os-prober shim-signed amd64-microcode intel-microcode update-manager-core sbsigntool mokutil dosfstools btrfs-progs
CHROOT_INIT
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/chroot_init

case "${desktop}" in
	'essentials')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install neon-essentials-desktop libpam-kwallet5
"
	;;
	'full')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install neon-desktop libpam-kwallet5
"
	;;
esac
cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_desktop <<INSTALL_DESKTOP
#!/bin/bash
set -e
if [ "${desktop}" == "none" ]; then exit 0; fi
${install_desktop}
yes | DEBIAN_FRONTEND=noninteractive apt purge plasma-firewall firewalld
INSTALL_DESKTOP
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_desktop

cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_user <<INSTALL_USER
#!/bin/bash
set -e
useradd -s /bin/bash -m '${username}'
echo -e '${userpass}\n${userpass}' | passwd '${username}'
usermod -aG sudo '${username}'
INSTALL_USER
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_user

surface_remove="linux-generic-* linux-headers-* linux-image-* linux-modules-*"
initramfs_type="initramfstools"
if [ ! -z "${custom_packages}" ]; then
	echo -e "#!/bin/bash\nset -e\nyes | DEBIAN_FRONTEND=noninteractive apt install ${custom_packages}" > "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_packages
	chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_packages
fi
if [ ! -z "${custom_script}" ]; then
	cp "${custom_script}" "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_script
	chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_script
fi
}

chroot_NixOS()
{
prepare_bootstrap="
curl -l https://archlinux.org/mirrorlist/?ip_version=4 -o /etc/pacman.d/mirrorlist
sed -i 's@#Server = https://geo.mirror.pkgbuild.com@Server = https://geo.mirror.pkgbuild.com@g' /etc/pacman.d/mirrorlist
pacman -Syu --noconfirm --needed bash bash-completion btrfs-progs bzip2 ca-certificates coreutils cryptsetup curl dosfstools e2fsprogs efibootmgr gzip lsof nano openssl sudo strace tar util-linux xz zstd
"

cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/prepare_chroot <<NIXOS_PREPARE_CHROOT
#!/bin/bash
set -e
/linuxloops/install_secureboot /mnt
/linuxloops/install_fstab
/linuxloops/install_initramfs
groupadd -g 30000 nixbld
useradd -u 30000 -g nixbld -G nixbld nixbld
useradd -s /bin/bash -m 'temp'
echo -e 'temp\ntemp' | passwd 'temp'
echo 'temp      ALL=(ALL) NOPASSWD: ALL' > /etc/sudoers.d/90-wheel
sudo -u temp bash << 'NIXOSINSTALL'
sudo mkdir -p /nix && sudo chown -R temp /nix
curl -L https://nixos.org/nix/install | sh
. /home/temp/.nix-profile/etc/profile.d/nix.sh
nix-channel --add https://nixos.org/channels/nixos-23.05 nixpkgs
nix-channel --update
nix-env -f '<nixpkgs>' -iA nixos-install-tools
sudo NIX_PATH=/home/temp/.nix-defexpr/channels nixos-install
/linuxloops/install_user
NIXOSINSTALL
NIXOS_PREPARE_CHROOT
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/prepare_chroot

case "${desktop}" in
	'budgie-full')
	nixos_desktop="
services.xserver.enable = true;
services.xserver.displayManager.lightdm.enable = true;
services.xserver.desktopManager.budgie.enable = true;
services.xserver.layout = \"${keymap}\";
"
	;;
	'cinnamon-full')
	nixos_desktop="
services.xserver.enable = true;
services.xserver.displayManager.lightdm.enable = true;
services.xserver.desktopManager.cinnamon.enable = true;
services.xserver.layout = \"${keymap}\";
"
	;;
	'deepin-full')
	nixos_desktop="
services.xserver.enable = true;
services.xserver.displayManager.lightdm.enable = true;
services.xserver.desktopManager.deepin.enable = true;
services.xserver.layout = \"${keymap}\";
"
	;;
	'gnome-full')
	nixos_desktop="
services.xserver.enable = true;
services.xserver.displayManager.gdm.enable = true;
services.xserver.displayManager.gdm.wayland = false;
services.xserver.desktopManager.gnome.enable = true;
services.xserver.layout = \"${keymap}\";
"
	;;
	'kde-full')
	nixos_desktop="
services.xserver.enable = true;
services.xserver.displayManager.sddm.enable = true;
services.xserver.desktopManager.plasma5.enable = true;
services.xserver.layout = \"${keymap}\";
"
	;;
	'lxqt-full')
	nixos_desktop="
services.xserver.enable = true;
services.xserver.displayManager.lightdm.enable = true;
services.xserver.desktopManager.lxqt.enable = true;
services.xserver.layout = \"${keymap}\";
"
	;;
	'mate-full')
	nixos_desktop="
services.xserver.enable = true;
services.xserver.displayManager.lightdm.enable = true;
services.xserver.desktopManager.mate.enable = true;
services.xserver.layout = \"${keymap}\";
"
	;;
	'pantheon-full')
	nixos_desktop="
services.xserver.enable = true;
services.xserver.displayManager.lightdm.enable = true;
services.xserver.desktopManager.pantheon.enable = true;
services.xserver.layout = \"${keymap}\";
"
	;;
	'xfce-full')
	nixos_desktop="
services.xserver.enable = true;
services.xserver.displayManager.lightdm.enable = true;
services.xserver.desktopManager.xfce.enable = true;
services.xserver.layout = \"${keymap}\";
"
CUSTOM_PACKAGES="xfce.xfce4-pulseaudio-plugin ${custom_packages}"
	;;
esac

cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_user <<INSTALL_USER
sudo nixos-enter << 'NIXOSCHROOT'
set -e
useradd -m '${username}'
echo -e '${userpass}\n${userpass}' | passwd '${username}'
usermod -aG wheel,networkmanager '${username}'
NIXOSCHROOT
INSTALL_USER
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_user

initramfs_type="nixos_config"
}

chroot_openSUSE()
{
prepare_bootstrap="
zypper --non-interactive refresh
zypper --non-interactive install bash bash-completion btrfs-progs bzip2 ca-certificates coreutils cryptsetup curl dosfstools e2fsprogs efibootmgr gzip lsof nano openssl sudo strace tar util-linux xz zstd
"

cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/prepare_chroot <<PREPARE_CHROOT
zypper --root /mnt ar http://download.opensuse.org/tumbleweed/repo/oss/ repo-oss
zypper --root /mnt ar http://download.opensuse.org/tumbleweed/repo/non-oss/ repo-non-oss
zypper --root /mnt ar http://download.opensuse.org/update/tumbleweed/ repo-update
zypper --root /mnt --gpg-auto-import-keys refresh
zypper --root /mnt --non-interactive in patterns-openSUSE-base attr coreutils filesystem glibc-locale glibc-i18ndata grep gzip lsof pam permissions rpm sed shadow system-group-wheel zypper
PREPARE_CHROOT
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/prepare_chroot

cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/chroot_init <<CHROOT_INIT
sed -i 's@# solver.onlyRequires = false@solver.onlyRequires = true@g' /etc/zypp/zypp.conf
zypper --non-interactive install kernel-default kernel-default-devel dkms kernel-firmware-all wireless-regdb nano ntfs-3g sudo ModemManager NetworkManager wpa_supplicant bluez cryptsetup nano e2fsprogs ntfsprogs device-mapper acpid curl thermald bash-completion gpg2 polkit xdg-user-dirs zstd fwupd-efi patchutils net-tools usb_modeswitch upower efibootmgr grub2-x86_64-efi grub2-branding-openSUSE os-prober shim ucode-amd ucode-intel sbsigntools dosfstools btrfsprogs
systemctl enable bluetooth.service NetworkManager.service
CHROOT_INIT
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/chroot_init

hardware_support="alsa-utils alsa-firmware at-spi2-core avahi cups cups-filters nss-mdns pipewire pipewire-pulseaudio wireplumber system-config-printer"
basic_packages="gvfs-fuse PackageKit udisks2 xdg-user-dirs-gtk"
basic_themes="adwaita-icon-theme breeze breeze-gtk dejavu-fonts google-roboto-fonts gnome-backgrounds materia-gtk-theme papirus-icon-theme"
specific_packages="adobe-sourcecodepro-fonts cantarell-fonts plymouth-branding-openSUSE wallpaper-branding-openSUSE"
desktop_base="patterns-base-x11 ${hardware_support} ${basic_packages} ${basic_themes} ${specific_packages}"
desktop_services="avahi-dnsconfd.service cups-browsed.service"
case "${desktop}" in
	'budgie')
	install_desktop="
zypper --non-interactive install ${desktop_base} lightdm lightdm-slick-greeter-branding-openSUSE patterns-budgie-budgie gnome-keyring-pam polkit-gnome gnome-terminal nemo NetworkManager-applet
"
	;;
	'budgie-full')
	install_desktop="
sed -i 's@solver.onlyRequires = true@# solver.onlyRequires = false@g' /etc/zypp/zypp.conf
zypper --non-interactive install ${desktop_base} lightdm lightdm-slick-greeter-branding-openSUSE patterns-budgie-budgie gnome-keyring-pam polkit-gnome gnome-terminal nemo NetworkManager-applet
"
	;;
	'cinnamon')
	install_desktop="
zypper --non-interactive install ${desktop_base} lightdm lightdm-slick-greeter-branding-openSUSE patterns-cinnamon-cinnamon cinnamon-settings-daemon gnome-keyring-pam polkit-gnome gnome-terminal nemo NetworkManager-applet mint-x-icon-theme mint-y-icon-theme python3-requests blueman
"
	;;
	'cinnamon-full')
	install_desktop="
sed -i 's@solver.onlyRequires = true@# solver.onlyRequires = false@g' /etc/zypp/zypp.conf
zypper --non-interactive install ${desktop_base} lightdm lightdm-slick-greeter-branding-openSUSE patterns-cinnamon-cinnamon cinnamon-settings-daemon gnome-keyring-pam polkit-gnome gnome-terminal nemo NetworkManager-applet mint-x-icon-theme mint-y-icon-theme python3-requests blueman
"
	;;
	'deepin')
	install_desktop="
zypper --non-interactive install ${desktop_base} lightdm lightdm-slick-greeter-branding-openSUSE patterns-deepin-deepin deepin-desktop-schemas-branding-openSUSE deepin-terminal deepin-file-manager deepin-polkit-agent NetworkManager-applet
"
	;;
	'deepin-full')
	install_desktop="
sed -i 's@solver.onlyRequires = true@# solver.onlyRequires = false@g' /etc/zypp/zypp.conf
zypper --non-interactive install ${desktop_base} lightdm lightdm-slick-greeter-branding-openSUSE patterns-deepin-deepin deepin-desktop-schemas-branding-openSUSE deepin-terminal deepin-file-manager deepin-polkit-agent NetworkManager-applet
zypper --non-interactive remove sddm
"
	;;
	'enlightenment')
	install_desktop="
systemctl disable NetworkManager.service
zypper --non-interactive install ${desktop_base} lightdm lightdm-slick-greeter-branding-openSUSE patterns-enlightenment-enlightenment terminology python3-dbus-python econnman
systemctl enable connman.service
"
	;;
	'enlightenment-full')
	install_desktop="
systemctl disable NetworkManager.service
sed -i 's@solver.onlyRequires = true@# solver.onlyRequires = false@g' /etc/zypp/zypp.conf
zypper --non-interactive install ${desktop_base} lightdm lightdm-slick-greeter-branding-openSUSE patterns-enlightenment-enlightenment terminology python3-dbus-python econnman
systemctl enable connman.service
"
	;;
	'gnome')
	install_desktop="
zypper --non-interactive install ${desktop_base} gdm-branding-openSUSE patterns-gnome-gnome gnome-keyring-pam polkit-gnome gnome-terminal nautilus NetworkManager-applet
"
	;;
	'gnome-full')
	install_desktop="
sed -i 's@solver.onlyRequires = true@# solver.onlyRequires = false@g' /etc/zypp/zypp.conf
zypper --non-interactive install ${desktop_base} gdm-branding-openSUSE patterns-gnome-gnome gnome-keyring-pam polkit-gnome gnome-terminal nautilus NetworkManager-applet
"
	;;
	'kde')
	install_desktop="
zypper --non-interactive install ${desktop_base} sddm-branding-openSUSE patterns-kde-kde konsole NetworkManager-applet webenginepart plasma-nm5 dolphin discover discover-backend-packagekit plasma5-workspace-wallpapers plasma5-pa plasma5-addons breeze5-wallpapers
"
	;;
	'kde-full')
	install_desktop="
sed -i 's@solver.onlyRequires = true@# solver.onlyRequires = false@g' /etc/zypp/zypp.conf
zypper --non-interactive install ${desktop_base} sddm-branding-openSUSE patterns-kde-kde konsole NetworkManager-applet webenginepart plasma-nm5 dolphin discover discover-backend-packagekit plasma5-workspace-wallpapers plasma5-pa plasma5-addons breeze5-wallpapers
"
	;;
	'lxde')
	install_desktop="
zypper --non-interactive install ${desktop_base} lightdm lightdm-slick-greeter-branding-openSUSE patterns-lxde-lxde lxsession lxappearance nuoveXT2-icon-theme lxterminal lxde-common lxpanel pcmanfm NetworkManager-applet blueman
"
	;;
	'lxde-full')
	install_desktop="
sed -i 's@solver.onlyRequires = true@# solver.onlyRequires = false@g' /etc/zypp/zypp.conf
zypper --non-interactive install ${desktop_base} lightdm lightdm-slick-greeter-branding-openSUSE patterns-lxde-lxde lxsession lxappearance nuoveXT2-icon-theme lxterminal lxde-common lxpanel pcmanfm NetworkManager-applet blueman
"
	;;
	'lxqt')
	install_desktop="
zypper --non-interactive install ${desktop_base} lightdm lightdm-slick-greeter-branding-openSUSE patterns-lxqt-lxqt openbox qterminal pcmanfm-qt NetworkManager-applet blueman
"
	;;
	'lxqt-full')
	install_desktop="
sed -i 's@solver.onlyRequires = true@# solver.onlyRequires = false@g' /etc/zypp/zypp.conf
zypper --non-interactive install ${desktop_base} lightdm lightdm-slick-greeter-branding-openSUSE patterns-lxqt-lxqt openbox qterminal pcmanfm-qt NetworkManager-applet blueman
"
	;;
	'mate')
	install_desktop="
zypper --non-interactive install ${desktop_base} lightdm lightdm-slick-greeter-branding-openSUSE patterns-mate-mate mate-panel-branding-openSUSE mate-themes mate-terminal mate-media mate-power-manager mate-menus caja NetworkManager-applet blueman
"
	;;
	'mate-full')
	install_desktop="
sed -i 's@solver.onlyRequires = true@# solver.onlyRequires = false@g' /etc/zypp/zypp.conf
zypper --non-interactive install ${desktop_base} lightdm lightdm-slick-greeter-branding-openSUSE patterns-mate-mate mate-panel-branding-openSUSE mate-themes mate-terminal mate-media mate-power-manager mate-menus caja NetworkManager-applet blueman
"
	;;
	'xfce')
	install_desktop="
zypper --non-interactive install ${desktop_base} lightdm lightdm-slick-greeter-branding-openSUSE patterns-xfce-xfce adwaita-xfce-icon-theme libxfce4ui-branding-openSUSE xfce4-settings-branding-openSUSE xfce4-power-manager-plugin xfce4-power-manager-branding-openSUSE xfce4-pulseaudio-plugin xfce4-terminal thunar NetworkManager-applet blueman
"
	;;
	'xfce-full')
	install_desktop="
sed -i 's@solver.onlyRequires = true@# solver.onlyRequires = false@g' /etc/zypp/zypp.conf
zypper --non-interactive install ${desktop_base} lightdm lightdm-slick-greeter-branding-openSUSE patterns-xfce-xfce adwaita-xfce-icon-theme libxfce4ui-branding-openSUSE xfce4-settings-branding-openSUSE xfce4-power-manager-plugin xfce4-power-manager-branding-openSUSE xfce4-pulseaudio-plugin xfce4-terminal thunar NetworkManager-applet blueman
"
	;;
esac
cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_desktop <<INSTALL_DESKTOP
#!/bin/bash
set -e
if [ "${desktop}" == "none" ]; then exit 0; fi
zypper --non-interactive install xset
cp /usr/bin/xset /usr/bin/xset.orig
echo -e '#!/bin/bash\nexit 0' > /usr/bin/xset
${install_desktop}
rm /usr/bin/xset
mv /usr/bin/xset.orig /usr/bin/xset
systemctl enable ${desktop_services}
mkdir -p /usr/share/glib-2.0/schemas
cat >/usr/share/glib-2.0/schemas/zz_linuxloops.gschema.override <<'DCONF'
[org.cinnamon.desktop.interface]
gtk-theme="Materia"
icon-theme="Papirus"
[org.cinnamon.desktop.wm.preferences]
theme="Materia"
DCONF
if [ ! -z "\$(command -v glib-compile-schemas)" ]; then glib-compile-schemas /usr/share/glib-2.0/schemas/; fi
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[LightDM]\nlogind-check-graphical=true\n\n' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
INSTALL_DESKTOP
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_desktop

cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_user <<INSTALL_USER
#!/bin/bash
set -e
useradd -s /bin/bash -m '${username}'
echo -e '${userpass}\n${userpass}' | passwd '${username}'
usermod -aG wheel '${username}'
echo -e "Defaults secure_path="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"\nroot ALL=(ALL) ALL\n@includedir /etc/sudoers.d" > /etc/sudoers
echo "%wheel      ALL=(ALL) ALL" > /etc/sudoers.d/90-wheel
cat >/etc/polkit-1/rules.d/50-default.rules <<'POLKIT'
polkit.addAdminRule(function(action, subject) {
    return ["unix-group:wheel"];
});
POLKIT
cat >/etc/polkit-1/rules.d/50-org.freedesktop.NetworkManager.rules <<'NETWORKMANAGER'
polkit.addRule(function(action, subject) {
    if (action.id.indexOf("org.freedesktop.NetworkManager.") == 0 && subject.isInGroup("wheel")) {
        return polkit.Result.YES;
    }
});
NETWORKMANAGER
cat >/etc/polkit-1/rules.d/51-blueman.rules <<'BLUEMAN'
polkit.addRule(function(action, subject) {
    if ((action.id == "org.blueman.network.setup" ||
         action.id == "org.blueman.dhcp.client" ||
         action.id == "org.blueman.rfkill.setstate" ||
         action.id == "org.blueman.pppd.pppconnect") &&
        subject.isInGroup("wheel")) {

        return polkit.Result.YES;
    }
});
BLUEMAN
INSTALL_USER
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_user

initramfs_type="dracut"
if [ ! -z "${custom_packages}" ]; then
	echo -e "#!/bin/bash\nset -e\nzypper --non-interactive install ${custom_packages}" > "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_packages
	chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_packages
fi
if [ ! -z "${custom_script}" ]; then
	cp "${custom_script}" "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_script
	chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_script
fi
}

chroot_Parrot()
{
prepare_bootstrap="
yes | DEBIAN_FRONTEND=noninteractive apt update
yes | DEBIAN_FRONTEND=noninteractive apt install bash bash-completion btrfs-progs bzip2 ca-certificates coreutils cryptsetup curl dosfstools e2fsprogs efibootmgr fdisk gzip lsof nano openssl sudo strace tar util-linux xz-utils zstd
"

cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/prepare_chroot <<PREPARE_CHROOT
yes | DEBIAN_FRONTEND=noninteractive apt install debootstrap
debootstrap --arch=amd64 --include=ca-certificates,console-setup,dirmngr,gpg,kbd,locales bullseye /mnt http://deb.debian.org/debian
PREPARE_CHROOT
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/prepare_chroot

cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/chroot_init <<CHROOT_INIT
#!/bin/bash
set -e
rm -f /etc/apt/sources.list
cat >/etc/apt/sources.list <<'SOURCESLIST'
deb http://deb.debian.org/debian bullseye main contrib non-free
# deb-src http://deb.debian.org/debian bullseye main contrib non-free

deb http://deb.debian.org/debian-security/ bullseye-security main contrib non-free
# deb-src http://deb.debian.org/debian-security/ bullseye-security main contrib non-free

deb http://deb.debian.org/debian bullseye-updates main contrib non-free
# deb-src http://deb.debian.org/debian bullseye-updates main contrib non-free
SOURCESLIST
yes | DEBIAN_FRONTEND=noninteractive apt update
yes | DEBIAN_FRONTEND=noninteractive apt dist-upgrade
cat >/etc/apt/sources.list.d/parrot.list <<'PARROTSOURCES'
deb https://azure.deb.parrot.sh/parrot parrot main contrib non-free
deb https://azure.deb.parrot.sh/parrot parrot-security main contrib non-free
PARROTSOURCES
echo -e 'APT::Install-Recommends "0";\nAPT::Get::Install-Recommends "false";' > /etc/apt/apt.conf.d/99linuxloops
echo -e 'Dpkg::Options {\n  "--force-confnew";\n};' > /etc/apt/apt.conf.d/71debconf
yes | DEBIAN_FRONTEND=noninteractive apt update --allow-insecure-repositories
yes | DEBIAN_FRONTEND=noninteractive apt install parrot-archive-keyring --allow-unauthenticated
yes | DEBIAN_FRONTEND=noninteractive apt update
yes | DEBIAN_FRONTEND=noninteractive apt install -o APT::Immediate-Configure=false --reinstall \$(apt list --installed | cut -d'/' -f1 | sed '1d' | sed -z 's@\n@ @g')
yes | DEBIAN_FRONTEND=noninteractive dpkg --configure -a
echo -e 'Dpkg::Options {\n  "--force-confdef";\n};' > /etc/apt/apt.conf.d/71debconf
yes | DEBIAN_FRONTEND=noninteractive apt install linux-image-amd64 linux-headers-amd64 dkms firmware-linux firmware-atheros firmware-iwlwifi firmware-realtek wireless-regdb bash sudo modemmanager network-manager wpasupplicant bluez cryptsetup-initramfs e2fsprogs ntfs-3g nano acpid curl thermald bash-completion gnupg-utils policykit-1 xdg-user-dirs zstd fwupd-signed patchutils net-tools usb-modeswitch upower efibootmgr grub-efi grub-efi-amd64-bin os-prober shim-signed amd64-microcode intel-microcode lsb-release parrot-themes sbsigntool mokutil dosfstools btrfs-progs
echo -e 'sign_tool="/etc/dkms/sign_helper.sh"' >> /etc/dkms/framework.conf
echo -e '#!/bin/sh\n/lib/modules/"\${1}"/build/scripts/sign-file sha512 /var/lib/shim-signed/mok/MOK.priv /var/lib/shim-signed/mok/MOK.der "\${2}"' > /etc/dkms/sign_helper.sh
chmod 0755 /etc/dkms/sign_helper.sh
CHROOT_INIT
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/chroot_init

hardware_support="alsa-utils alsa-ucm-conf alsa-topology-conf at-spi2-core avahi-discover avahi-dnsconfd cups cups-browsed cups-filters libnss-mdns pulseaudio system-config-printer xserver-xorg"
basic_packages="gvfs-fuse packagekit udisks2 xdg-user-dirs-gtk"
basic_themes="adwaita-icon-theme breeze-gtk-theme breeze-icon-theme fonts-dejavu fonts-noto fonts-roboto gnome-backgrounds materia-gtk-theme oxygen-icon-theme papirus-icon-theme"
specific_packages="desktop-base plymouth-themes synaptic parrot-updater parrot-wallpapers"
desktop_base="${hardware_support} ${basic_packages} ${basic_themes} ${specific_packages}"
desktop_services="avahi-daemon.service cups.service cups-browsed.service"
case "${desktop}" in
	'budgie')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter budgie-desktop arc-theme nemo gnome-terminal libgdk-pixbuf2.0-bin
"
	;;
	'budgie-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter budgie-desktop arc-theme nautilus gnome-terminal libgdk-pixbuf2.0-bin
"
	;;
	'cinnamon')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter task-cinnamon-desktop gnome-terminal blueman
"
	;;
	'cinnamon-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter task-cinnamon-desktop gnome-terminal blueman
"
	;;
	'enlightenment')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter enlightenment terminology
yes | DEBIAN_FRONTEND=noninteractive apt purge network-manager
yes | DEBIAN_FRONTEND=noninteractive apt install connman
systemctl enable connman.service
find /usr/lib -type f -name enlightenment_system -exec chmod 4755 {} \;
"
	;;
	'enlightenment-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter enlightenment terminology
yes | DEBIAN_FRONTEND=noninteractive apt purge network-manager
yes | DEBIAN_FRONTEND=noninteractive apt install connman
systemctl enable connman.service
find /usr/lib -type f -name enlightenment_system -exec chmod 4755 {} \;
"
	;;
	'gnome')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} gdm3 parrot-desktop-gnome gnome-keyring libpam-gnome-keyring
"
	;;
	'gnome-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} gdm3 parrot-desktop-gnome gnome-keyring libpam-gnome-keyring
"
	;;
	'i3')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter parrot-desktop-i3 pavucontrol pasystray network-manager-gnome blueman
"
	;;
	'i3-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter parrot-desktop-i3 pavucontrol pasystray network-manager-gnome blueman
"
	;;
	'kde')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} sddm parrot-desktop-kde kwin-x11 dolphin plasma-discover konsole plasma-nm plasma-pa bluedevil libpam-kwallet5 powerdevil plasma-widgets-addons systemsettings
"
	;;
	'kde-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} sddm parrot-desktop-kde kwin-x11 plasma-nm plasma-pa powerdevil bluedevil libpam-kwallet5
"
	;;
	'lxde')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter lxde network-manager-gnome blueman
"
	;;
	'lxde-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter lxde network-manager-gnome blueman
"
	;;
	'mate')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter parrot-desktop-mate mate-desktop mate-session-manager mate-power-manager mate-media blueman
"
	;;
	'mate-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter parrot-desktop-mate mate-desktop mate-session-manager mate-power-manager mate-media blueman
"
	;;
	'xfce')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter parrot-desktop-xfce blueman
"
	;;
	'xfce-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter parrot-desktop-xfce blueman
"
	;;
esac
cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_desktop <<INSTALL_DESKTOP
#!/bin/bash
set -e
if [ "${desktop}" == "none" ]; then exit 0; fi
${install_desktop}
systemctl enable ${desktop_services}
mkdir -p /usr/share/glib-2.0/schemas
cat >/usr/share/glib-2.0/schemas/zz_linuxloops.gschema.override <<'DCONF'
[org.gnome.desktop.background:Budgie]
picture-uri="file:///usr/share/backgrounds/default.jpg"
[org.gnome.desktop.interface:Budgie]
gtk-theme="Arc"
icon-theme="Papirus"
[org.cinnamon.desktop.background]
picture-uri="file:///usr/share/backgrounds/default.jpg"
[org.cinnamon.desktop.interface]
gtk-theme="Materia"
icon-theme="Papirus"
[org.cinnamon.desktop.wm.preferences]
theme="Materia"
DCONF
if [ ! -z "\$(command -v glib-compile-schemas)" ]; then glib-compile-schemas /usr/share/glib-2.0/schemas/; fi
mkdir -p /etc/xdg/autostart
cat >/etc/xdg/autostart/budgie-nemo.desktop <<'NEMODESKTOP'
[Desktop Entry]
Type=Application
Name=Nemo
Comment=Start Nemo desktop at log in
Exec=nemo-desktop
OnlyShowIn=Budgie;
AutostartCondition=GSettings org.nemo.desktop show-desktop-icons
X-GNOME-AutoRestart=true
NoDisplay=true
NEMODESKTOP
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[Seat:*]\ngreeter-hide-users=false\n' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
echo -e '[Greeter]\nbackground = /usr/share/backgrounds/default.jpg\ndraw-user-backgrounds = true' > /etc/lightdm/slick-greeter.conf
INSTALL_DESKTOP
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_desktop

cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_user <<INSTALL_USER
#!/bin/bash
set -e
useradd -s /bin/bash -m '${username}'
echo -e '${userpass}\n${userpass}' | passwd '${username}'
usermod -aG sudo '${username}'
INSTALL_USER
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_user

initramfs_type="initramfstools"
if [ ! -z "${custom_packages}" ]; then
	echo -e "#!/bin/bash\nset -e\nyes | DEBIAN_FRONTEND=noninteractive apt install ${custom_packages}" > "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_packages
	chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_packages
fi
if [ ! -z "${custom_script}" ]; then
	cp "${custom_script}" "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_script
	chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_script
fi
}

chroot_Pop()
{
prepare_bootstrap="
yes | DEBIAN_FRONTEND=noninteractive apt update
yes | DEBIAN_FRONTEND=noninteractive apt install bash bash-completion btrfs-progs bzip2 ca-certificates coreutils cryptsetup curl dosfstools e2fsprogs efibootmgr fdisk gzip lsof nano openssl sudo strace tar util-linux xz-utils zstd
"

cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/prepare_chroot <<PREPARE_CHROOT
yes | DEBIAN_FRONTEND=noninteractive apt install debootstrap
debootstrap --arch=amd64 --include=ca-certificates,console-setup,dirmngr,gpg,gpg-agent,kbd,locales,python3-cffi-backend,software-properties-common jammy /mnt http://archive.ubuntu.com/ubuntu
PREPARE_CHROOT
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/prepare_chroot

cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/chroot_init <<CHROOT_INIT
#!/bin/bash
set -e
cat >/etc/apt/sources.list <<'SOURCESLIST'
deb http://archive.ubuntu.com/ubuntu jammy main restricted universe multiverse
# deb-src http://archive.ubuntu.com/ubuntu jammy main restricted universe multiverse

deb http://archive.ubuntu.com/ubuntu jammy-updates main restricted universe multiverse
# deb-src http://archive.ubuntu.com/ubuntu jammy-updates main restricted universe multiverse

deb http://archive.ubuntu.com/ubuntu jammy-security main restricted universe multiverse
# deb-src http://archive.ubuntu.com/ubuntu jammy-security main restricted universe multiverse
SOURCESLIST
yes | DEBIAN_FRONTEND=noninteractive apt update
yes | DEBIAN_FRONTEND=noninteractive apt dist-upgrade
cat >/etc/apt/preferences.d/kernelstub <<'KERNELSTUB'
Package: kernelstub
Pin: release *
Pin-Priority: -1
KERNELSTUB
apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 63C46DF0140D738961429F4E204DD8AEC33A7AFF
add-apt-repository "deb http://apt.pop-os.org/release \$(lsb_release -cs) main" -y
add-apt-repository "deb http://apt.pop-os.org/proprietary \$(lsb_release -cs) main" -y
echo -e 'Dpkg::Options {\n  "--force-confnew";\n};' > /etc/apt/apt.conf.d/71debconf
yes | DEBIAN_FRONTEND=noninteractive apt update --allow-insecure-repositories
yes | DEBIAN_FRONTEND=noninteractive apt install pop-default-settings --allow-unauthenticated
yes | DEBIAN_FRONTEND=noninteractive apt update
yes | DEBIAN_FRONTEND=noninteractive apt install -o APT::Immediate-Configure=false --reinstall \$(apt list --installed | cut -d'/' -f1 | sed '1d' | sed -z 's@\n@ @g')
yes | DEBIAN_FRONTEND=noninteractive dpkg --configure -a
echo -e 'Dpkg::Options {\n  "--force-confdef";\n};' > /etc/apt/apt.conf.d/71debconf
yes | DEBIAN_FRONTEND=noninteractive apt install linux-generic linux-headers-generic dkms linux-firmware wireless-regdb bash sudo modemmanager network-manager wpasupplicant bluez cryptsetup-initramfs e2fsprogs ntfs-3g nano acpid curl thermald bash-completion gnupg-utils policykit-1 xdg-user-dirs zstd fwupd-signed patchutils net-tools usb-modeswitch upower efibootmgr grub-efi grub-efi-amd64-signed os-prober shim-signed update-manager-core snapd sbsigntool mokutil dosfstools btrfs-progs
echo 'autoinstall_all_kernels="y"' >> /etc/dkms/framework.conf
CHROOT_INIT
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/chroot_init

case "${desktop}" in
	'full')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install pop-desktop
"
	;;
esac
cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_desktop <<INSTALL_DESKTOP
#!/bin/bash
set -e
if [ "${desktop}" == "none" ]; then exit 0; fi
${install_desktop}
INSTALL_DESKTOP
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_desktop

cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_user <<INSTALL_USER
#!/bin/bash
set -e
useradd -s /bin/bash -m '${username}'
echo -e '${userpass}\n${userpass}' | passwd '${username}'
usermod -aG sudo '${username}'
INSTALL_USER
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_user

initramfs_type="initramfstools"
if [ ! -z "${custom_packages}" ]; then
	echo -e "#!/bin/bash\nset -e\nyes | DEBIAN_FRONTEND=noninteractive apt install ${custom_packages}" > "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_packages
	chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_packages
fi
if [ ! -z "${custom_script}" ]; then
	cp "${custom_script}" "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_script
	chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_script
fi
}

chroot_Proxmox()
{
prepare_bootstrap="
yes | DEBIAN_FRONTEND=noninteractive apt update
yes | DEBIAN_FRONTEND=noninteractive apt install bash bash-completion btrfs-progs bzip2 ca-certificates coreutils cryptsetup curl dosfstools e2fsprogs efibootmgr fdisk gzip lsof nano openssl sudo strace tar util-linux xz-utils zstd
"

cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/prepare_chroot <<PREPARE_CHROOT
yes | DEBIAN_FRONTEND=noninteractive apt install debootstrap
debootstrap --arch=amd64 --include=ca-certificates,console-setup,dirmngr,gpg,kbd,locales bookworm /mnt http://deb.debian.org/debian
PREPARE_CHROOT
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/prepare_chroot

cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/chroot_init <<CHROOT_INIT
#!/bin/bash
set -e
cat >/etc/apt/sources.list <<'SOURCESLIST'
deb http://deb.debian.org/debian bookworm main contrib non-free non-free-firmware
# deb-src http://deb.debian.org/debian bookworm main contrib non-free non-free-firmware

deb http://deb.debian.org/debian-security/ bookworm-security main contrib non-free non-free-firmware
# deb-src http://deb.debian.org/debian-security/ bookworm-security main contrib non-free non-free-firmware

deb http://deb.debian.org/debian bookworm-updates main contrib non-free non-free-firmware
# deb-src http://deb.debian.org/debian bookworm-updates main contrib non-free non-free-firmware
SOURCESLIST
yes | DEBIAN_FRONTEND=noninteractive apt update
yes | DEBIAN_FRONTEND=noninteractive apt dist-upgrade
cat >/etc/apt/sources.list.d/pve-install-repo.list <<'SOURCES'
deb http://download.proxmox.com/debian/pve bookworm pve-no-subscription
SOURCES
echo -e 'APT::Install-Recommends "0";\nAPT::Get::Install-Recommends "false";' > /etc/apt/apt.conf.d/99linuxloops
echo -e 'Dpkg::Options {\n  "--force-confnew";\n};' > /etc/apt/apt.conf.d/71debconf
yes | DEBIAN_FRONTEND=noninteractive apt update --allow-insecure-repositories
yes | DEBIAN_FRONTEND=noninteractive apt install proxmox-archive-keyring --allow-unauthenticated
yes | DEBIAN_FRONTEND=noninteractive apt update
yes | DEBIAN_FRONTEND=noninteractive apt install -o APT::Immediate-Configure=false --reinstall \$(apt list --installed | cut -d'/' -f1 | sed '1d' | sed -z 's@\n@ @g')
yes | DEBIAN_FRONTEND=noninteractive dpkg --configure -a
echo -e 'Dpkg::Options {\n  "--force-confdef";\n};' > /etc/apt/apt.conf.d/71debconf
yes | DEBIAN_FRONTEND=noninteractive apt install proxmox-ve postfix open-iscsi ifenslave dkms pve-firmware wireless-regdb bash sudo modemmanager network-manager wpasupplicant bluez cryptsetup-initramfs e2fsprogs ntfs-3g nano acpid curl thermald bash-completion gnupg-utils policykit-1 xdg-user-dirs zstd fwupd-signed patchutils net-tools usb-modeswitch upower efibootmgr grub-efi grub-efi-amd64-signed os-prober shim-signed amd64-microcode intel-microcode lsb-release sbsigntool mokutil dosfstools btrfs-progs
sed -i 's/^/#/' /etc/apt/sources.list.d/pve-enterprise.list
echo -e 'sign_tool="/etc/dkms/sign_helper.sh"' >> /etc/dkms/framework.conf
echo -e '#!/bin/sh\n/lib/modules/"\${1}"/build/scripts/sign-file sha512 /var/lib/shim-signed/mok/MOK.priv /var/lib/shim-signed/mok/MOK.der "\${2}"' > /etc/dkms/sign_helper.sh
chmod 0755 /etc/dkms/sign_helper.sh
CHROOT_INIT
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/chroot_init

hardware_support="alsa-utils alsa-ucm-conf alsa-topology-conf at-spi2-core avahi-discover cups cups-browsed libnss-mdns pipewire-audio pipewire-alsa pipewire-jack pipewire-pulse wireplumber system-config-printer xserver-xorg"
basic_packages="gvfs-fuse packagekit udisks2 xdg-user-dirs-gtk"
basic_themes="adwaita-icon-theme breeze-gtk-theme breeze-icon-theme fonts-dejavu fonts-noto fonts-roboto gnome-backgrounds materia-gtk-theme oxygen-icon-theme papirus-icon-theme"
specific_packages="desktop-base plymouth-themes synaptic"
desktop_base="${hardware_support} ${basic_packages} ${basic_themes} ${specific_packages}"
case "${desktop}" in
	'budgie')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter budgie-desktop arc-theme nemo tilix paper-icon-theme
"
	;;
	'cinnamon')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter cinnamon cinnamon-core network-manager-gnome blueman gnome-terminal nemo
"
	;;
	'cinnamon-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter task-cinnamon-desktop network-manager-gnome blueman
"
	;;
	'enlightenment')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter enlightenment terminology
yes | DEBIAN_FRONTEND=noninteractive apt purge network-manager
yes | DEBIAN_FRONTEND=noninteractive apt install connman
find /usr/lib -type f -name enlightenment_system -exec chmod 4755 {} \;
"
	;;
	'gnome')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} gdm3 gnome-session gnome-shell gnome-control-center gnome-terminal nautilus gnome-icon-theme gnome-keyring libpam-gnome-keyring gnome-packagekit
"
	;;
	'gnome-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} gdm3 task-gnome-desktop
"
	;;
	'kde')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} sddm sddm-theme-breeze kde-plasma-desktop kwin-x11 dolphin plasma-discover konsole plasma-nm plasma-pa bluedevil libpam-kwallet5 powerdevil plasma-widgets-addons systemsettings
"
	;;
	'kde-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} sddm sddm-theme-breeze task-kde-desktop
"
	;;
	'lxde')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter lxde-core lxterminal pcmanfm lxde-icon-theme network-manager-gnome blueman lxappearance
"
	;;
	'lxde-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter task-lxde-desktop network-manager-gnome blueman
"
	;;
	'lxqt')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter lxqt-core qterminal pcmanfm-qt lxqt-theme-debian network-manager-gnome blueman openbox lxqt-powermanagement lxqt-themes
"
	;;
	'lxqt-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter task-lxqt-desktop network-manager-gnome blueman
"
	;;
	'mate')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter mate-desktop mate-session-manager marco mate-control-center mate-notification-daemon mate-applets mate-indicator-applet mate-applet-brisk-menu mate-themes mate-icon-theme mate-terminal caja network-manager-gnome blueman mate-media mate-power-manager
"
	;;
	'mate-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter task-mate-desktop blueman
"
	;;
	'xfce')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter xfce4 xfce4-power-manager-plugins xfce4-terminal thunar xfce4-notifyd network-manager-gnome blueman
"
	;;
	'xfce-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter task-xfce-desktop blueman
"
	;;
esac
cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_desktop <<INSTALL_DESKTOP
#!/bin/bash
set -e
if [ "${desktop}" == "none" ]; then exit 0; fi
${install_desktop}
mkdir -p /usr/share/glib-2.0/schemas
cat >/usr/share/glib-2.0/schemas/zz_linuxloops.gschema.override <<'DCONF'
[org.gnome.desktop.background:Budgie]
picture-uri="file:///usr/share/images/desktop-base/login-background.svg"
[org.gnome.desktop.interface:Budgie]
gtk-theme="Arc"
icon-theme="Papirus"
[org.cinnamon.desktop.background]
picture-uri="file:///usr/share/images/desktop-base/login-background.svg"
[org.cinnamon.desktop.interface]
gtk-theme="Materia"
icon-theme="Papirus"
[org.cinnamon.desktop.wm.preferences]
theme="Materia"
[org.mate.interface]
icon-theme='Papirus'
gtk-theme='Materia'
[org.mate.Marco.general]
theme='Materia'
DCONF
if [ ! -z "\$(command -v glib-compile-schemas)" ]; then glib-compile-schemas /usr/share/glib-2.0/schemas/; fi
mkdir -p /etc/skel/.config/xfce4/xfconf/xfce-perchannel-xml
cat > '/etc/skel/.config/xfce4/xfconf/xfce-perchannel-xml/xsettings.xml' <<'XFCETHEME'
<?xml version="1.0" encoding="UTF-8"?>
<channel name="xsettings" version="1.0">
  <property name="Net" type="empty">
    <property name="IconThemeName" type="string" value="Papirus"/>
    <property name="ThemeName" type="string" value="Materia"/>
  </property>
</channel>
XFCETHEME
mkdir -p /etc/xdg/autostart
cat >/etc/xdg/autostart/budgie-nemo.desktop <<'NEMODESKTOP'
[Desktop Entry]
Type=Application
Name=Nemo
Comment=Start Nemo desktop at log in
Exec=nemo-desktop
OnlyShowIn=Budgie;
AutostartCondition=GSettings org.nemo.desktop show-desktop-icons
X-GNOME-AutoRestart=true
NoDisplay=true
NEMODESKTOP
mkdir -p /etc/lightdm/lightdm.conf.d
echo -e '[Seat:*]\ngreeter-hide-users=false\n' > /etc/lightdm/lightdm.conf.d/99-linuxloops.conf
INSTALL_DESKTOP
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_desktop

cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_user <<INSTALL_USER
#!/bin/bash
set -e
echo -e '${userpass}\n${userpass}' | passwd root
useradd -s /bin/bash -m '${username}'
echo -e '${userpass}\n${userpass}' | passwd '${username}'
usermod -aG audio,sudo '${username}'
INSTALL_USER
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_user

surface_remove="pve-kernel-*"
initramfs_type="initramfstools"
if [ ! -z "${custom_packages}" ]; then
	echo -e "#!/bin/bash\nset -e\nyes | DEBIAN_FRONTEND=noninteractive apt install ${custom_packages}" > "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_packages
	chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_packages
fi
if [ ! -z "${custom_script}" ]; then
	cp "${custom_script}" "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_script
	chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_script
fi
}

chroot_Qubes()
{
hostname=dom0

cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/prepare_chroot <<PREPARE_CHROOT
#!/bin/bash
set -e
mkdir -p /etc/yum.fake.repos.d
echo -e '[local]\nname = local\nbaseurl = file:///source\nenabled=1\ngpgcheck=0\nrepo_gpgcheck=0' > /etc/yum.fake.repos.d/local.repo
dnf --disablerepo=* --enablerepo=local --setopt=reposdir=/etc/yum.fake.repos.d install -y coreutils util-linux
dnf --disablerepo=* --enablerepo=local --setopt=reposdir=/etc/yum.fake.repos.d --installroot=/mnt install -y @"Qubes OS with Xfce" @"Qubes UI (Audio/Gui)"
rm -r /etc/yum.fake.repos.d
mkdir -p /mnt/var/lib/qubes/template-packages
cp /source/Packages/qubes-template-*.rpm /mnt/var/lib/qubes/template-packages/
PREPARE_CHROOT
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/prepare_chroot

cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/chroot_init <<CHROOT_INIT
#!/bin/bash
set -e
rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-*
dnf --setopt=reposdir=/etc/yum.repos.d/ update -y
dnf --setopt=reposdir=/etc/yum.repos.d/ install -y akmods bash-completion dkms efibootmgr glibc-locale-source grub2-efi ntfs-3g os-prober
systemctl set-default graphical.target
if [ -f /etc/grub.d/01_fallback_counting ]; then chmod 0644 /etc/grub.d/01_fallback_counting; fi
if [ -f /etc/grub.d/01_menu_auto_hide ]; then chmod 0644 /etc/grub.d/01_menu_auto_hide; fi
cat >/root/anaconda-ks.cfg <<INITIALSETUP
#version=DEVEL
# Use graphical install
graphical
# Use CDROM installation media
cdrom


%packages
@^qubes-xfce
@qubes-ui

%end

# Keyboard layouts
keyboard --xlayouts='${keymap}'
# System language
lang ${locale}.UTF-8

# Network information
network  --hostname=dom0

# System timezone
timezone ${timezone}

#Root password
rootpw --lock
user --groups=wheel,qubes --name=${username} --password=\$(openssl passwd -6 "${userpass}") --iscrypted
INITIALSETUP
if [ "${install_type}" == "image" ]; then
cat >/usr/lib/udev/rules.d/01-linuxloops.rules <<'UDEVRULE'
ACTION!="remove", SUBSYSTEM=="block", KERNEL=="loop0*", ENV{DM_UDEV_DISABLE_DISK_RULES_FLAG}="0", ENV{UDEV_DISABLE_PERSISTENT_STORAGE_RULES_FLAG}="0"
UDEVRULE
fi
CHROOT_INIT
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/chroot_init

cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_user <<INSTALL_USER
#!/bin/bash
set -e
useradd -s /bin/bash -m '${username}'
echo -e '${userpass}\n${userpass}' | passwd '${username}'
usermod -aG wheel,qubes '${username}'
echo "%wheel      ALL=(ALL) ALL" > /etc/sudoers.d/90-wheel
INSTALL_USER
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_user

xen_cmdline_extra="console=none dom0_mem=min:1024M dom0_mem=max:4096M ucode=scan smt=off gnttab_max_frames=2048 gnttab_max_maptrack_frames=4096"
initramfs_type="dracut"
if [ ! -z "${custom_packages}" ]; then
	echo -e "#!/bin/bash\nset -e\ndnf --setopt=reposdir=/etc/yum.repos.d/ install -y ${custom_packages}" > "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_packages
	chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_packages
fi
if [ ! -z "${custom_script}" ]; then
	cp "${custom_script}" "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_script
	chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_script
fi
}

chroot_RockyLinux()
{
prepare_bootstrap="
dnf update -y
dnf install -y bash bash-completion bzip2 ca-certificates coreutils cryptsetup curl dosfstools e2fsprogs efibootmgr gzip lsof nano openssl sudo strace tar util-linux xz zstd
"

cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/prepare_chroot <<PREPARE_CHROOT
#!/bin/bash
set -e
dnf install --installroot=/mnt --releasever / -y @core
PREPARE_CHROOT
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/prepare_chroot

cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/chroot_init <<CHROOT_INIT
#!/bin/bash
set -e
dnf install -y epel-release
rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL*
dnf update -y
dnf install -y kernel kernel-headers dkms linux-firmware iwl100-firmware iwl1000-firmware iwl105-firmware iwl135-firmware iwl2000-firmware iwl2030-firmware iwl3160-firmware iwl5000-firmware iwl5150-firmware iwl6000g2a-firmware iwl6000g2b-firmware iwl6050-firmware iwl7260-firmware wireless-regdb glibc-locale-source ntfs-3g bash sudo ModemManager NetworkManager-bluetooth NetworkManager-wifi wpa_supplicant bluez cryptsetup e2fsprogs ntfsprogs nano acpid curl thermald bash-completion gpg polkit xdg-user-dirs zstd fwupd patchutils net-tools usb_modeswitch upower efibootmgr nss-mdns grub2-efi os-prober shim microcode_ctl mokutil dosfstools
dnf --enablerepo=crb install -y rocky-sb-certs
CHROOT_INIT
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/chroot_init

case "${desktop}" in
	'full')
	install_desktop="
dnf install -y @\"Server with GUI\"
systemctl enable cups-browsed.service
systemctl set-default graphical
"
	;;
esac
cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_desktop <<INSTALL_DESKTOP
#!/bin/bash
set -e
if [ "${desktop}" == "none" ]; then exit 0; fi
${install_desktop}
INSTALL_DESKTOP
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_desktop

cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_user <<INSTALL_USER
#!/bin/bash
set -e
useradd -s /bin/bash -m '${username}'
echo -e '${userpass}\n${userpass}' | passwd '${username}'
usermod -aG wheel '${username}'
echo "%wheel      ALL=(ALL) ALL" > /etc/sudoers.d/90-wheel
INSTALL_USER
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_user

initramfs_type="dracut"
if [ ! -z "${custom_packages}" ]; then
	echo -e "#!/bin/bash\nset -e\ndnf install -y ${custom_packages}" > "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_packages
	chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_packages
fi
if [ ! -z "${custom_script}" ]; then
	cp "${custom_script}" "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_script
	chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_script
fi
}

chroot_SteamOS()
{
prepare_bootstrap="
curl -l https://archlinux.org/mirrorlist/?ip_version=4 -o /etc/pacman.d/mirrorlist
sed -i 's@#Server = https://geo.mirror.pkgbuild.com@Server = https://geo.mirror.pkgbuild.com@g' /etc/pacman.d/mirrorlist
pacman -Syu --noconfirm --needed bash bash-completion btrfs-progs bzip2 ca-certificates coreutils cryptsetup curl dosfstools e2fsprogs efibootmgr gzip lsof nano openssl sudo strace tar util-linux xz zstd
"

cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/prepare_chroot <<PREPARE_CHROOT
#!/bin/bash
set -e
cat >/etc/pacman_steamos.conf <<'PACMAN-STEAMOS'
#
# /etc/pacman.conf
#
# See the pacman.conf(5) manpage for option and repository directives
 
#
# GENERAL OPTIONS
#
[options]
# The following paths are commented out with their default values listed.
# If you wish to use different paths, uncomment and update the paths.
#RootDir     = /
#DBPath      = /var/lib/pacman/
#CacheDir    = /var/cache/pacman/pkg/
#LogFile     = /var/log/pacman.log
#GPGDir      = /etc/pacman.d/gnupg/
#HookDir     = /etc/pacman.d/hooks/
HoldPkg     = pacman glibc
#XferCommand = /usr/bin/curl -L -C - -f -o %o %u
#XferCommand = /usr/bin/wget --passive-ftp -c -O %o %u
#CleanMethod = KeepInstalled
Architecture = auto
 
# Pacman won't upgrade packages listed in IgnorePkg and members of IgnoreGroup
#IgnorePkg   =
#IgnoreGroup =
 
#NoUpgrade   =
NoExtract   = etc/sddm.conf.d/steamdeck.conf etc/skel/Desktop/Return.desktop etc/xdg/autostart/steam.desktop usr/bin/jupiter-plasma-bootstrap usr/lib/udev/rules.d/99-kwin-ignore-tablet-mode.rules usr/share/xsessions/*
 
# Misc options
#UseSyslog
Color
#TotalDownload
# We cannot check disk space from within a chroot environment
CheckSpace
#VerbosePkgLists
 
# By default, pacman accepts packages signed by keys that its local keyring
# trusts (see pacman-key and its man page), as well as unsigned packages.
SigLevel    = Required DatabaseOptional
LocalFileSigLevel = Optional
#RemoteFileSigLevel = Required
 
# NOTE: You must run \`pacman-key --init\` before first using pacman; the local
# keyring can then be populated with the keys of all official Arch Linux
# packagers with \`pacman-key --populate archlinux\`.
 
#
# REPOSITORIES
#   - can be defined here or included from another file
#   - pacman will search repositories in the order defined here
#   - local/custom mirrors can be added here or in separate files
#   - repositories listed first will take precedence when packages
#     have identical names, regardless of version number
#   - URLs will have $repo replaced by the name of the current repo
#   - URLs will have $arch replaced by the name of the architecture
#
# Repository entries are of the format:
#       [repo-name]
#       Server = ServerName
#       Include = IncludePath
#
# The header [repo-name] is crucial - it must be present and
# uncommented to enable the repo.
#
 
# The testing repositories are disabled by default. To enable, uncomment the
# repo name header and Include lines. You can add preferred servers immediately
# after the header, and they will be used before the default mirrors.
 
#[testing]
#Include = /etc/pacman.d/mirrorlist
 
[core-main]
Include = /etc/pacman.d/mirrorlist
 
[extra-main]
Include = /etc/pacman.d/mirrorlist
 
#[community-testing]
#Include = /etc/pacman.d/mirrorlist
 
[community-main]
Include = /etc/pacman.d/mirrorlist
 
[multilib-main]
Include = /etc/pacman.d/mirrorlist

[jupiter-main]
Include = /etc/pacman.d/mirrorlist
 
[holo-main]
Include = /etc/pacman.d/mirrorlist
 
# An example of a custom package repository.  See the pacman manpage for
# tips on creating your own repositories.
#[custom]
#SigLevel = Optional TrustAll
#Server = file:///home/custompkgs
PACMAN-STEAMOS
cp /etc/pacman_steamos.conf /etc/pacman_steamos_install.conf
sed -i 's@SigLevel    = Required DatabaseOptional@SigLevel    = Never@g' /etc/pacman_steamos_install.conf
sed -i 's@#RemoteFileSigLevel = Required@RemoteFileSigLevel = Optional@g' /etc/pacman_steamos_install.conf
echo 'Server = https://steamdeck-packages.steamos.cloud/archlinux-mirror/\$repo/os/\$arch' > /etc/pacman.d/mirrorlist
pacstrap -C /etc/pacman_steamos_install.conf -G /mnt base base-devel holo-keyring
cp /etc/pacman_steamos.conf /mnt/etc/pacman.conf
PREPARE_CHROOT
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/prepare_chroot

cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/chroot_init <<CHROOT_INIT
#!/bin/bash
set -e
pacman-key --init
pacman-key --populate
pacman -Syu --noconfirm --needed linux-neptune-61 linux-neptune-61-headers dkms linux-firmware-neptune sof-firmware wireless-regdb bash sudo modemmanager networkmanager wpa_supplicant bluez cryptsetup e2fsprogs ntfs-3g nano acpid curl thermald bash-completion gnupg polkit xdg-user-dirs zstd fwupd patchutils net-tools usb_modeswitch upower efibootmgr grub os-prober shim amd-ucode intel-ucode sbsigntools mokutil dosfstools btrfs-progs
systemctl enable bluetooth.service ModemManager.service NetworkManager.service
CHROOT_INIT
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/chroot_init

hardware_support="alsa-lib alsa-utils alsa-topology-conf alsa-ucm-conf at-spi2-core avahi cups nss-mdns pipewire-audio pipewire-alsa pipewire-jack pipewire-pulse wireplumber system-config-printer xorg-server"
basic_packages="gvfs udisks2 xdg-user-dirs-gtk"
basic_themes="adobe-source-code-pro-fonts adwaita-icon-theme breeze-gtk breeze-icons gnome-backgrounds materia-gtk-theme noto-fonts oxygen-icons papirus-icon-theme ttf-dejavu ttf-roboto"
specific_packages="archlinux-wallpaper flatpak gamescope mangohud steam-jupiter-stable vulkan-intel lib32-vulkan-intel vulkan-radeon lib32-vulkan-radeon lib32-pipewire lib32-fontconfig ttf-liberation wqy-zenhei"
desktop_base="${hardware_support} ${basic_packages} ${basic_themes} ${specific_packages}"
desktop_services="avahi-daemon.service cups.service cups-browsed.service"
case "${desktop}" in
	'full')
	install_desktop="
pacman -S --noconfirm ${desktop_base} sddm qt5-virtualkeyboard plasma-desktop plasma-wayland-session plasma-nm plasma-pa kwin ark dolphin konsole bluedevil powerdevil systemsettings discover kwallet-pam steamdeck-kde-presets
"
	;;
	'full-autologin')
	install_desktop="
pacman -S --noconfirm ${desktop_base} sddm qt5-virtualkeyboard plasma-desktop plasma-wayland-session plasma-nm plasma-pa kwin ark dolphin konsole bluedevil powerdevil systemsettings discover kwallet-pam steamdeck-kde-presets
cat >/etc/sddm.conf.d/steamos.conf <<'SDDM'
[Autologin]
Session=plasmawayland
User=$username
SDDM
mkdir -p /etc/skel/.config
cat >/etc/skel/.config/kwalletrc <<'KWALLET'
[Wallet]
Enabled=false
KWALLET
"
	;;
esac
cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_desktop <<INSTALL_DESKTOP
#!/bin/bash
set -e
${install_desktop}
systemctl enable ${desktop_services} sddm.service
mkdir -p /etc/sddm.conf.d
echo -e '[Theme]\nCurrent=breeze' > /etc/sddm.conf.d/99_linuxloops.conf
/linuxloops/install_steamos_configs
INSTALL_DESKTOP
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_desktop

cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_steamos_configs <<INSTALL_STEAMOS_CONFIGS
#!/bin/bash
set -e
echo -e 'vm.max_map_count=1048576\nvm.compaction_proactiveness=0\nvm.swappiness=1' > /etc/sysctl.d/99-steam.conf
mkdir -p /etc/skel/.cache/thumbnails
mkdir -p /etc/skel/.local/share/applications
cat >/etc/skel/.local/share/applications/deck-session.desktop <<'DECKSESSIONICON'
[Desktop Entry]
Name=SteamDeck Session
Exec=deck-session
Icon=steamdeck-gaming-return
Terminal=false
Type=Application
Categories=Game;
PrefersNonDefaultGPU=true
X-KDE-RunOnDiscreteGpu=true
DECKSESSIONICON
cat >/usr/bin/deck-session <<'DECKSESSION'
#!/bin/bash

set -e

##
## Session globals
##
export SDL_VIDEO_MINIMIZE_ON_FOCUS_LOSS=0
export WINE_CPU_TOPOLOGY=8:0,1,2,3,4,5,6,7
export GAMESCOPE_LIMITER_FILE=\$(mktemp /tmp/gamescope-limiter.XXXXXXXX)
export vk_xwayland_wait_ready=false
export INTEL_DEBUG=noccs
export R600_DEBUG=nodcc

pkill -9 gamescope || true
pkill -9 steam || true

gamescope -b -e -f -h 720 -- steam -steamos3 -steampal -steamdeck -gamepadui
DECKSESSION
chmod 0755 /usr/bin/deck-session
cat >/usr/bin/steamos-session-select <<'SESSIONSELECT'
#!/bin/bash

pkill -9 steam
pkill -9 gamescope
SESSIONSELECT
chmod 0755 /usr/bin/steamos-session-select
cat >/usr/share/polkit-1/actions/org.valve.steamos.policy <<'POLKIT'
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE policyconfig PUBLIC
 "-//freedesktop//DTD PolicyKit Policy Configuration 1.0//EN"
 "http://www.freedesktop.org/standards/PolicyKit/1/policyconfig.dtd">
<policyconfig>

  <vendor>Valve SteamOS</vendor>
  <vendor_url>http://www.steampowered.com</vendor_url>

  <action id="org.valve.policykit.steamos.pkexec.run-steamos-polkit-helpers-steamos-reboot-now">
    <description>Reboot system</description>
    <icon_name>package-x-generic</icon_name> 
    <defaults>
      <allow_any>yes</allow_any>
      <allow_inactive>yes</allow_inactive>
      <allow_active>yes</allow_active>
    </defaults>
    <annotate key="org.freedesktop.policykit.exec.path">/usr/bin/steamos-polkit-helpers/steamos-reboot-now</annotate>
  </action>

  <action id="org.valve.policykit.steamos.pkexec.run-steamos-polkit-helpers-steamos-poweroff-now">
    <description>Poweroff system</description>
    <icon_name>package-x-generic</icon_name> 
    <defaults>
      <allow_any>yes</allow_any>
      <allow_inactive>yes</allow_inactive>
      <allow_active>yes</allow_active>
    </defaults>
    <annotate key="org.freedesktop.policykit.exec.path">/usr/bin/steamos-polkit-helpers/steamos-poweroff-now</annotate>
  </action>

</policyconfig>
POLKIT
mkdir -p /usr/bin/steamos-polkit-helpers
cat >/usr/bin/steamos-polkit-helpers/steamos-set-timezone <<'SETTIMEZONE'
#!/bin/bash

exit 0
SETTIMEZONE
chmod 0755 /usr/bin/steamos-polkit-helpers/steamos-set-timezone
cat >/usr/bin/steamos-polkit-helpers/steamos-reboot-now <<'REBOOT'
#!/bin/bash

set -e

if [[ \$EUID -ne 0 ]];
then
    exec pkexec --disable-internal-agent "\$(realpath \$0)" "\$@"
fi

reboot
REBOOT
chmod 0755 /usr/bin/steamos-polkit-helpers/steamos-reboot-now
cat >/usr/bin/steamos-polkit-helpers/steamos-poweroff-now <<'POWEROFF'
#!/bin/bash

set -e

if [[ \$EUID -ne 0 ]];
then
    exec pkexec --disable-internal-agent "\$(realpath \$0)" "\$@"
fi

poweroff
POWEROFF
chmod 0755 /usr/bin/steamos-polkit-helpers/steamos-poweroff-now
cat >/usr/bin/steamos-polkit-helpers/steamos-enable-sshd <<'ENABLESSHD'
#!/bin/bash

exit 0
ENABLESSHD
chmod 0755 /usr/bin/steamos-polkit-helpers/steamos-enable-sshd
cat >/usr/bin/steamos-polkit-helpers/steamos-update <<'FAKESTEAMOSUPDATE'
#!/bin/bash

exit 7
FAKESTEAMOSUPDATE
chmod 0755 /usr/bin/steamos-polkit-helpers/steamos-update
cat >/usr/bin/steamos-polkit-helpers/jupiter-biosupdate <<'FAKEBIOSUPDATE'
#!/bin/bash

exit 0
FAKEBIOSUPDATE
chmod 0755 /usr/bin/steamos-polkit-helpers/jupiter-biosupdate
cat >/usr/bin/steamos-polkit-helpers/jupiter-dock-updater <<'FAKEDOCKUPDATE'
#!/bin/bash

exit 7
FAKEDOCKUPDATE
chmod 0755 /usr/bin/steamos-polkit-helpers/jupiter-dock-updater
INSTALL_STEAMOS_CONFIGS
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_steamos_configs

cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_user <<INSTALL_USER
#!/bin/bash
set -e
useradd -s /bin/bash -m '${username}'
echo -e '${userpass}\n${userpass}' | passwd '${username}'
usermod -aG wheel '${username}'
echo "%wheel      ALL=(ALL) ALL" > /etc/sudoers.d/90-wheel
cat >/etc/polkit-1/rules.d/50-default.rules <<'POLKIT'
polkit.addAdminRule(function(action, subject) {
    return ["unix-group:wheel"];
});
POLKIT
INSTALL_USER
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_user

surface_remove="linux-neptune-61 linux-neptune-61-headers"
initramfs_type="initcpio"
if [ ! -z "${custom_packages}" ]; then
	echo -e "#!/bin/bash\nset -e\npacman -S --noconfirm ${custom_packages}" > "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_packages
	chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_packages
fi
if [ ! -z "${custom_script}" ]; then
	cp "${custom_script}" "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_script
	chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_script
fi
}

chroot_Tails()
{
prepare_bootstrap="
curl -l https://archlinux.org/mirrorlist/?ip_version=4 -o /etc/pacman.d/mirrorlist
sed -i 's@#Server = https://geo.mirror.pkgbuild.com@Server = https://geo.mirror.pkgbuild.com@g' /etc/pacman.d/mirrorlist
pacman -Syu --noconfirm --needed bash bash-completion btrfs-progs bzip2 ca-certificates coreutils cpio cryptsetup curl dosfstools e2fsprogs efibootmgr fatresize gzip lsof nano openssl parted sbsigntools sudo strace tar util-linux xz zstd
"

cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/prepare_chroot <<PREPARE_CHROOT
#!/bin/bash
set -e
/linuxloops/install_script
PREPARE_CHROOT
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/prepare_chroot

cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_script <<INSTALL_SCRIPT
#!/bin/bash
set -e
curl -L https://tails.darklab.sh/pub/tails/stable/"\$(curl -L https://tails.darklab.sh/pub/tails/stable/ | grep '<a href="tails-amd64-' | head -1 | cut -d'>' -f2 | cut -d '/' -f1)"/"\$(curl -L https://tails.darklab.sh/pub/tails/stable/ | grep '<a href="tails-amd64-' | head -1 | cut -d'>' -f2 | cut -d '/' -f1)".img -o /tails.img
dd if=/tails.img of="${destination_device}" bs=1M status=progress
echo -e "Fix\n" | parted ---pretend-input-tty "${destination_device}" print
parted "${destination_device}" resizepart 1 8GiB
set +e; fatresize -v -s 8G "${partition_path}"1; set -e
rm /tails.img
if [ "${install_type}" == "image" ]; then
	mkdir -p /isomount
	mount "${partition_path}"1 /isomount
	mkdir -p /tmp/initramfs/scripts/init-bottom /tmp/initramfs/usr/lib/udev/rules.d
	cp /linuxloops/install_initramfs /tmp/initramfs/linuxloops
	chmod 0755 /tmp/initramfs/linuxloops
	echo '/scripts/init-bottom/linuxloopsfix "\$@"' > /tmp/initramfs/scripts/init-bottom/ORDER
	chmod 0755 /tmp/initramfs/scripts/init-bottom/ORDER
	cat >/tmp/initramfs/scripts/init-bottom/linuxloopsfix <<'LINUXLOOPSFIX'
cat >/root/etc/udev/rules.d/99-zzzlinuxloops.rules <<'TAILSUDEV'
SUBSYSTEMS=="block", KERNEL=="loop0", ENV{ID_DRIVE_DETACHABLE}:="0", SYMLINK+="TailsBootDev", SYMLINK+="bilibop"
SUBSYSTEMS=="block", KERNEL=="loop0*", ENV{UDISKS_SYSTEM}:="1", GROUP:="floppy"
ENV{ID_FS_LABEL}=="TailsData", KERNEL=="loop0*", ENV{UDISKS_IGNORE}="1"
TAILSUDEV
sed -i 's#loop|##g' /root/lib/live/boot/*
sed -i 's#if (\${device} =~ m{mmcblk \[0-9]+ \\\\z}xms) {#if (\${device} =~ m{mmcblk [0-9]+ \\\\z}xms or \${device} =~ m{loop [0-9]+ \\\\z}xms) {#g' \$(find /root/usr/local/share/perl | grep 'UDisks.pm' | head -1)
sed -i -e 's#method get_udisks_property (Str \$type, Defined \$object, Str \$property) {#method get_udisks_property (Str \$type, Defined \$object, Str \$property) {\nif (\$type eq "Block" and \$property eq "Drive" and \$object =~ m/loop0/) { return "/dev/loop0"; }\nif (\$type eq "Drive" and \$property eq "ConnectionBus" and \$object =~ m/loop0/) { return "sdio"; }\nif (\$type eq "Drive" and \$property eq "Optical" and \$object =~ m/loop0/) { return 0; }\nif (\$type eq "Drive" and \$property eq "Vendor" and \$object =~ m/loop0/) { return ""; }\nif (\$type eq "Drive" and \$property eq "Model" and \$object =~ m/loop0/) { return "linuxloops"; }#g' \$(find /root/usr/local/share/perl | grep 'UDisks.pm' | head -1)
LINUXLOOPSFIX
	chmod 0755 /tmp/initramfs/scripts/init-bottom/linuxloopsfix
	(cd /tmp/initramfs && find . | cpio -o -H newc | gzip > /isomount/live/linuxloops.img)
	mkdir -p /mnt/etc/secureboot_key
	sbattach --signum 1 --detach /mnt/etc/secureboot_key/MOK.tmp /isomount/live/vmlinuz
	openssl pkcs7 -print_certs -inform der -in /mnt/etc/secureboot_key/MOK.tmp -out /mnt/etc/secureboot_key/MOK.pem
	openssl x509 -outform DER -in /mnt/etc/secureboot_key/MOK.pem -out /mnt/etc/secureboot_key/MOK.der
fi
umount /isomount
INSTALL_SCRIPT
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_script

initramfs_type="iso_init"
}

chroot_Ubuntu()
{
prepare_bootstrap="
yes | DEBIAN_FRONTEND=noninteractive apt update
yes | DEBIAN_FRONTEND=noninteractive apt install bash bash-completion btrfs-progs bzip2 ca-certificates coreutils cryptsetup curl dosfstools e2fsprogs efibootmgr fdisk gzip lsof nano openssl sudo strace tar util-linux xz-utils zstd
"

cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/prepare_chroot <<PREPARE_CHROOT
yes | DEBIAN_FRONTEND=noninteractive apt install debootstrap
debootstrap --arch=amd64 --include=ca-certificates,console-setup,dirmngr,gpg,gpg-agent,kbd,locales lunar /mnt http://archive.ubuntu.com/ubuntu
PREPARE_CHROOT
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/prepare_chroot

cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/chroot_init <<CHROOT_INIT
#!/bin/bash
set -e
cat >/etc/apt/sources.list <<'SOURCESLIST'
deb http://archive.ubuntu.com/ubuntu lunar main restricted universe multiverse
# deb-src http://archive.ubuntu.com/ubuntu lunar main restricted universe multiverse

deb http://archive.ubuntu.com/ubuntu lunar-updates main restricted universe multiverse
# deb-src http://archive.ubuntu.com/ubuntu lunar-updates main restricted universe multiverse

deb http://archive.ubuntu.com/ubuntu lunar-security main restricted universe multiverse
# deb-src http://archive.ubuntu.com/ubuntu lunar-security main restricted universe multiverse
SOURCESLIST
yes | DEBIAN_FRONTEND=noninteractive apt update
yes | DEBIAN_FRONTEND=noninteractive apt dist-upgrade
echo -e 'APT::Install-Recommends "0";\nAPT::Get::Install-Recommends "false";' > /etc/apt/apt.conf.d/99linuxloops
echo -e 'Dpkg::Options {\n  "--force-confdef";\n};' > /etc/apt/apt.conf.d/71debconf
yes | DEBIAN_FRONTEND=noninteractive apt install linux-generic linux-headers-generic dkms linux-firmware wireless-regdb bash sudo modemmanager network-manager wpasupplicant bluez cryptsetup-initramfs e2fsprogs ntfs-3g nano acpid curl thermald bash-completion gnupg-utils policykit-1 xdg-user-dirs zstd fwupd-signed patchutils net-tools usb-modeswitch upower efibootmgr grub-efi grub-efi-amd64-signed os-prober shim-signed amd64-microcode intel-microcode update-manager-core snapd sbsigntool mokutil dosfstools btrfs-progs
CHROOT_INIT
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/chroot_init

hardware_support="alsa-utils alsa-ucm-conf alsa-topology-conf at-spi2-core avahi-discover cups cups-browsed cups-filters firmware-sof-signed iio-sensor-proxy libnss-mdns pipewire pipewire-audio-client-libraries pipewire-pulse wireplumber system-config-printer xserver-xorg"
basic_packages="gvfs-fuse packagekit udisks2 xdg-user-dirs-gtk"
basic_themes="adwaita-icon-theme breeze-gtk-theme breeze-icon-theme fonts-dejavu fonts-noto fonts-roboto gnome-backgrounds materia-gtk-theme oxygen-icon-theme papirus-icon-theme"
specific_packages="desktop-base plymouth-themes ubuntu-wallpapers fonts-ubuntu"
desktop_base="${hardware_support} ${basic_packages} ${basic_themes} ${specific_packages}"
case "${desktop}" in
	'budgie')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter budgie-lightdm-theme ubuntu-budgie-desktop budgie-desktop-environment budgie-applications-menu-applet budgie-brightness-controller-applet budgie-hotcorners-applet budgie-indicator-applet budgie-network-manager-applet budgie-rotation-lock-applet budgie-trash-applet ubuntu-budgie-themes pocillo-icon-theme nemo tilix plank gjs
"
	;;
	'budgie-full')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install network-manager-gnome
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter budgie-lightdm-theme ubuntu-budgie-desktop
"
	;;
	'cinnamon')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter cinnamon cinnamon-core gnome-terminal nemo blueman
"
	;;
	'cinnamon-full')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install network-manager-gnome blueman
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter cinnamon-desktop-environment
"
	;;
	'enlightenment')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter enlightenment terminology
yes | DEBIAN_FRONTEND=noninteractive apt purge network-manager
yes | DEBIAN_FRONTEND=noninteractive apt install connman
find /usr/lib -type f -name enlightenment_system -exec chmod 4755 {} \;
"
	;;
	'gnome')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} gdm3 gnome-session gnome-control-center gnome-terminal nautilus gnome-keyring libpam-gnome-keyring
"
	;;
	'gnome-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} gdm3 gnome gnome-control-center gnome-terminal nautilus gnome-keyring libpam-gnome-keyring
"
	;;
	'kde')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} sddm kubuntu-desktop dolphin plasma-discover konsole plasma-nm plasma-pa bluedevil libpam-kwallet5
"
	;;
	'kde-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} sddm kubuntu-desktop
"
	;;
	'lxde')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter lxde lxterminal pcmanfm lxde-icon-theme network-manager-gnome blueman
"
	;;
	'lxde-full')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install network-manager-gnome blueman
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter lxde
"
	;;
	'lxqt')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter lubuntu-desktop qterminal pcmanfm-qt network-manager-gnome blueman humanity-icon-theme
"
	;;
	'lxqt-full')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install network-manager-gnome blueman
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter lubuntu-desktop humanity-icon-theme
"
	;;
	'mate')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter ubuntu-mate-desktop ubuntu-mate-themes ubuntu-mate-wallpapers mate-control-center mate-applets mate-indicator-applet mate-applet-brisk-menu mate-themes mate-icon-theme mate-terminal caja ayatana-indicator-application ayatana-indicator-datetime ayatana-indicator-notifications ayatana-indicator-power ayatana-indicator-session ayatana-indicator-sound network-manager-gnome blueman
"
	;;
	'mate-full')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install network-manager-gnome blueman
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter ubuntu-mate-desktop
"
	;;
	'studio-full')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install network-manager-gnome
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} sddm ubuntustudio-desktop ardour obs-studio krita gimp kdenlive digikam darktable
"
	;;
	'ubuntu')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} gdm3 ubuntu-desktop-minimal gnome-terminal nautilus gnome-keyring libpam-gnome-keyring yaru-theme-gtk yaru-theme-icon yaru-theme-sound
"
	;;
	'ubuntu-full')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install network-manager-gnome
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} gdm3 ubuntu-desktop gnome-terminal nautilus gnome-keyring libpam-gnome-keyring
"
	;;
	'unity')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter ubuntu-unity-desktop network-manager-gnome indicator-applet indicator-application indicator-session nautilus gnome-terminal
"
	;;
	'unity-full')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install network-manager-gnome
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter ubuntu-unity-desktop indicator-applet indicator-application indicator-session nautilus gnome-terminal
"
	;;
	'xfce')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter xubuntu-desktop xfce4-goodies xubuntu-icon-theme xfce4-power-manager-plugins xfce4-pulseaudio-plugin xfce4-terminal thunar xfce4-notifyd network-manager-gnome blueman greybird-gtk-theme elementary-xfce-icon-theme
"
	;;
	'xfce-full')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install network-manager-gnome blueman
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter xubuntu-desktop
"
	;;
esac
cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_desktop <<INSTALL_DESKTOP
#!/bin/bash
set -e
if [ "${desktop}" == "none" ]; then exit 0; fi
${install_desktop}
echo -e 'APT::Install-Recommends \"0\";\nAPT::Get::Install-Recommends \"false\";' > /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install update-manager software-properties-gtk
apt list --installed | grep -w 'firefox' && yes | DEBIAN_FRONTEND=noninteractive apt purge 'firefox'
apt list --installed | grep -w 'gnome-initial-setup' && yes | DEBIAN_FRONTEND=noninteractive apt purge 'gnome-initial-setup'
mkdir -p /usr/share/glib-2.0/schemas
cat >/usr/share/glib-2.0/schemas/zz_linuxloops.gschema.override <<'DCONF'
[org.gnome.desktop.background:Budgie]
picture-uri="file:///usr/share/backgrounds/warty-final-ubuntu.png"
[org.gnome.desktop.interface:Budgie]
gtk-theme="Arc"
icon-theme="Papirus"
[org.cinnamon.desktop.background]
picture-uri="file:///usr/share/backgrounds/warty-final-ubuntu.png"
[org.cinnamon.desktop.interface]
gtk-theme="Materia"
icon-theme="Papirus"
[org.cinnamon.desktop.wm.preferences]
theme="Materia"
DCONF
if [ ! -z "\$(command -v glib-compile-schemas)" ]; then glib-compile-schemas /usr/share/glib-2.0/schemas/; fi
mkdir -p /etc/xdg/autostart
cat >/etc/xdg/autostart/budgie-nemo.desktop <<'NEMODESKTOP'
[Desktop Entry]
Type=Application
Name=Nemo
Comment=Start Nemo desktop at log in
Exec=nemo-desktop
OnlyShowIn=Budgie;
AutostartCondition=GSettings org.nemo.desktop show-desktop-icons
X-GNOME-AutoRestart=true
NoDisplay=true
NEMODESKTOP
mkdir -p /etc/lightdm
echo -e '[Greeter]\nbackground = /usr/share/backgrounds/warty-final-ubuntu.png\ndraw-user-backgrounds = true' > /etc/lightdm/slick-greeter.conf
INSTALL_DESKTOP
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_desktop

cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_user <<INSTALL_USER
#!/bin/bash
set -e
useradd -s /bin/bash -m '${username}'
echo -e '${userpass}\n${userpass}' | passwd '${username}'
usermod -aG sudo '${username}'
INSTALL_USER
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_user

surface_remove="linux-generic-* linux-headers-* linux-image-* linux-modules-*"
initramfs_type="initramfstools"
if [ ! -z "${custom_packages}" ]; then
	echo -e "#!/bin/bash\nset -e\nyes | DEBIAN_FRONTEND=noninteractive apt install ${custom_packages}" > "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_packages
	chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_packages
fi
if [ ! -z "${custom_script}" ]; then
	cp "${custom_script}" "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_script
	chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_script
fi
}

chroot_Ubuntu-LTS()
{
prepare_bootstrap="
yes | DEBIAN_FRONTEND=noninteractive apt update
yes | DEBIAN_FRONTEND=noninteractive apt install bash bash-completion btrfs-progs bzip2 ca-certificates coreutils cryptsetup curl dosfstools e2fsprogs efibootmgr fdisk gzip lsof nano openssl sudo strace tar util-linux xz-utils zstd
"

cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/prepare_chroot <<PREPARE_CHROOT
yes | DEBIAN_FRONTEND=noninteractive apt install debootstrap
debootstrap --arch=amd64 --include=ca-certificates,console-setup,dirmngr,gpg,gpg-agent,kbd,locales jammy /mnt http://archive.ubuntu.com/ubuntu
PREPARE_CHROOT
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/prepare_chroot

cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/chroot_init <<CHROOT_INIT
#!/bin/bash
set -e
cat >/etc/apt/sources.list <<'SOURCESLIST'
deb http://archive.ubuntu.com/ubuntu jammy main restricted universe multiverse
# deb-src http://archive.ubuntu.com/ubuntu jammy main restricted universe multiverse

deb http://archive.ubuntu.com/ubuntu jammy-updates main restricted universe multiverse
# deb-src http://archive.ubuntu.com/ubuntu jammy-updates main restricted universe multiverse

deb http://archive.ubuntu.com/ubuntu jammy-security main restricted universe multiverse
# deb-src http://archive.ubuntu.com/ubuntu jammy-security main restricted universe multiverse
SOURCESLIST
yes | DEBIAN_FRONTEND=noninteractive apt update
yes | DEBIAN_FRONTEND=noninteractive apt dist-upgrade
echo -e 'APT::Install-Recommends "0";\nAPT::Get::Install-Recommends "false";' > /etc/apt/apt.conf.d/99linuxloops
echo -e 'Dpkg::Options {\n  "--force-confdef";\n};' > /etc/apt/apt.conf.d/71debconf
yes | DEBIAN_FRONTEND=noninteractive apt install linux-generic linux-headers-generic dkms linux-firmware wireless-regdb bash sudo modemmanager network-manager wpasupplicant bluez cryptsetup-initramfs e2fsprogs ntfs-3g nano acpid curl thermald bash-completion gnupg-utils policykit-1 xdg-user-dirs zstd fwupd-signed patchutils net-tools usb-modeswitch upower efibootmgr grub-efi grub-efi-amd64-signed os-prober shim-signed amd64-microcode intel-microcode update-manager-core snapd sbsigntool mokutil dosfstools btrfs-progs
CHROOT_INIT
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/chroot_init

hardware_support="alsa-utils alsa-ucm-conf alsa-topology-conf at-spi2-core avahi-discover cups cups-browsed cups-filters firmware-sof-signed iio-sensor-proxy libnss-mdns pipewire pipewire-audio-client-libraries pipewire-pulse wireplumber system-config-printer xserver-xorg"
basic_packages="gvfs-fuse packagekit udisks2 xdg-user-dirs-gtk"
basic_themes="adwaita-icon-theme breeze-gtk-theme breeze-icon-theme fonts-dejavu fonts-noto fonts-roboto gnome-backgrounds materia-gtk-theme oxygen-icon-theme papirus-icon-theme"
specific_packages="desktop-base plymouth-themes ubuntu-wallpapers fonts-ubuntu"
desktop_base="${hardware_support} ${basic_packages} ${basic_themes} ${specific_packages}"
case "${desktop}" in
	'none')
	install_desktop=""
	;;
	'budgie')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter budgie-lightdm-theme ubuntu-budgie-desktop budgie-desktop-environment budgie-applications-menu-applet budgie-brightness-controller-applet budgie-hotcorners-applet budgie-indicator-applet budgie-network-manager-applet budgie-rotation-lock-applet budgie-trash-applet ubuntu-budgie-themes pocillo-icon-theme nemo tilix plank gjs
"
	;;
	'budgie-full')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install network-manager-gnome
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter budgie-lightdm-theme ubuntu-budgie-desktop
"
	;;
	'cinnamon')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter cinnamon cinnamon-core gnome-terminal nemo blueman
"
	;;
	'cinnamon-full')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install network-manager-gnome blueman
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter cinnamon-desktop-environment
"
	;;
	'enlightenment')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter enlightenment terminology
yes | DEBIAN_FRONTEND=noninteractive apt purge network-manager
yes | DEBIAN_FRONTEND=noninteractive apt install connman
find /usr/lib -type f -name enlightenment_system -exec chmod 4755 {} \;
"
	;;
	'gnome')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} gdm3 gnome-session gnome-control-center gnome-terminal nautilus gnome-keyring libpam-gnome-keyring
"
	;;
	'gnome-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} gdm3 gnome gnome-control-center gnome-terminal nautilus gnome-keyring libpam-gnome-keyring
"
	;;
	'kde')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} sddm kubuntu-desktop dolphin plasma-discover konsole plasma-nm plasma-pa bluedevil libpam-kwallet5
"
	;;
	'kde-full')
	install_desktop="
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} sddm kubuntu-desktop
"
	;;
	'lxde')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter lxde lxterminal pcmanfm lxde-icon-theme network-manager-gnome blueman
"
	;;
	'lxde-full')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install network-manager-gnome blueman
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter lxde
"
	;;
	'lxqt')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter lubuntu-desktop qterminal pcmanfm-qt network-manager-gnome blueman humanity-icon-theme
"
	;;
	'lxqt-full')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install network-manager-gnome blueman
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter lubuntu-desktop humanity-icon-theme
"
	;;
	'mate')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter ubuntu-mate-desktop ubuntu-mate-themes ubuntu-mate-wallpapers mate-control-center mate-applets mate-indicator-applet mate-applet-brisk-menu mate-themes mate-icon-theme mate-terminal caja ayatana-indicator-application ayatana-indicator-datetime ayatana-indicator-notifications ayatana-indicator-power ayatana-indicator-session ayatana-indicator-sound network-manager-gnome blueman
"
	;;
	'mate-full')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install network-manager-gnome blueman
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter ubuntu-mate-desktop
"
	;;
	'studio-full')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install network-manager-gnome
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} sddm ubuntustudio-desktop ardour obs-studio krita gimp kdenlive digikam darktable
"
	;;
	'ubuntu')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} gdm3 ubuntu-desktop-minimal gnome-terminal nautilus gnome-keyring libpam-gnome-keyring yaru-theme-gtk yaru-theme-icon yaru-theme-sound
"
	;;
	'ubuntu-full')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install network-manager-gnome
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} gdm3 ubuntu-desktop gnome-terminal nautilus gnome-keyring libpam-gnome-keyring
"
	;;
	'xfce')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter xubuntu-desktop xfce4-goodies xubuntu-icon-theme xfce4-power-manager-plugins xfce4-pulseaudio-plugin xfce4-terminal thunar xfce4-notifyd network-manager-gnome blueman greybird-gtk-theme elementary-xfce-icon-theme
"
	;;
	'xfce-full')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install network-manager-gnome blueman
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install ${desktop_base} lightdm slick-greeter xubuntu-desktop
"
	;;
esac
cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_desktop <<INSTALL_DESKTOP
#!/bin/bash
set -e
if [ "${desktop}" == "none" ]; then exit 0; fi
${install_desktop}
echo -e 'APT::Install-Recommends \"0\";\nAPT::Get::Install-Recommends \"false\";' > /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install update-manager software-properties-gtk
apt list --installed | grep -w 'firefox' && yes | DEBIAN_FRONTEND=noninteractive apt purge 'firefox'
apt list --installed | grep -w 'gnome-initial-setup' && yes | DEBIAN_FRONTEND=noninteractive apt purge 'gnome-initial-setup'
mkdir -p /usr/share/glib-2.0/schemas
cat >/usr/share/glib-2.0/schemas/zz_linuxloops.gschema.override <<'DCONF'
[org.gnome.desktop.background:Budgie]
picture-uri="file:///usr/share/backgrounds/warty-final-ubuntu.png"
[org.gnome.desktop.interface:Budgie]
gtk-theme="Arc"
icon-theme="Papirus"
[org.cinnamon.desktop.background]
picture-uri="file:///usr/share/backgrounds/warty-final-ubuntu.png"
[org.cinnamon.desktop.interface]
gtk-theme="Materia"
icon-theme="Papirus"
[org.cinnamon.desktop.wm.preferences]
theme="Materia"
DCONF
if [ ! -z "\$(command -v glib-compile-schemas)" ]; then glib-compile-schemas /usr/share/glib-2.0/schemas/; fi
mkdir -p /etc/xdg/autostart
cat >/etc/xdg/autostart/budgie-nemo.desktop <<'NEMODESKTOP'
[Desktop Entry]
Type=Application
Name=Nemo
Comment=Start Nemo desktop at log in
Exec=nemo-desktop
OnlyShowIn=Budgie;
AutostartCondition=GSettings org.nemo.desktop show-desktop-icons
X-GNOME-AutoRestart=true
NoDisplay=true
NEMODESKTOP
mkdir -p /etc/lightdm
echo -e '[Greeter]\nbackground = /usr/share/backgrounds/warty-final-ubuntu.png\ndraw-user-backgrounds = true' > /etc/lightdm/slick-greeter.conf
INSTALL_DESKTOP
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_desktop

cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_user <<INSTALL_USER
#!/bin/bash
set -e
useradd -s /bin/bash -m '${username}'
echo -e '${userpass}\n${userpass}' | passwd '${username}'
usermod -aG sudo '${username}'
INSTALL_USER
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_user

surface_remove="linux-generic-* linux-headers-* linux-image-* linux-modules-*"
initramfs_type="initramfstools"
if [ ! -z "${custom_packages}" ]; then
	echo -e "#!/bin/bash\nset -e\nyes | DEBIAN_FRONTEND=noninteractive apt install ${custom_packages}" > "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_packages
	chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_packages
fi
if [ ! -z "${custom_script}" ]; then
	cp "${custom_script}" "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_script
	chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_script
fi
}

chroot_VoidLinux()
{
prepare_bootstrap="
xbps-install -Syu
xbps-install -y bash bash-completion btrfs-progs bzip2 ca-certificates coreutils cryptsetup curl dosfstools e2fsprogs efibootmgr gzip lsof nano openssl sudo strace tar util-linux xz zstd
"

cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/prepare_chroot <<PREPARE_CHROOT
yes | xbps-install -Sy -r /mnt -R https://repo-default.voidlinux.org/current base-system
PREPARE_CHROOT
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/prepare_chroot

cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/chroot_init <<CHROOT_INIT
#!/bin/bash
set -e
xbps-install -Syu
xbps-install -y linux linux-headers dkms linux-firmware crda bash sudo ModemManager NetworkManager wpa_supplicant bluez cryptsetup e2fsprogs ntfs-3g nano acpid curl thermald bash-completion gnupg polkit xdg-user-dirs zstd fwupd patch net-tools usb-modeswitch upower efibootmgr grub-x86_64-efi os-prober sbsigntool mokutil dosfstools btrfs-progs
ln -s /etc/sv/bluetoothd /etc/sv/dbus /etc/sv/dhcpcd /etc/sv/named /etc/sv/NetworkManager /etc/sv/polkitd /etc/sv/uuidd /etc/runit/runsvdir/default/
cat >>/etc/rc.conf <<SETTINGS
KEYMAP="${keymap}"
TIMEZONE="${timezone}"
SETTINGS
CHROOT_INIT
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/chroot_init

hardware_support="alsa-utils alsa-ucm-conf at-spi2-core avahi-discover cups cups-filters sof-firmware nss-mdns pulseaudio system-config-printer xorg"
basic_packages="gvfs PackageKit udisks2 xdg-user-dirs-gtk"
basic_themes="adwaita-icon-theme breeze-gtk breeze-icons dejavu-fonts-ttf noto-fonts-ttf fonts-roboto-ttf gnome-backgrounds oxygen-icons5 papirus-icon-theme"
specific_packages="font-adobe-source-code-pro plymouth"
desktop_base="${hardware_support} ${basic_packages} ${basic_themes} ${specific_packages}"
desktop_services="/etc/sv/avahi-daemon /etc/sv/cupsd /etc/sv/cups-browsed"
case "${desktop}" in
	'gnome')
	install_desktop="
xbps-install -y ${desktop_base} gdm gnome-core gnome-terminal
ln -s /etc/sv/gdm  /etc/runit/runsvdir/default/
"
	;;
	'gnome-full')
	install_desktop="
xbps-install -y ${desktop_base} gdm gnome
ln -s /etc/sv/gdm /etc/runit/runsvdir/default/
"
	;;
	'kde')
	install_desktop="
xbps-install -y ${desktop_base} sddm kde5 dolphin konsole
ln -s /etc/sv/sddm /etc/runit/runsvdir/default/
"
	;;
	'kde-full')
	install_desktop="
xbps-install -y ${desktop_base} sddm kde5 kde5-baseapps
ln -s /etc/sv/sddm /etc/runit/runsvdir/default/
"
	;;
	'lxde')
	install_desktop="
xbps-install -y ${desktop_base} lightdm lightdm-gtk3-greeter lxde network-manager-applet blueman
ln -s /etc/sv/lightdm /etc/runit/runsvdir/default/
"
	;;
	'lxqt')
	install_desktop="
xbps-install -y ${desktop_base} lightdm lightdm-gtk3-greeter lxqt network-manager-applet blueman
ln -s /etc/sv/lightdm /etc/runit/runsvdir/default/
"
	;;
	'mate')
	install_desktop="
xbps-install -y ${desktop_base} lightdm lightdm-gtk3-greeter mate network-manager-applet blueman mate-terminal mate-power-manager mate-applets
ln -s /etc/sv/lightdm /etc/runit/runsvdir/default/
"
	;;
	'mate-full')
	install_desktop="
xbps-install -y ${desktop_base} lightdm lightdm-gtk3-greeter mate mate-extra network-manager-applet blueman mate-terminal mate-power-manager mate-applets
ln -s /etc/sv/lightdm /etc/runit/runsvdir/default/
"
	;;
	'xfce')
	install_desktop="
xbps-install -y ${desktop_base} lightdm lightdm-gtk3-greeter xfce4 xfce4-notifyd xfce4-pulseaudio-plugin network-manager-applet blueman
ln -s /etc/sv/lightdm /etc/runit/runsvdir/default/
"
	;;
esac
cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_desktop <<INSTALL_DESKTOP
#!/bin/bash
set -e
if [ "${desktop}" == "none" ]; then exit 0; fi
${install_desktop}
ln -s ${desktop_services} /etc/runit/runsvdir/default/
INSTALL_DESKTOP
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_desktop

cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_user <<INSTALL_USER
#!/bin/bash
set -e
useradd -s /bin/bash -m '${username}'
echo -e '${userpass}\n${userpass}' | passwd '${username}'
usermod -aG wheel '${username}'
echo "%wheel      ALL=(ALL) ALL" > /etc/sudoers.d/90-wheel
INSTALL_USER
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_user

initramfs_type="dracut"
if [ ! -z "${custom_packages}" ]; then
	echo -e "#!/bin/bash\nset -e\nxbps-install ${custom_packages}" > "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_packages
	chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_packages
fi
if [ ! -z "${custom_script}" ]; then
	cp "${custom_script}" "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_script
	chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_script
fi
}

chroot_Zorin()
{
prepare_bootstrap="
yes | DEBIAN_FRONTEND=noninteractive apt update
yes | DEBIAN_FRONTEND=noninteractive apt install bash bash-completion btrfs-progs bzip2 ca-certificates coreutils cryptsetup curl dosfstools e2fsprogs efibootmgr fdisk gzip lsof nano openssl sudo strace tar util-linux xz-utils zstd
"

cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/prepare_chroot <<PREPARE_CHROOT
yes | DEBIAN_FRONTEND=noninteractive apt install debootstrap
debootstrap --arch=amd64 --include=ca-certificates,console-setup,dirmngr,gpg,gpg-agent,kbd,locales focal /mnt http://archive.ubuntu.com/ubuntu
PREPARE_CHROOT
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/prepare_chroot

cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/chroot_init <<CHROOT_INIT
#!/bin/bash
set -e
cat >/etc/apt/sources.list <<'SOURCESLIST'
deb http://archive.ubuntu.com/ubuntu focal main restricted universe multiverse
# deb-src http://archive.ubuntu.com/ubuntu focal main restricted universe multiverse

deb http://archive.ubuntu.com/ubuntu focal-updates main restricted universe multiverse
# deb-src http://archive.ubuntu.com/ubuntu focal-updates main restricted universe multiverse

deb http://archive.ubuntu.com/ubuntu focal-security main restricted universe multiverse
# deb-src http://archive.ubuntu.com/ubuntu focal-security main restricted universe multiverse
SOURCESLIST
yes | DEBIAN_FRONTEND=noninteractive apt update
yes | DEBIAN_FRONTEND=noninteractive apt dist-upgrade
cat >/etc/apt/sources.list.d/zorin.list <<'ZORINLIST'
deb https://packages.zorinos.com/stable focal main
# deb-src https://packages.zorinos.com/stable focal main

deb https://packages.zorinos.com/patches focal main
# deb-src https://packages.zorinos.com/patches focal main

deb https://packages.zorinos.com/apps focal main
# deb-src https://packages.zorinos.com/apps focal main

deb https://packages.zorinos.com/drivers focal main restricted
# deb-src https://packages.zorinos.com/drivers focal main restricted
ZORINLIST
echo -e 'deb http://ppa.launchpad.net/zorinos/apps/ubuntu focal main\n# deb-src http://ppa.launchpad.net/zorinos/apps/ubuntu focal main' > /etc/apt/sources.list.d/zorinos-ubuntu-apps-focal.list
echo -e 'deb http://ppa.launchpad.net/zorinos/drivers/ubuntu focal main\n# deb-src http://ppa.launchpad.net/zorinos/drivers/ubuntu focal main' > /etc/apt/sources.list.d/zorinos-ubuntu-drivers-focal.list
echo -e 'deb http://ppa.launchpad.net/zorinos/patches/ubuntu focal main\n# deb-src http://ppa.launchpad.net/zorinos/patches/ubuntu focal main' > /etc/apt/sources.list.d/zorinos-ubuntu-patches-focal.list
echo -e 'deb http://ppa.launchpad.net/zorinos/stable/ubuntu focal main\n# deb-src http://ppa.launchpad.net/zorinos/stable/ubuntu focal main' > /etc/apt/sources.list.d/zorinos-ubuntu-stable-focal.list
cat >/etc/apt/preferences.d/zorin-os-patches.pref <<'ZORINPRIORITY'
Explanation: OS patches for Zorin OS.
Explanation: We need this pin because our patched build can lag a few hours behind Ubuntu's updates,
Explanation: and during those few hours packages can be overwritten with unpatched ones.
Package: *
Pin: release o=LP-PPA-zorinos-patches
Pin-Priority: 999
ZORINPRIORITY
cat >/etc/apt/preferences.d/zorinos-patches.pref <<'ZORINPRIORITY2'
Explanation: OS patches for Zorin OS.
Explanation: We need this pin because our patched build can lag a few hours behind Ubuntu's updates,
Explanation: and during those few hours packages can be overwritten with unpatched ones.
Package: *
Pin: release o=Zorin OS,l=Zorin OS Patches
Pin-Priority: 999
ZORINPRIORITY2
apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 30FCF8F64F71B61C
apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 40E0F448B35AB199
echo -e 'Dpkg::Options {\n  "--force-confnew";\n};' > /etc/apt/apt.conf.d/71debconf
yes | DEBIAN_FRONTEND=noninteractive apt update --allow-insecure-repositories
yes | DEBIAN_FRONTEND=noninteractive apt install zorin-os-overlay --allow-unauthenticated
yes | DEBIAN_FRONTEND=noninteractive apt update
yes | DEBIAN_FRONTEND=noninteractive apt install -o APT::Immediate-Configure=false --reinstall \$(apt list --installed | cut -d'/' -f1 | sed '1d' | sed -z 's@\n@ @g')
yes | DEBIAN_FRONTEND=noninteractive dpkg --configure -a
echo -e 'Dpkg::Options {\n  "--force-confdef";\n};' > /etc/apt/apt.conf.d/71debconf
yes | DEBIAN_FRONTEND=noninteractive apt install linux-generic-hwe-20.04 linux-headers-generic-hwe-20.04 dkms linux-firmware wireless-regdb bash sudo modemmanager network-manager wpasupplicant bluez cryptsetup-initramfs e2fsprogs ntfs-3g nano acpid curl thermald bash-completion gnupg-utils policykit-1 xdg-user-dirs zstd fwupd-signed patchutils net-tools usb-modeswitch upower efibootmgr grub-efi grub-efi-amd64-signed os-prober shim-signed update-manager-core snapd sbsigntool mokutil dosfstools btrfs-progs
CHROOT_INIT
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/chroot_init

case "${desktop}" in
	'core')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install network-manager-gnome
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install zorin-os-desktop
"
	;;
	'lite')
	install_desktop="
yes | DEBIAN_FRONTEND=noninteractive apt install network-manager-gnome
rm -f /etc/apt/apt.conf.d/99linuxloops
yes | DEBIAN_FRONTEND=noninteractive apt install zorin-os-lite-desktop
yes | DEBIAN_FRONTEND=noninteractive apt purge xfce4-indicator-plugin
"
	;;
esac
cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_desktop <<INSTALL_DESKTOP
#!/bin/bash
set -e
if [ "${desktop}" == "none" ]; then exit 0; fi
${install_desktop}
INSTALL_DESKTOP
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_desktop

cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_user <<INSTALL_USER
#!/bin/bash
set -e
useradd -s /bin/bash -m '${username}'
echo -e '${userpass}\n${userpass}' | passwd '${username}'
usermod -aG sudo '${username}'
INSTALL_USER
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_user

surface_remove="linux-generic-* linux-headers-* linux-image-* linux-modules-*"
initramfs_type="initramfstools"
if [ ! -z "${custom_packages}" ]; then
	echo -e "#!/bin/bash\nset -e\nyes | DEBIAN_FRONTEND=noninteractive apt install ${custom_packages}" > "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_packages
	chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_packages
fi
if [ ! -z "${custom_script}" ]; then
	cp "${custom_script}" "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_script
	chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_custom_script
fi
}

generate_bootstrap_init()
{
cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/bootstrap_init <<INITCHROOT
#!/bin/bash
set -e
export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
export LD_LIBRARY_PATH=/usr/local/lib64:/usr/local/lib:/usr/lib64:/usr/lib:/lib64:/lib
${prepare_bootstrap}
if [ -x /linuxloops/partition_script ]; then /linuxloops/partition_script; fi
if [ -x /linuxloops/setup_and_mount_rootfs ]; then /linuxloops/setup_and_mount_rootfs; fi
if [ -x /linuxloops/mount_efi ]; then /linuxloops/mount_efi; fi
if [ -x /linuxloops/prepare_chroot ]; then /linuxloops/prepare_chroot; fi
if [ -x /linuxloops/enter_chroot ]; then /linuxloops/enter_chroot; fi
if [ ! -z "${swap_size}" ] && [ "${swap_size}" -ne 0 ]; then /linuxloops/create_swap; fi
if [ -x /linuxloops/efi_entry ]; then /linuxloops/efi_entry; fi
INITCHROOT
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/bootstrap_init
}

generate_partition_script()
{
if [ "${distro}" == "Tails" ]; then return; fi
cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/partition_script <<PARTITIONDEVICE
#!/bin/bash
set -e
if [ "${distro}" == "Brunch" ]; then
	(echo "g"; echo "n"; echo "2"; echo ""; echo "+32M"; echo "n"; echo "3"; echo ""; echo "+4G"; echo "n"; echo "4"; echo ""; echo "+32M"; echo "n"; echo "5"; echo ""; echo "+4G"; echo "n"; echo "6"; echo ""; echo "+1K"; echo "n"; echo "7"; echo ""; echo "+1G"; echo "n"; echo "8"; echo ""; echo "+16M"; echo "n"; echo "9"; echo ""; echo "+1K"; echo "n"; echo "10"; echo ""; echo "+1K"; echo "n"; echo "11"; echo ""; echo "+8M"; echo "n"; echo "12"; echo ""; echo "+32M"; echo "n"; echo "1"; echo ""; echo "+$((install_sizeMB-9338-3))M"; echo "t"; echo "1"; echo "0FC63DAF-8483-4772-8E79-3D69D8477DE4"; echo "t"; echo "2"; echo "FE3A2A5D-4F32-41A7-B725-ACCC3285A309"; echo "t"; echo "3"; echo "3CB8E202-3B7E-47DD-8A3C-7FF2A13CFCEC"; echo "t"; echo "4"; echo "FE3A2A5D-4F32-41A7-B725-ACCC3285A309"; echo "t"; echo "5"; echo "3CB8E202-3B7E-47DD-8A3C-7FF2A13CFCEC"; echo "t"; echo "6"; echo "FE3A2A5D-4F32-41A7-B725-ACCC3285A309"; echo "t"; echo "7"; echo "3CB8E202-3B7E-47DD-8A3C-7FF2A13CFCEC"; echo "t"; echo "8"; echo "0FC63DAF-8483-4772-8E79-3D69D8477DE4"; echo "t"; echo "9"; echo "2E0A753D-9E48-43B0-8337-B15192CB1B5E"; echo "t"; echo "10"; echo "2E0A753D-9E48-43B0-8337-B15192CB1B5E"; echo "t"; echo "11"; echo "CAB6E88E-ABF3-4102-A07A-D4BB9BE3C1D3"; echo "t"; echo "12"; echo "C12A7328-F81F-11D2-BA4B-00A0C93EC93B"; echo "x"; echo "n"; echo "1"; echo "STATE"; echo "n"; echo "2"; echo "KERN-A"; echo "n"; echo "3"; echo "ROOT-A"; echo "n"; echo "4"; echo "KERN-B"; echo "n"; echo "5"; echo "ROOT-B"; echo "n"; echo "6"; echo "KERN-C"; echo "n"; echo "7"; echo "ROOT-C"; echo "n"; echo "8"; echo "OEM"; echo "n"; echo "9"; echo "reserved"; echo "n"; echo "10"; echo "reserved"; echo "n"; echo "11"; echo "RWFW"; echo "n"; echo "12"; echo "EFI-SYSTEM"; echo "r"; sleep 5; echo "w") | fdisk -w always -W always "${destination_device}"
elif [ "${distro}" == "ChromeOS-Flex" ]; then
	(echo "g"; echo "n"; echo "2"; echo ""; echo "+32M"; echo "n"; echo "3"; echo ""; echo "+4G"; echo "n"; echo "4"; echo ""; echo "+32M"; echo "n"; echo "5"; echo ""; echo "+4G"; echo "n"; echo "6"; echo ""; echo "+1K"; echo "n"; echo "7"; echo ""; echo "+1G"; echo "n"; echo "8"; echo ""; echo "+16M"; echo "n"; echo "9"; echo ""; echo "+1K"; echo "n"; echo "10"; echo ""; echo "+1K"; echo "n"; echo "11"; echo ""; echo "+8M"; echo "n"; echo "12"; echo ""; echo "+64M"; echo "n"; echo "1"; echo ""; echo "+$((install_sizeMB-9370-3))M"; echo "t"; echo "1"; echo "0FC63DAF-8483-4772-8E79-3D69D8477DE4"; echo "t"; echo "2"; echo "FE3A2A5D-4F32-41A7-B725-ACCC3285A309"; echo "t"; echo "3"; echo "3CB8E202-3B7E-47DD-8A3C-7FF2A13CFCEC"; echo "t"; echo "4"; echo "FE3A2A5D-4F32-41A7-B725-ACCC3285A309"; echo "t"; echo "5"; echo "3CB8E202-3B7E-47DD-8A3C-7FF2A13CFCEC"; echo "t"; echo "6"; echo "FE3A2A5D-4F32-41A7-B725-ACCC3285A309"; echo "t"; echo "7"; echo "3CB8E202-3B7E-47DD-8A3C-7FF2A13CFCEC"; echo "t"; echo "8"; echo "0FC63DAF-8483-4772-8E79-3D69D8477DE4"; echo "t"; echo "9"; echo "2E0A753D-9E48-43B0-8337-B15192CB1B5E"; echo "t"; echo "10"; echo "2E0A753D-9E48-43B0-8337-B15192CB1B5E"; echo "t"; echo "11"; echo "CAB6E88E-ABF3-4102-A07A-D4BB9BE3C1D3"; echo "t"; echo "12"; echo "C12A7328-F81F-11D2-BA4B-00A0C93EC93B"; echo "x"; echo "n"; echo "1"; echo "STATE"; echo "n"; echo "2"; echo "KERN-A"; echo "n"; echo "3"; echo "ROOT-A"; echo "n"; echo "4"; echo "KERN-B"; echo "n"; echo "5"; echo "ROOT-B"; echo "n"; echo "6"; echo "KERN-C"; echo "n"; echo "7"; echo "ROOT-C"; echo "n"; echo "8"; echo "OEM"; echo "n"; echo "9"; echo "reserved"; echo "n"; echo "10"; echo "reserved"; echo "n"; echo "11"; echo "RWFW"; echo "n"; echo "12"; echo "EFI-SYSTEM"; echo "r"; sleep 5; echo "w") | fdisk -w always -W always "${destination_device}"
else
	(echo "g"; echo "n"; echo "1"; echo ""; echo "+512M"; echo "n"; echo "2"; echo ""; echo "+1536M"; echo "n"; echo "3"; echo ""; echo "+$((install_sizeMB-2048-3))M"; echo "t"; echo "1"; echo "C12A7328-F81F-11D2-BA4B-00A0C93EC93B"; echo "t"; echo "2"; echo "0FC63DAF-8483-4772-8E79-3D69D8477DE4"; echo "t"; echo "3"; echo "0FC63DAF-8483-4772-8E79-3D69D8477DE4"; echo "x"; echo "n"; echo "1"; echo "EFI"; echo "n"; echo "2"; echo "BOOT"; echo "n"; echo "3"; echo "ROOT"; echo "r"; sleep 5; echo "w") | fdisk -w always -W always "${destination_device}"
fi
sync
PARTITIONDEVICE
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/partition_script
}

generate_setup_and_mount_rootfs()
{
if [ "${distro}" == "Brunch" ] || [ "${distro}" == "ChromeOS-Flex" ] || [ "${distro}" == "Tails" ]; then return; fi
cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/setup_and_mount_rootfs <<SETUPFILESYSTEMS
#!/bin/bash
set -e
mkfs.fat -F 32 -n 'EFI' "${efi_partition}"
mkfs.ext4 -E nodiscard -F -L "BOOT" "${boot_partition}"
if tune2fs -l "${boot_partition}" | grep 'Filesystem features' | grep -q -w large_dir; then tune2fs -O ^large_dir "${boot_partition}"; fi
if tune2fs -l "${boot_partition}" | grep 'Filesystem features' | grep -q -w metadata_csum_seed; then tune2fs -O ^metadata_csum_seed "${boot_partition}"; fi
if tune2fs -l "${boot_partition}" | grep 'Filesystem features' | grep -q -w orphan_file; then tune2fs -O ^orphan_file "${boot_partition}"; fi
if [ "${encryption}" == "Yes" ]; then
	echo -n "${userpass}" | cryptsetup --type luks2 --cipher aes-xts-plain64 --hash sha256 --key-size 256 --pbkdf argon2id luksFormat "${root_partition}" -
	echo -n "${userpass}" | cryptsetup --type luks2 --cipher aes-xts-plain64 --hash sha256 --key-size 256 luksOpen "${root_partition}" luks-"\$(blkid -s UUID -o value "${root_partition}")" -
	if [ "${fstype}" == "btrfs" ]; then
		mkfs.btrfs -K -L "ROOT" /dev/mapper/luks-"\$(blkid -s UUID -o value "${root_partition}")"
		mount /dev/mapper/luks-"\$(blkid -s UUID -o value "${root_partition}")" /mnt
		btrfs subvolume create /mnt/@
		btrfs subvolume create /mnt/@home
		if [ ! -z "${swap_size}" ] && [ "${swap_size}" -ne 0 ]; then btrfs subvolume create /mnt/@swap; fi
		umount /mnt
		mount -o subvol=@,compress=zstd /dev/mapper/luks-"\$(blkid -s UUID -o value "${root_partition}")" /mnt
	else
		mkfs.ext4 -E nodiscard -F -L "ROOT" /dev/mapper/luks-"\$(blkid -s UUID -o value "${root_partition}")"
		if tune2fs -l /dev/mapper/luks-"\$(blkid -s UUID -o value "${root_partition}")" | grep 'Filesystem features' | grep -q -w large_dir; then tune2fs -O ^large_dir /dev/mapper/luks-"\$(blkid -s UUID -o value "${root_partition}")"; fi
		if tune2fs -l /dev/mapper/luks-"\$(blkid -s UUID -o value "${root_partition}")" | grep 'Filesystem features' | grep -q -w metadata_csum_seed; then tune2fs -O ^metadata_csum_seed /dev/mapper/luks-"\$(blkid -s UUID -o value "${root_partition}")"; fi
		if tune2fs -l /dev/mapper/luks-"\$(blkid -s UUID -o value "${root_partition}")" | grep 'Filesystem features' | grep -q -w orphan_file; then tune2fs -O ^orphan_file /dev/mapper/luks-"\$(blkid -s UUID -o value "${root_partition}")"; fi
		mount /dev/mapper/luks-"\$(blkid -s UUID -o value "${root_partition}")" /mnt
	fi
else
	if [ "${fstype}" == "btrfs" ]; then
		mkfs.btrfs -K -L "ROOT" "${root_partition}"
		mount "${root_partition}" /mnt
		btrfs subvolume create /mnt/@
		btrfs subvolume create /mnt/@home
		if [ ! -z "${swap_size}" ] && [ "${swap_size}" -ne 0 ]; then btrfs subvolume create /mnt/@swap; fi
		umount /mnt
		mount -o subvol=@,compress=zstd "${root_partition}" /mnt
	else
		mkfs.ext4 -E nodiscard -F -L "ROOT" "${root_partition}"
		if tune2fs -l "${root_partition}" | grep 'Filesystem features' | grep -q -w large_dir; then tune2fs -O ^large_dir "${root_partition}"; fi
		if tune2fs -l "${root_partition}" | grep 'Filesystem features' | grep -q -w metadata_csum_seed; then tune2fs -O ^metadata_csum_seed "${root_partition}"; fi
		if tune2fs -l "${root_partition}" | grep 'Filesystem features' | grep -q -w orphan_file; then tune2fs -O ^orphan_file "${root_partition}"; fi		
		mount "${root_partition}" /mnt
	fi
fi
if [ "${fstype}" == "btrfs" ]; then
	if [ "${encryption}" == "Yes" ]; then
		mkdir /mnt/home
		mount -o subvol=@home,compress=zstd /dev/mapper/luks-"\$(blkid -s UUID -o value "${root_partition}")" /mnt/home
		if [ ! -z "${swap_size}" ] && [ "${swap_size}" -ne 0 ]; then
			mkdir -p /mnt/var/swap
			mount -o subvol=@swap /dev/mapper/luks-"\$(blkid -s UUID -o value "${root_partition}")" /mnt/var/swap
		fi
	else
		mkdir /mnt/home
		mount -o subvol=@home,compress=zstd "${root_partition}" /mnt/home
		if [ ! -z "${swap_size}" ] && [ "${swap_size}" -ne 0 ]; then
			mkdir -p /mnt/var/swap
			mount -o subvol=@swap "${root_partition}" /mnt/var/swap
		fi
	fi
fi
SETUPFILESYSTEMS
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/setup_and_mount_rootfs
}

generate_mount_efi()
{
if [ "${distro}" == "Brunch" ] || [ "${distro}" == "ChromeOS-Flex" ] || [ "${distro}" == "Tails" ]; then return; fi
cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/mount_efi <<SETUPFILESYSTEMS
#!/bin/bash
set -e
if [ "${distro}" == "NixOS" ] && [ "${install_type}" == "image" ]; then
	losetup --show -fP "${boot_partition}" > /linuxloops/boot_loop
	mkdir -p /mnt/boot
	mount \$(cat /linuxloops/boot_loop) /mnt/boot
	losetup --show -fP "${efi_partition}" > /linuxloops/efi_loop
	mkdir -p /mnt/boot/efi
	mount \$(cat /linuxloops/efi_loop) /mnt/boot/efi
else
	mkdir -p /mnt/boot
	mount "${boot_partition}" /mnt/boot
	mkdir -p /mnt/boot/efi
	mount "${efi_partition}" /mnt/boot/efi
fi
SETUPFILESYSTEMS
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/mount_efi
}

generare_enter_chroot()
{
if [ "${distro}" == "Brunch" ] || [ "${distro}" == "ChromeOS-Flex" ] || [ "${distro}" == "NixOS" ] || [ "${distro}" == "Tails" ]; then return; fi
cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/enter_chroot <<ENTERCHROOT
#!/bin/bash
set -e
mount -t proc none /mnt/proc
mount -t sysfs none /mnt/sys
mount -t devtmpfs none /mnt/dev
mount -t devpts none /mnt/dev/pts
mount -t tmpfs -o mode=1777 none /mnt/dev/shm
mount -t tmpfs none /mnt/run
mount -t tmpfs -o mode=1777 none /mnt/tmp
mkdir -p /mnt/linuxloops
mount --bind /linuxloops /mnt/linuxloops
rm -f /mnt/etc/resolv.conf
if [ "${distro}" == "Elementary" ] || [ "${distro}" == "Linuxmint" ] || [ "${distro}" == "Neon" ] || [ "${distro}" == "Pop" ] || [ "${distro}" == "Qubes" ] || [ "${distro}" == "Ubuntu" ] || [ "${distro}" == "Ubuntu-LTS" ] || [ "${distro}" == "Zorin" ]; then
	dns_manager="systemd/resolve/stub-resolv.conf"
elif [ "${desktop}" == "enlightenment" ]; then
	dns_manager="connman/resolv.conf"
else
	dns_manager="NetworkManager/resolv.conf"
fi
mkdir -p \$(dirname /run/"\${dns_manager}") \$(dirname /mnt/run/"\${dns_manager}")
touch /mnt/run/"\${dns_manager}"
ln -s  /mnt/run/"\${dns_manager}" /run/"\${dns_manager}"
ln -s /run/"\${dns_manager}" /mnt/etc/resolv.conf
mount --bind /etc/resolv.conf /mnt/etc/resolv.conf
chroot /mnt /linuxloops/chroot_init
if [ -f /linuxloops/install_desktop ]; then chroot /mnt /linuxloops/install_desktop; fi
if [ -f /linuxloops/install_user ]; then chroot /mnt /linuxloops/install_user; fi
if [ -f /linuxloops/install_settings ]; then chroot /mnt /linuxloops/install_settings; fi
if [ -f /linuxloops/install_secureboot ]; then chroot /mnt /linuxloops/install_secureboot; fi
if [ -f /linuxloops/install_surface ]; then chroot /mnt /linuxloops/install_surface; fi
if [ -f /linuxloops/install_nvidia ]; then chroot /mnt /linuxloops/install_nvidia; fi
if [ -f /linuxloops/install_fstab ]; then chroot /mnt /linuxloops/install_fstab; fi
if [ -f /linuxloops/install_initramfs ]; then chroot /mnt /linuxloops/install_initramfs; fi
if [ -f /linuxloops/install_bootloader ]; then chroot /mnt /linuxloops/install_bootloader; fi
if [ -f /linuxloops/install_live ]; then chroot /mnt /linuxloops/install_live; fi
if [ -f /linuxloops/install_custom_packages ]; then chroot /mnt /linuxloops/install_custom_packages; fi
if [ -f /linuxloops/install_custom_script ]; then chroot /mnt /linuxloops/install_custom_script; fi
if [ -f /linuxloops/cleanup ]; then chroot /mnt /linuxloops/cleanup; fi
if [ -f /linuxloops/selinux_fix ]; then chroot /mnt /linuxloops/selinux_fix; fi
ENTERCHROOT
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/enter_chroot
}

generate_install_settings()
{
if [ "${distro}" == "Brunch" ] || [ "${distro}" == "ChromeOS-Flex" ] || [ "${distro}" == "NixOS" ] || [ "${distro}" == "Tails" ]; then return; fi
cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_settings <<APPLYSETTINGS
#!/bin/bash
set -e
if [ ! -f /etc/locale.gen ]; then echo "${locale}.UTF-8 UTF-8" > /etc/locale.gen; else sed -i 's@# ${locale}.UTF-8 UTF-8@${locale}.UTF-8 UTF-8@g' /etc/locale.gen; fi
localedef -i ${locale} -f UTF-8 ${locale}.UTF-8
echo "LANG=${locale}.UTF-8" > /etc/locale.conf
echo "LANG=${locale}.UTF-8" > /etc/default/locale
echo -e "KEYMAP=${keymap}" > /etc/vconsole.conf
if [ -d /etc/conf.d ]; then echo -e 'keymap="${keymap}"\nextended_keymaps=""' > /etc/conf.d/keymaps; fi
cat >/etc/default/keyboard <<'DEBIANKEYBOARD'
XKBMODEL="pc105"
XKBLAYOUT="${keymap}"
XKBVARIANT=""
XKBOPTIONS=""
BACKSPACE="guess"
DEBIANKEYBOARD
mkdir -p /etc/X11/xorg.conf.d
cat >/etc/X11/xorg.conf.d/00-keyboard.conf <<'XKEYBOARD'
Section "InputClass"
        Identifier "system-keyboard"
        MatchIsKeyboard "on"
        Option "XkbLayout" "${keymap}"
EndSection
XKEYBOARD
ln -sf /usr/share/zoneinfo/"${timezone}" /etc/localtime
mkdir -p /etc/network
echo -e "auto lo\niface lo inet loopback" > /etc/network/interfaces
echo "${hostname}" > /etc/hostname
if [ "${distro}" == "Proxmox" ]; then
	echo -e "127.0.0.1 localhost\n\n::1 ip6-localhost ip6-loopback\nfe00::0 ip6-localnet\nff00::0 ip6-mcastprefix\nff02::1 ip6-allnodes\nff02::2 ip6-allrouters\nff02::3 ip6-allhosts" > /etc/hosts
else
	echo -e "127.0.0.1 localhost\n127.0.1.1 ${hostname}\n\n::1 ip6-localhost ip6-loopback\nfe00::0 ip6-localnet\nff00::0 ip6-mcastprefix\nff02::1 ip6-allnodes\nff02::2 ip6-allrouters\nff02::3 ip6-allhosts" > /etc/hosts
fi
if [ -d /etc/netplan ]; then echo -e 'network:\n    version: 2\n    renderer: NetworkManager\n    ethernets:\n        zz-all-en:\n            match:\n                name: "en*"\n            dhcp4: true\n        zz-all-eth:\n            match:\n                name: "eth*"\n            dhcp4: true' > /etc/netplan/01-netcfg.yaml; fi
mkdir -p /etc/modprobe.d
echo 'blacklist pcspkr' > /etc/modprobe.d/pcspkr.conf
APPLYSETTINGS
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_settings
}

generate_install_secureboot()
{
if [ "${distro}" == "Brunch" ] || [ "${distro}" == "ChromeOS-Flex" ] || [ "${distro}" == "Tails" ]; then return; fi
cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_secureboot <<SECUREBOOT
#!/bin/bash
set -e
mkdir -p \${1}/etc/secureboot_key
if [ "${distro}" == "AlmaLinux" ] || [ "${distro}" == "RockyLinux" ]; then
	cp /usr/share/pki/sb-certs/secureboot-kernel-x86_64.cer \${1}/etc/secureboot_key/MOK.der
elif [ "${distro}" == "openSUSE" ]; then
	cp /usr/share/efi/x86_64/grub.der \${1}/etc/secureboot_key/MOK.der
else
	openssl req -newkey rsa:4096 -nodes -keyout \${1}/etc/secureboot_key/MOK.key -new -x509 -sha256 -days 36500 -subj "/CN=Linuxloops Machine Owner Key/" -out \${1}/etc/secureboot_key/MOK.crt
	openssl x509 -outform DER -in \${1}/etc/secureboot_key/MOK.crt -out \${1}/etc/secureboot_key/MOK.der
	chmod 0640 \${1}/etc/secureboot_key/*
	cp \${1}/etc/secureboot_key/MOK.der \${1}/boot/efi/
	if [ "${distro}" == "NixOS" ]; then
		exit 0
	elif [ "${distro}" == "Debian" ] || [ "${distro}" == "Devuan" ] || [ "${distro}" == "Elementary" ] || [ "${distro}" == "Kali" ] || [ "${distro}" == "LMDE" ] || [ "${distro}" == "Linuxmint" ] || [ "${distro}" == "MX" ] || [ "${distro}" == "Neon" ] || [ "${distro}" == "Parrot" ] || [ "${distro}" == "Pop" ] || [ "${distro}" == "Ubuntu" ] || [ "${distro}" == "Ubuntu-LTS" ] || [ "${distro}" == "Zorin" ]; then
		mkdir -p /var/lib/shim-signed/mok
		rm -rf /var/lib/shim-signed/mok/MOK.der /var/lib/shim-signed/mok/MOK.priv
		ln -s /etc/secureboot_key/MOK.der /var/lib/shim-signed/mok/MOK.der
		ln -s /etc/secureboot_key/MOK.key /var/lib/shim-signed/mok/MOK.priv
	else
		mkdir -p /var/lib/dkms
		rm -rf /var/lib/dkms/mok.pub /var/lib/dkms/mok.key
		ln -s /etc/secureboot_key/MOK.der /var/lib/dkms/mok.pub
		ln -s /etc/secureboot_key/MOK.key /var/lib/dkms/mok.key
		if [ "${distro}" == "Fedora" ]; then
			chown root:akmods /etc/secureboot_key/*
			mkdir -p /etc/pki/akmods/certs /etc/pki/akmods/private
			rm -rf /etc/pki/akmods/certs/public_key.der /etc/pki/akmods/private/private_key.priv
			ln -s /etc/secureboot_key/MOK.der /etc/pki/akmods/certs/public_key.der
			ln -s /etc/secureboot_key/MOK.key /etc/pki/akmods/private/private_key.priv
		fi
	fi
fi
SECUREBOOT
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_secureboot
}

generate_install_surface()
{
if [ ! "${surface}" == "Yes" ]; then return; fi
if [ "${distro}" == "Debian" ] || [ "${distro}" == "Elementary" ] || [ "${distro}" == "Kali" ] || [ "${distro}" == "Linuxmint" ] || [ "${distro}" == "MX" ] || [ "${distro}" == "Neon" ] || [ "${distro}" == "Pop" ] || [ "${distro}" == "Proxmox" ] || [ "${distro}" == "Ubuntu" ] || [ "${distro}" == "Ubuntu-LTS" ] || [ "${distro}" == "Zorin" ]; then
cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_surface <<SURFACEAPT
#!/bin/bash
set -e
curl https://raw.githubusercontent.com/linux-surface/linux-surface/master/pkg/keys/surface.asc | gpg --dearmor | dd of=/etc/apt/trusted.gpg.d/linux-surface.gpg
echo "deb [arch=amd64] https://pkg.surfacelinux.com/debian release main" > /etc/apt/sources.list.d/linux-surface.list
apt update
yes | DEBIAN_FRONTEND=noninteractive apt purge ${surface_remove}
yes | DEBIAN_FRONTEND=noninteractive apt install linux-image-surface linux-headers-surface iptsd libwacom-surface surface-control surface-dtx-daemon git build-essential cmake meson ninja-build pkg-config libgnutls28-dev python3-pip python3-yaml python3-ply python3-jinja2 qtbase5-dev libqt5core5a libqt5gui5 libqt5widgets5 qttools5-dev-tools libtiff-dev libevent-dev gstreamer1.0-tools libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev v4l2loopback-dkms
git clone https://git.libcamera.org/libcamera/libcamera.git /tmp/libcamera
cd /tmp/libcamera
meson build -Dpipelines=uvcvideo,ipu3 -Dprefix=/usr -Dgstreamer=enabled -Dv4l2=true
ninja -C build
ninja -C build install
cd /
usermod -aG video '${username}'
SURFACEAPT
elif [ "${distro}" == "Arch" ] || [ "${distro}" == "Manjaro" ] || [ "${distro}" == "SteamOS" ]; then
cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_surface <<SURFACEPACMAN
#!/bin/bash
set -e
curl -s https://raw.githubusercontent.com/linux-surface/linux-surface/master/pkg/keys/surface.asc | pacman-key --add -
pacman-key --finger 56C464BAAC421453
pacman-key --lsign-key 56C464BAAC421453
cat >>/etc/pacman.conf <<'SURFACEREPO'
[linux-surface]
Server = https://pkg.surfacelinux.com/arch/
SURFACEREPO
pacman -Syu
pacman -R --noconfirm ${surface_remove}
pacman -S --noconfirm linux-surface linux-surface-headers iptsd libcamera libcamera-tools gst-plugin-libcamera base-devel git fakeroot v4l2loopback-dkms
usermod -aG video '${username}'
SURFACEPACMAN
elif [ "${distro}" == "Fedora" ]; then
cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_surface <<SURFACEDNF
#!/bin/bash
set -e
dnf config-manager --add-repo=https://pkg.surfacelinux.com/fedora/linux-surface.repo
dnf remove -y ${surface_remove}
dnf update -y
dnf install -y --allowerasing kernel-surface kernel-surface-devel iptsd libwacom-surface surface-control surface-dtx-daemon libcamera libcamera-tools libcamera-qcam libcamera-gstreamer libcamera-ipa pipewire-plugin-libcamera
curl -L https://github.com/umlaeute/v4l2loopback/archive/v0.12.5.tar.gz | tar xvz -C /usr/src
dkms add -m v4l2loopback -v 0.12.5
ls /usr/lib/modules/*/vmlinuz | sed 's@/usr/lib/modules/@@g' | sed 's@/vmlinuz@@g' | xargs -n1 /usr/lib/dkms/dkms_autoinstaller start
usermod -aG video '${username}'
SURFACEDNF
fi
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_surface
if [ ! -z "${kernel_parameters}" ]; then kernel_parameters="acpi_enforce_resources=lax ${kernel_parameters}"; else kernel_parameters="acpi_enforce_resources=lax"; fi
}

generate_install_nvidia()
{
if [ ! "${nvidia}" == "Yes" ]; then return; fi
if [ "${distro}" == "Elementary" ] || [ "${distro}" == "Linuxmint" ] || [ "${distro}" == "Neon" ] || [ "${distro}" == "Ubuntu" ] || [ "${distro}" == "Ubuntu-LTS" ] || [ "${distro}" == "Zorin" ]; then
cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_nvidia <<INSTALLNVIDIA
#!/bin/bash
set -e
yes | DEBIAN_FRONTEND=noninteractive apt install \$(apt search nvidia | grep nvidia-driver | grep -v '\-bin' | grep -v '\-open' | grep -v '\-server' | tail -1 | grep -o -P '(nvidia-driver-).*' | cut -d' ' -f1 | cut -d '/' -f1)
INSTALLNVIDIA
elif [ "${distro}" == "Debian" ] || [ "${distro}" == "Devuan" ] || [ "${distro}" == "Kali" ] || [ "${distro}" == "LMDE" ] || [ "${distro}" == "MX" ] || [ "${distro}" == "Parrot" ] || [ "${distro}" == "Proxmox" ]; then
cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_nvidia <<INSTALLNVIDIA
#!/bin/bash
set -e
yes | DEBIAN_FRONTEND=noninteractive apt install nvidia-driver
INSTALLNVIDIA
elif [ "${distro}" == "Arch" ] || [ "${distro}" == "Artix" ] || [ "${distro}" == "Manjaro" ]; then
cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_nvidia <<INSTALLNVIDIA
#!/bin/bash
set -e
pacman -S --noconfirm nvidia-dkms
INSTALLNVIDIA
elif [ "${distro}" == "SteamOS" ]; then
cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_nvidia <<INSTALLNVIDIA
#!/bin/bash
set -e
pacman -S --noconfirm nvidia-dkms lib32-nvidia-utils
INSTALLNVIDIA
elif [ "${distro}" == "Gentoo-openrc" ] || [ "${distro}" == "Gentoo-systemd" ]; then
cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_nvidia <<INSTALLNVIDIA
#!/bin/bash
set -e
emerge -uN x11-drivers/nvidia-drivers
INSTALLNVIDIA
elif [ "${distro}" == "Fedora" ]; then
cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_nvidia <<INSTALLNVIDIA
#!/bin/bash
set -e
dnf install -y akmod-nvidia
INSTALLNVIDIA
elif [ "${distro}" == "NixOS" ]; then
nixos_nvidia="
hardware.opengl.enable = true;
services.xserver.videoDrivers = [ \"nvidia\" ];
"
elif [ "${distro}" == "openSUSE" ]; then
cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_nvidia <<INSTALLNVIDIA
#!/bin/bash
set -e
zypper --non-interactive addrepo https://download.nvidia.com/opensuse/tumbleweed NVIDIA
zypper --non-interactive --gpg-auto-import-keys refresh
zypper --non-interactive install nvidia-glG06 x11-video-nvidiaG06
INSTALLNVIDIA
elif [ "${distro}" == "Pop" ]; then
cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_nvidia <<INSTALLNVIDIA
#!/bin/bash
set -e
yes | DEBIAN_FRONTEND=noninteractive apt install system76-driver-nvidia
INSTALLNVIDIA
elif [ "${distro}" == "Qubes" ]; then
cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_nvidia <<INSTALLNVIDIA
#!/bin/bash
set -e
dnf --setopt=reposdir=/etc/yum.repos.d/ install -y akmod-nvidia
INSTALLNVIDIA
elif [ "${distro}" == "VoidLinux" ]; then
cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_nvidia <<INSTALLNVIDIA
#!/bin/bash
set -e
xbps-install -y nvidia
INSTALLNVIDIA
fi
if [ -f "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_nvidia ]; then
cat >>"${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_nvidia <<INSTALLNVIDIA

if [ -d /etc/systemd ]; then
	mkdir -p /etc/systemd/system-shutdown
	cat >/etc/systemd/system-shutdown/nvidia.shutdown <<'SHUTDOWNFIX'
#!/bin/sh
for MODULE in nvidia_drm nvidia_modeset nvidia_uvm nvidia; do
	if lsmod | grep "\$MODULE" &> /dev/null; then rmmod \$MODULE; fi
done
SHUTDOWNFIX
	chmod 0755 /etc/systemd/system-shutdown/nvidia.shutdown
fi
INSTALLNVIDIA
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_nvidia
fi
if [ ! -z "${kernel_parameters}" ]; then kernel_parameters="module_blacklist=nouveau nvidia-drm.modeset=1 ibt=off ${kernel_parameters}"; else kernel_parameters="module_blacklist=nouveau nvidia-drm.modeset=1 ibt=off"; fi
}

generate_install_fstab()
{
if [ "${distro}" == "Brunch" ] || [ "${distro}" == "ChromeOS-Flex" ] || [ "${distro}" == "Tails" ]; then return; fi
if [ "${distro}" == "NixOS" ]; then
	cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_fstab <<GENERATEFSTAB
#!/bin/bash
set -e
if [ "${encryption}" == "Yes" ]; then
	if [ "${fstype}" == "btrfs" ]; then
		fstab="
boot.initrd.luks.devices = {
	luks-\$(blkid -s UUID -o value "${root_partition}") = {
		device = \"/dev/disk/by-uuid/\$(blkid -s UUID -o value "${root_partition}")\";
	};
};

fileSystems.\"/\" = {
	device = \"/dev/disk/by-uuid/\$(blkid -s UUID -o value /dev/mapper/luks-\$(blkid -s UUID -o value "${root_partition}"))\";
	fsType = \"btrfs\";
	options = [ \"subvol=@\" \"compress=zstd\" ];
};

fileSystems.\"/home\" = {
	device = \"/dev/disk/by-uuid/\$(blkid -s UUID -o value /dev/mapper/luks-\$(blkid -s UUID -o value "${root_partition}"))\";
	fsType = \"btrfs\";
	options = [ \"subvol=@home\" \"compress=zstd\" ];
};
"
		if [ ! -z "${swap_size}" ] && [ "${swap_size}" -ne 0 ]; then
			fstab="\${fstab}

fileSystems.\"/var/swap\" = {
	device = \"/dev/disk/by-uuid/\$(blkid -s UUID -o value /dev/mapper/luks-\$(blkid -s UUID -o value "${root_partition}"))\";
	fsType = \"btrfs\";
	options = [ \"subvol=@swap\" ];
};
"
		fi
	else
		fstab="
boot.initrd.luks.devices = {
	luks-\$(blkid -s UUID -o value "${root_partition}") = {
		device = \"/dev/disk/by-uuid/\$(blkid -s UUID -o value "${root_partition}")\";
	};
};

fileSystems.\"/\" = {
	device = \"/dev/disk/by-uuid/\$(blkid -s UUID -o value /dev/mapper/luks-\$(blkid -s UUID -o value "${root_partition}"))\";
	fsType = \"ext4\";
};
"
	fi
else
	if [ "${fstype}" == "btrfs" ]; then
		fstab="
fileSystems.\"/\" = {
	device = \"/dev/disk/by-uuid/\$(blkid -s UUID -o value "${root_partition}")\";
	fsType = \"btrfs\";
	options = [ \"subvol=@\" \"compress=zstd\" ];
};

fileSystems.\"/home\" = {
	device = \"/dev/disk/by-uuid/\$(blkid -s UUID -o value "${root_partition}")\";
	fsType = \"btrfs\";
	options = [ \"subvol=@home\" \"compress=zstd\" ];
};
"
		if [ ! -z "${swap_size}" ] && [ "${swap_size}" -ne 0 ]; then
			fstab="\${fstab}

fileSystems.\"/var/swap\" = {
	device = \"/dev/disk/by-uuid/\$(blkid -s UUID -o value "${root_partition}")\";
	fsType = \"btrfs\";
	options = [ \"subvol=@swap\" ];
};
"
		fi
	else
		fstab="
fileSystems.\"/\" = {
	device = \"/dev/disk/by-uuid/\$(blkid -s UUID -o value "${root_partition}")\";
	fsType = \"ext4\";
};
"
	fi
fi
fstab="\${fstab}

fileSystems.\"/boot\" = {
	device = \"/dev/disk/by-uuid/\$(blkid -s UUID -o value "${boot_partition}")\";
	fsType = \"ext4\";
};

fileSystems.\"/boot/efi\" = {
	device = \"/dev/disk/by-uuid/\$(blkid -s UUID -o value "${efi_partition}")\";
	fsType = \"vfat\";
};
"
if [ ! -z "${swap_size}" ] && [ "${swap_size}" -ne 0 ]; then
fstab="\${fstab}

swapDevices =
[
  {
	device = \"/var/swap/swapfile\";
  }
];
"
fi
echo "\${fstab}" > /linuxloops/fstab
GENERATEFSTAB
else
	cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_fstab <<GENERATEFSTAB
#!/bin/bash
set -e
touch /etc/fstab
chmod 0644 /etc/fstab
if [ "${encryption}" == "Yes" ]; then
	if [ "${fstype}" == "btrfs" ]; then
		echo -e "/dev/disk/by-uuid/\$(blkid -s UUID -o value /dev/mapper/luks-\$(blkid -s UUID -o value "${root_partition}")) / btrfs subvol=@,compress=zstd 0 0" >> /etc/fstab
		echo -e "/dev/disk/by-uuid/\$(blkid -s UUID -o value /dev/mapper/luks-\$(blkid -s UUID -o value "${root_partition}")) /home btrfs subvol=@home,compress=zstd 0 0" >> /etc/fstab
		if [ ! -z "${swap_size}" ] && [ "${swap_size}" -ne 0 ]; then echo -e "/dev/disk/by-uuid/\$(blkid -s UUID -o value /dev/mapper/luks-\$(blkid -s UUID -o value "${root_partition}")) /var/swap btrfs subvol=@swap 0 0" >> /etc/fstab; fi
	else
		echo -e "/dev/disk/by-uuid/\$(blkid -s UUID -o value /dev/mapper/luks-\$(blkid -s UUID -o value "${root_partition}")) / ext4 errors=remount-ro 0 1" >> /etc/fstab
	fi
else
	if [ "${fstype}" == "btrfs" ]; then
		echo -e "/dev/disk/by-uuid/\$(blkid -s UUID -o value "${root_partition}") / btrfs subvol=@,compress=zstd 0 0" >> /etc/fstab
		echo -e "/dev/disk/by-uuid/\$(blkid -s UUID -o value "${root_partition}") /home btrfs subvol=@home,compress=zstd 0 0" >> /etc/fstab
		if [ ! -z "${swap_size}" ] && [ "${swap_size}" -ne 0 ]; then echo -e "/dev/disk/by-uuid/\$(blkid -s UUID -o value "${root_partition}") /var/swap btrfs subvol=@swap 0 0" >> /etc/fstab; fi
	else
		echo -e "/dev/disk/by-uuid/\$(blkid -s UUID -o value "${root_partition}") / ext4 errors=remount-ro 0 1" >> /etc/fstab
	fi
fi
echo -e "/dev/disk/by-uuid/\$(blkid -s UUID -o value "${boot_partition}") /boot ext4 defaults 0 2" >> /etc/fstab
echo -e "/dev/disk/by-uuid/\$(blkid -s UUID -o value "${efi_partition}") /boot/efi vfat defaults 0 2" >> /etc/fstab
if [ ! -z "${swap_size}" ] && [ "${swap_size}" -ne 0 ]; then echo -e "/var/swap/swapfile none swap sw 0 0" >> /etc/fstab; fi
GENERATEFSTAB
fi
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_fstab
}

add_linuxloops_pre()
{
touch "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_initramfs
cat >>"${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_initramfs <<'INITSCRIPT'
#!/bin/sh
export PATH=/sbin:/bin:/usr/sbin:/usr/bin

mkdir -p /dev /proc /sys /run
mount -n -t devtmpfs devtmpfs /dev  -o nosuid,mode=0755
mount -n -t proc     proc     /proc -o nosuid,noexec,nodev
mount -n -t sysfs    sysfs    /sys  -o nosuid,noexec,nodev
mount -n -t tmpfs    tmpfs    /run  -o nosuid,nodev,mode=0755

echo "linuxloops: boot sequence started." > /dev/kmsg
echo "linuxloops: img_uuid=$img_uuid" > /dev/kmsg
echo "linuxloops: img_path=$img_path" > /dev/kmsg

INITSCRIPT
}

add_linuxloops_recovery()
{
touch "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_initramfs
cat >>"${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_initramfs <<'INITSCRIPT'
recovery_shell()
{
	printk_levels="$(cat /proc/sys/kernel/printk)"
	echo 0 0 0 0 > /proc/sys/kernel/printk
	echo -e "\n\nYou are in the recovery shell, you can notably use the included tools to obtain data on your partitions ("blkid" or "lsblk") or to perform an fscheck ("e2fsck" or "ntfsfix").\nOnce you are done with your modifications, type \"exit\" to reboot the computer.\n\n"
	sh
	reboot -f
}

INITSCRIPT
}

add_linuxloops_udev_start()
{
touch "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_initramfs
cat >>"${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_initramfs <<'INITSCRIPT'
if [ -z "$img_uuid" ] || [ -z "$img_path" ]; then echo "linuxloops: invalid GRUB configuration." > /dev/kmsg; recovery_shell; fi

if [ -x /sbin/udevd ]; then
	UDEVD=/sbin/udevd
	UDEVD_BIN="udevd"
elif [ -x /lib/udev/udevd ]; then
	UDEVD=/lib/udev/udevd
	UDEVD_BIN="udevd"
elif [ -x /lib/systemd/systemd-udevd ]; then
	UDEVD=/lib/systemd/systemd-udevd
	UDEVD_BIN="systemd-udevd"
elif [ -x /usr/lib/systemd/systemd-udevd ]; then
	UDEVD=/usr/lib/systemd/systemd-udevd
	UDEVD_BIN="systemd-udevd"
elif [ -x /usr/lib64/systemd/systemd-udevd ]; then
	UDEVD=/usr/lib64/systemd/systemd-udevd
	UDEVD_BIN="systemd-udevd"
else
	echo "linuxloops: Cannot find udevd nor systemd-udevd." > /dev/kmsg
	recovery_shell
fi

$UDEVD --daemon --resolve-names=never >/linuxloops_udev.log 2>&1
udevadm trigger --action=add --type=subsystems
udevadm trigger --action=add --type=devices
udevadm settle

INITSCRIPT
}

add_linuxloops_main()
{
touch "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_initramfs
cat >>"${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_initramfs <<'INITSCRIPT'
sleep 1

if [ ! -z "$img_uuid" ] && [ ! -z "$img_path" ]; then

if [ ! -b /dev/disk/by-partuuid/"$img_uuid" ]; then echo "linuxloops: Boot partition was not found." > /dev/kmsg; recovery_shell; fi

mkdir /linuxloops_root || { echo "linuxloops: Root directory cannot be created." > /dev/kmsg; recovery_shell; }

if [ ! -z "$linuxloops_debug" ]; then recovery_shell; fi

fstype=$(blkid -s TYPE -o value /dev/disk/by-partuuid/"$img_uuid")
if [ "$fstype" = "ntfs" ]; then
	ntfs-3g /dev/disk/by-partuuid/"$img_uuid" /linuxloops_root || { echo "linuxloops: The boot partition could not be mounted." > /dev/kmsg; recovery_shell; }
else
	mount -n -t "$fstype" /dev/disk/by-partuuid/"$img_uuid" /linuxloops_root || { echo "linuxloops: The boot partition could not be mounted." > /dev/kmsg; recovery_shell; }
fi

if [ -f /linuxloops_root/"$img_path" ]; then
	modprobe loop || { echo "linuxloops: Loop module is not available." > /dev/kmsg; recovery_shell; }
	if [ ! -b /dev/loop0 ]; then mknod -m 660 /dev/loop0 b 7 0 || { echo "linuxloops: The loop device could not be created." > /dev/kmsg; recovery_shell; }; fi
	losetup --direct-io=off -P /dev/loop0 /linuxloops_root"$img_path" || { echo "linuxloops: The loop device could not be configured." > /dev/kmsg; recovery_shell; }
	#losetup -P /dev/loop0 /linuxloops_root"$img_path" || { echo "linuxloops: The loop device could not be configured." > /dev/kmsg; recovery_shell; }
else
	echo "linuxloops: The rootfs image file was not found, it might be due to an incorrect GRUB config or unsupported configuration." > /dev/kmsg
	recovery_shell
fi

udevadm trigger --action=add --type=subsystems
udevadm trigger --action=add --type=devices
udevadm settle

fi
INITSCRIPT
}

add_linuxloops_udev_end()
{
touch "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_initramfs
cat >>"${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_initramfs <<'INITSCRIPT'
udevadm control --exit
udevadm info --cleanup-db

timer=0
while ps | grep -q '[u]devd'; do
	echo "linuxloops: udevd is not yet killed, sleeping 1s" > /dev/kmsg
	if [ $timer -eq 3 ]; then echo "linuxloops: udevd could not be killed, continuing anyway..." > /dev/kmsg; break; fi
	sleep 1
	timer=$((timer+1))
done

INITSCRIPT
}

add_linuxloops_post()
{
touch "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_initramfs
cat >>"${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_initramfs <<'INITSCRIPT'
if [ -z "$linuxloops_init" ]; then
	if [ -x /init ]; then
		linuxloops_init="/init"
	elif [ -x /sbin/init ]; then
		linuxloops_init="/sbin/init"
	else
		echo "linuxloops: No init system found." > /dev/kmsg
		recovery_shell
	fi
fi

echo "linuxloops: boot sequence finished." > /dev/kmsg

umount /run
umount /sys
umount /proc
umount /dev > /dev/null 2>&1 || umount -l /dev > /dev/null 2>&1 || echo "linuxloops: /dev was not properly unmounted" > /dev/kmsg

#sh

exec "$linuxloops_init"
INITSCRIPT
}

generate_initcpio()
{
cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_initramfs <<INITCPIOSTART
#!/bin/bash
set -e
if [ "${encryption}" == "Yes" ]; then
sed -i 's@ block filesystems fsck)@ block encrypt filesystems fsck linuxloops)@g' /etc/mkinitcpio.conf
else
sed -i 's@ block filesystems fsck)@ block filesystems fsck linuxloops)@g' /etc/mkinitcpio.conf
fi
cat >/etc/initcpio/install/linuxloops <<'INSTALLHOOK'
#!/bin/bash

build() {
	add_module "8250_dw"
	add_module "aes"
	add_module "atkbd"
	add_module "btrfs"
	add_module "cbc"
	add_module "dm_crypt"
	add_module "exfat"
	add_module "ext4"
	add_module "fuse"
	add_module "i8042"
	add_module "intel_lpss"
	add_module "intel_lpss_pci"
	add_module "loop"
	add_module "nvme"
	add_module "quota_v1"
	add_module "quota_v2"
	add_module "serio"
	add_module "sha256"
	add_module "surface_aggregator"
	add_module "surface_aggregator_registry"
	add_module "surface_hid"
	add_module "surface_hid_core"
	add_module "usbhid"
	add_module "xhci_pci"

	add_binary "bash"
	add_binary "blkid"
	add_binary "cryptsetup"
	add_binary "cut"
	add_binary "e2fsck"
	add_binary "find"
	add_binary "grep"
	add_binary "losetup"
	add_binary "lsblk"
	add_binary "ntfs-3g"
	add_binary "ntfsfix"
	add_binary "ps"
	add_binary "setfont"
	add_binary "setsid"
	add_binary "swapon"

	cp "/usr/lib/linuxloops/linuxloops" "\$BUILDROOT/linuxloops"

	for i in \$(find /usr/lib/udev/rules.d/*-linuxloops.rules 2>/dev/null); do
		cp "\${i}" "\$BUILDROOT\$i"
	done

	if ls /boot/vmlinuz-* >/dev/null 2>&1 && [ -f /etc/secureboot_key/MOK.key ] && [ -f /etc/secureboot_key/MOK.crt ] && [ ! -z "\$(command -v sbsign)" ] && [ ! -z "\$(command -v sbverify)" ]; then
		for i in /boot/vmlinuz-*; do
			if ! sbverify --list \$i | grep -q 'CN=Linuxloops Machine Owner Key'; then
				sbsign --key /etc/secureboot_key/MOK.key --cert /etc/secureboot_key/MOK.crt --output \$i \$i
			fi
		done
	fi
}

help() {
    cat <<HELPEOF
Installs the linuxloops hook.
HELPEOF
}
INSTALLHOOK
chmod 0755 /etc/initcpio/install/linuxloops
mkdir -p /usr/lib/linuxloops
cat >/usr/lib/linuxloops/linuxloops <<'LINUXLOOPSBINARY'
INITCPIOSTART
add_linuxloops_pre
add_linuxloops_recovery
add_linuxloops_udev_start
add_linuxloops_main
add_linuxloops_udev_end
add_linuxloops_post
echo -e "LINUXLOOPSBINARY" >> "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_initramfs
echo -e "chmod 0755 /usr/lib/linuxloops/linuxloops" >> "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_initramfs
echo -e "mkinitcpio -P" >> "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_initramfs
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_initramfs
}

generate_initramfstools()
{
cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_initramfs <<INITRAMFSTOOLSSTART
#!/bin/bash
set -e
cat >/etc/initramfs-tools/hooks/linuxloops <<'INSTALLHOOK'
#!/bin/bash
PREREQ=""
prereqs()
{
   echo "\$PREREQ"
}

case \$1 in
prereqs)
   prereqs
   exit 0
   ;;
esac

. /usr/share/initramfs-tools/hook-functions
# Begin real processing below this line

	rm -f "\$DESTDIR/bin/losetup" "\$DESTDIR/sbin/losetup"

	manual_add_modules "8250_dw"
	manual_add_modules "aes"
	manual_add_modules "atkbd"
	manual_add_modules "btrfs"
	manual_add_modules "cbc"
	manual_add_modules "dm-crypt"
	manual_add_modules "exfat"
	manual_add_modules "ext4"
	manual_add_modules "fuse"
	manual_add_modules "i8042"
	manual_add_modules "intel_lpss"
	manual_add_modules "intel_lpss_pci"
	manual_add_modules "loop"
	manual_add_modules "nvme"
	manual_add_modules "quota_v1"
	manual_add_modules "quota_v2"
	manual_add_modules "serio"
	manual_add_modules "sha256"
	manual_add_modules "surface_aggregator"
	manual_add_modules "surface_aggregator_registry"
	manual_add_modules "surface_hid"
	manual_add_modules "surface_hid_core"
	manual_add_modules "usbhid"
	manual_add_modules "xhci_pci"

	copy_exec "\$(command -v bash)"
	copy_exec "\$(command -v blkid)"
	copy_exec "\$(command -v cryptsetup)"
	copy_exec "\$(command -v cut)"
	copy_exec "\$(command -v e2fsck)"
	copy_exec "\$(command -v find)"
	copy_exec "\$(command -v grep)"
	copy_exec "\$(command -v losetup)"
	copy_exec "\$(command -v lsblk)"
	copy_exec "\$(command -v ntfs-3g)"
	copy_exec "\$(command -v ntfsfix)"
	copy_exec "\$(command -v ps)"
	copy_exec "\$(command -v setfont)"
	copy_exec "\$(command -v setsid)"
	copy_exec "\$(command -v swapon)"

	cp "/usr/lib/linuxloops/linuxloops" "\$DESTDIR/linuxloops"

	for i in \$(find /usr/lib/udev/rules.d/*-linuxloops.rules 2>/dev/null); do
		cp "\${i}" "\$DESTDIR\$i"
	done

	if ls /boot/vmlinuz-* >/dev/null 2>&1 && [ -f /etc/secureboot_key/MOK.key ] && [ -f /etc/secureboot_key/MOK.crt ] && [ ! -z "\$(command -v sbsign)" ] && [ ! -z "\$(command -v sbverify)" ]; then
		for i in /boot/vmlinuz-*; do
			if ! sbverify --list \$i | grep -q 'CN=Linuxloops Machine Owner Key'; then
				sbsign --key /etc/secureboot_key/MOK.key --cert /etc/secureboot_key/MOK.crt --output \$i \$i
			fi
		done
	fi
INSTALLHOOK
chmod 0755 /etc/initramfs-tools/hooks/linuxloops
mkdir -p /usr/lib/linuxloops
cat >/usr/lib/linuxloops/linuxloops <<'LINUXLOOPSBINARY'
INITRAMFSTOOLSSTART
add_linuxloops_pre
add_linuxloops_recovery
add_linuxloops_udev_start
add_linuxloops_main
add_linuxloops_udev_end
add_linuxloops_post
echo -e "LINUXLOOPSBINARY" >> "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_initramfs
echo -e "chmod 0755 /usr/lib/linuxloops/linuxloops" >> "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_initramfs
echo -e "DEBIAN_FRONTEND=noninteractive dpkg-reconfigure console-setup" >> "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_initramfs
echo -e "update-initramfs -u -k all" >> "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_initramfs
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_initramfs
}

generate_dracut()
{
cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_initramfs <<INITDRACUTSTART
#!/bin/bash
set -e
mkdir /usr/lib/dracut/modules.d/99linuxloops
cat >/usr/lib/dracut/modules.d/99linuxloops/module-setup.sh <<'INSTALLHOOK'
#!/bin/bash

check() {
	return 0
}

installkernel() {
	instmods "8250_dw"
	instmods "aes"
	instmods "atkbd"
	instmods "btrfs"
	instmods "cbc"
	instmods "dm-crypt"
	instmods "exfat"
	instmods "ext4"
	instmods "fuse"
	instmods "i8042"
	instmods "intel_lpss"
	instmods "intel_lpss_pci"
	instmods "loop"
	instmods "nvme"
	instmods "quota_v1"
	instmods "quota_v2"
	instmods "serio"
	instmods "sha256"
	instmods "surface_aggregator"
	instmods "surface_aggregator_registry"
	instmods "surface_hid"
	instmods "surface_hid_core"
	instmods "usbhid"
	instmods "xhci_pci"
}

install() {
	inst "\$(command -v bash)" "/usr/bin/bash"
	inst "\$(command -v blkid)" "/usr/sbin/blkid"
	inst "\$(command -v cryptsetup)" "/usr/sbin/cryptsetup"
	inst "\$(command -v cut)" "/usr/sbin/cut"
	inst "\$(command -v e2fsck)" "/usr/sbin/e2fsck"
	inst "\$(command -v find)" "/usr/bin/find"
	inst "\$(command -v grep)" "/usr/sbin/grep"
	inst "\$(command -v losetup)" "/usr/sbin/losetup"
	inst "\$(command -v lsblk)" "/usr/sbin/lsblk"
	inst "\$(command -v ntfs-3g)" "/usr/sbin/ntfs-3g"
	inst "\$(command -v ntfsfix)" "/usr/sbin/ntfsfix"
	inst "\$(command -v ps)" "/usr/bin/ps"
	inst "\$(command -v setfont)" "/usr/bin/setfont"
	inst "\$(command -v setsid)" "/usr/sbin/setsid"
	inst "\$(command -v swapon)" "/usr/sbin/swapon"

	cp "/usr/lib/linuxloops/linuxloops" "\${initdir}/linuxloops"
	
	for i in \$(find /usr/lib/udev/rules.d/*-linuxloops.rules 2>/dev/null); do
		cp "\${i}" "\${initdir}\$i"
	done

	if ls /boot/vmlinuz-* >/dev/null 2>&1 && [ -f /etc/secureboot_key/MOK.key ] && [ -f /etc/secureboot_key/MOK.crt ] && [ ! -z "\$(command -v sbsign)" ] && [ ! -z "\$(command -v sbverify)" ]; then
		for i in /boot/vmlinuz-*; do
			if ! sbverify --list \$i | grep -q 'CN=Linuxloops Machine Owner Key'; then
				sbsign --key /etc/secureboot_key/MOK.key --cert /etc/secureboot_key/MOK.crt --output \$i \$i
			fi
		done
	fi
}
INSTALLHOOK
chmod 0755 /usr/lib/dracut/modules.d/99linuxloops/module-setup.sh
mkdir -p /usr/lib/linuxloops
cat >/usr/lib/linuxloops/linuxloops <<'LINUXLOOPSBINARY'
INITDRACUTSTART
add_linuxloops_pre
add_linuxloops_recovery
add_linuxloops_udev_start
add_linuxloops_main
add_linuxloops_udev_end
add_linuxloops_post
echo -e "LINUXLOOPSBINARY" >> "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_initramfs
echo -e "chmod 0755 /usr/lib/linuxloops/linuxloops" >> "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_initramfs
echo -e "if grep -q '^hostonly=' /etc/dracut.conf; then sed -i '@^hostonly=@d' /etc/dracut.conf; fi; echo 'hostonly=\"yes\"' >> /etc/dracut.conf" >> "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_initramfs
echo -e "dracut --regenerate-all --force" >> "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_initramfs
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_initramfs
}

generate_nixos_config()
{
if [ "${install_type}" == "image" ]; then cmdline="\\\${linuxloops_args}"; fi
if [ ! -z "${kernel_parameters}" ]; then if [ ! -z "${cmdline}" ]; then cmdline="${cmdline} "; fi; cmdline="${cmdline}${kernel_parameters}"; fi
cmdline=$(echo -n "\"${cmdline}\"" | sed 's@ @" "@g')
cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_initramfs <<INITNIXOS
#!/bin/bash
set -e
mkdir -p /mnt/etc/nixos
cat >/mnt/etc/nixos/configuration.nix <<'NIXOSCONFIGURATION'
# Edit this configuration file to define what should be installed on
# your system.  Help is available in the configuration.nix(5) man page
# and in the NixOS manual (accessible by running ‘nixos-help’).

{ config, pkgs, ... }:

{
imports = [ ./linuxloops.nix ];

boot.kernelParams = [ ${cmdline} ];
boot.loader = {
	efi = {
		canTouchEfiVariables = false;
		efiSysMountPoint = "/boot/efi";
	};
	grub = {
		configurationLimit = 3;
		device = "nodev";
		efiInstallAsRemovable = true;
		efiSupport = true;
		enable = true;
		extraGrubInstallArgs = [ "--modules=all_video boot btrfs cat chain configfile echo efifwsetup efinet ext2 fat font gettext gfxmenu gfxterm gfxterm_background gzio halt help hfsplus iso9660 jpeg keystatus linux loadenv loopback ls lsefi lsefimmap lsefisystab lssal memdisk minicmd normal ntfs part_apple part_msdos part_gpt password_pbkdf2 png probe reboot regexp search search_fs_uuid search_fs_file search_label sleep smbios squash4 terminal test true video xfs zfs zfscrypt zfsinfo" ];
		fsIdentifier = "uuid";
		useOSProber = false;
	};
};

console.earlySetup = true;
console.keyMap = "${keymap}";
i18n.defaultLocale = "${locale}.UTF-8";
time.timeZone = "${timezone}";

boot.kernelPackages = pkgs.linuxPackages_latest;
hardware.cpu.intel.updateMicrocode = true;
hardware.cpu.amd.updateMicrocode = true;
hardware.enableAllFirmware = true;

networking.hostName = "${hostname}";
networking.networkmanager.enable = true;

hardware.bluetooth.enable = true;
hardware.sensor.iio.enable = true;
hardware.pulseaudio.enable = false;
security.rtkit.enable = true;
services.pipewire = {
  enable = true;
  alsa.enable = true;
  alsa.support32Bit = true;
  pulse.enable = true;
};

services.avahi.enable = true;
services.avahi.nssmdns = true;
services.logrotate.checkConfig = false;
services.printing.enable = true;

boot.plymouth.enable = true;

environment.systemPackages = with pkgs; [ ntfs3g openssl sbsigntool ${custom_packages} ];

${nixos_desktop}
${nixos_nvidia}

$(cat "${custom_script}" 2>/dev/null)

nixpkgs.config.allowUnfree = true;

# This value determines the NixOS release from which the default
# settings for stateful data, like file locations and database versions
# on your system were taken. It‘s perfectly fine and recommended to leave
# this value at the release version of the first install of this system.
# Before changing this value read the documentation for this option
# (e.g. man configuration.nix or on https://nixos.org/nixos/options.html).
system.stateVersion = "23.05"; # Did you read the comment?
}
NIXOSCONFIGURATION
echo -e '# Do not modify this file which contains the linuxloops configuration.\n# Please make changes to /etc/nixos/configuration.nix instead.\n{ config, lib, pkgs, modulesPath, ... }:\n\n{' > /mnt/etc/nixos/linuxloops.nix
cat /linuxloops/fstab >>/mnt/etc/nixos/linuxloops.nix
cat >>/mnt/etc/nixos/linuxloops.nix <<'NIXOSLINUXLOOPS'
#https://github.com/NixOS/nixpkgs/blob/master/nixos/modules/profiles/all-hardware.nix
boot.initrd.availableKernelModules = [ "3w-9xxx" "3w-xxxx" "8250_dw" "aes" "ahci" "aic79xx" "aic7xxx" "arcmsr" "ata_piix" "atkbd" "btrfs" "cbc" "dm_crypt" "ehci_hcd" "encrypted_keys" "exfat" "ext4" "fuse" "hv_storvsc" "i8042" "intel_lpss" "intel_lpss_pci" "loop" "mmc_block" "mptspi" "nvme" "ohci1394" "pata_ali" "pata_amd" "pata_artop" "pata_atiixp" "pata_efar" "pata_hpt366" "pata_hpt37x" "pata_hpt3x2n" "pata_hpt3x3" "pata_it8213" "pata_it821x" "pata_jmicron" "pata_marvell" "pata_mpiix" "pata_netcell" "pata_ns87410" "pata_oldpiix" "pata_pcmcia" "pata_pdc2027x" "pata_qdi" "pata_rz1000" "pata_serverworks" "pata_sil680" "pata_sis" "pata_sl82c105" "pata_triflex" "pata_via" "pata_winbond" "quota_v1" "quota_v2" "sata_inic162x" "sata_nv" "sata_promise" "sata_qstor" "sata_sil" "sata_sil24" "sata_sis" "sata_svw" "sata_sx4" "sata_uli" "sata_via" "sata_vsc" "sbp2" "sd_mod" "sdhci_acpi" "sdhci_pci" "serio" "sha256" "sr_mod" "surface_aggregator" "surface_aggregator_registry" "surface_hid" "surface_hid_core" "uas" "uhci_hcd" "usbhid" "usb_storage" "virtio_net" "virtio_pci" "virtio_mmio" "virtio_blk" "virtio_scsi" "virtio_balloon" "virtio_console" "vmxnet3" "vsock" "vmw_balloon" "vmw_vmci" "vmwgfx" "vmw_vsock_vmci_transport" "xhci_pci" ];

boot.initrd.compressor="gzip";
boot.initrd.extraUtilsCommands = ''
copy_bin_and_libs "\${pkgs.bash}/bin/bash"
copy_bin_and_libs "\${pkgs.util-linux}/bin/blkid"
copy_bin_and_libs "\${pkgs.cryptsetup}/bin/cryptsetup"
copy_bin_and_libs "\${pkgs.coreutils}/bin/cut"
copy_bin_and_libs "\${pkgs.e2fsprogs}/bin/e2fsck"
copy_bin_and_libs "\${pkgs.findutils}/bin/find"
copy_bin_and_libs "\${pkgs.gnugrep}/bin/grep"
copy_bin_and_libs "\${pkgs.util-linux}/bin/losetup"
copy_bin_and_libs "\${pkgs.util-linux}/bin/lsblk"
copy_bin_and_libs "\${pkgs.ntfs3g}/bin/ntfs-3g"
copy_bin_and_libs "\${pkgs.ntfs3g}/bin/ntfsfix"
copy_bin_and_libs "\${pkgs.procps}/bin/ps"
copy_bin_and_libs "\${pkgs.kbd}/bin/setfont"
copy_bin_and_libs "\${pkgs.util-linux}/bin/setsid"
copy_bin_and_libs "\${pkgs.util-linux}/bin/swapon"
'';

boot.loader.grub.extraInstallCommands = ''
	if \${pkgs.coreutils}/bin/ls /boot/kernels/*-linux-*Image >/dev/null 2>&1 && [ -f /etc/secureboot_key/MOK.key ] && [ -f /etc/secureboot_key/MOK.crt ] && [ -x \${pkgs.sbsigntool}/bin/sbsign ] && [ -x \${pkgs.sbsigntool}/bin/sbverify ]; then
		for i in /boot/kernels/*-linux-*Image; do
			if ! \${pkgs.sbsigntool}/bin/sbverify --list \$i | \${pkgs.gnugrep}/bin/grep -q 'CN=Linuxloops Machine Owner Key'; then
				\${pkgs.sbsigntool}/bin/sbsign --key /etc/secureboot_key/MOK.key --cert /etc/secureboot_key/MOK.crt --output \$i \$i
			fi
		done
	fi
	\${pkgs.coreutils}/bin/mkdir -p /boot/efi/EFI/nixos
	\${pkgs.coreutils}/bin/cp /boot/efi/EFI/BOOT/BOOTX64.EFI /boot/efi/EFI/nixos/grubx64.efi
'';

boot.initrd.preLVMCommands = ''
INITNIXOS
add_linuxloops_recovery
add_linuxloops_main
echo -e "'';\n}\nNIXOSLINUXLOOPS\n" >> "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_initramfs
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_initramfs
}

generate_iso_init()
{
add_linuxloops_pre
add_linuxloops_recovery
add_linuxloops_udev_start
add_linuxloops_main
add_linuxloops_udev_end
add_linuxloops_post
}

generate_install_initramfs()
{
if [ "${initramfs_type}" == "initcpio" ] || [ "${initramfs_type}" == "initramfstools" ] || [ "${initramfs_type}" == "dracut" ] || [ "${initramfs_type}" == "nixos_config" ] || [ "${initramfs_type}" == "iso_init" ]; then
	generate_"${initramfs_type}"
fi
}

generate_install_bootloader()
{
if [ "${distro}" == "Brunch" ] || [ "${distro}" == "ChromeOS-Flex" ] || [ "${distro}" == "NixOS" ] || [ "${distro}" == "Tails" ]; then return; fi
cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_bootloader <<INSTALLEFI
#!/bin/bash
set -e
if [ "${install_type}" == "image" ]; then cmdline="\\\\\\\${linuxloops_args}"; fi
if [ "${initramfs_type}" == "initcpio" ]; then
	if [ "${encryption}" == "Yes" ]; then if [ ! -z "\${cmdline}" ]; then cmdline="\${cmdline} "; fi; cmdline="\${cmdline}cryptdevice=UUID=\$(blkid -s UUID -o value "${root_partition}"):luks-\$(blkid -s UUID -o value "${root_partition}") rd.luks.uuid=\$(blkid -s UUID -o value "${root_partition}")"; fi
elif [ "${initramfs_type}" == "initramfstools" ]; then
	if [ "${encryption}" == "Yes" ]; then if [ ! -z "\${cmdline}" ]; then cmdline="\${cmdline} "; fi; cmdline="\${cmdline}cryptopts=target=luks-\$(blkid -s UUID -o value "${root_partition}"),source=/dev/disk/by-uuid/\$(blkid -s UUID -o value "${root_partition}"),luks"; fi
elif [ "${initramfs_type}" == "dracut" ]; then
	if [ "${encryption}" == "Yes" ]; then if [ ! -z "\${cmdline}" ]; then cmdline="\${cmdline} "; fi; cmdline="\${cmdline}rd.luks.uuid=\$(blkid -s UUID -o value "${root_partition}")"; fi
fi
if [ "${desktop}" == "none" ]; then cmdline_extra="quiet ${kernel_parameters}"; else cmdline_extra="quiet splash ${kernel_parameters}"; fi
cat >/usr/sbin/reinstall-bootloader <<REINSTALLBOOTLOADER
#!/bin/bash
set -e
cat >/etc/default/grub <<'GRUBDEFAULTS'
GRUB_DISTRIBUTOR="\$(if [ "${distro}" == "SteamOS" ]; then echo "SteamOS"; elif [ "${distro}" == "Proxmox" ]; then echo "Proxmox Virtual Environment"; elif [ -f /etc/system-release ]; then echo "\\\$(sed 's, release .*$,,g' /etc/system-release)"; elif [ ! -z "\$(command -v lsb_release)" ]; then echo "\\\$(lsb_release -is 2> /dev/null || echo "${distro}")"; else echo "${distro}"; fi)"
GRUB_CMDLINE_LINUX="\${cmdline}"
GRUB_CMDLINE_LINUX_DEFAULT="\${cmdline_extra}"
GRUB_CMDLINE_XEN=""
GRUB_CMDLINE_XEN_DEFAULT="${xen_cmdline_extra}"
GRUB_TIMEOUT_STYLE=menu
GRUB_TIMEOUT=5
GRUB_THEME=${grub_theme}
GRUB_DISABLE_OS_PROBER=true
GRUB_ENABLE_BLSCFG=false
GRUBDEFAULTS
if [ -d "/etc/default/grub.d" ]; then for cfgfile in /etc/default/grub.d/*.cfg; do echo '' > \\\${cfgfile}; done; fi
if [ -f /etc/grub.d/05_debian_theme ]; then chmod 0644 /etc/grub.d/05_debian_theme; fi
if [ "${install_type}" == "image" ] && [ -f /etc/grub.d/30_uefi-firmware ]; then chmod 0644 /etc/grub.d/30_uefi-firmware; fi
if [ -d /boot/grub2 ]; then
	grub2-mkconfig -o /boot/grub2/grub.cfg
	if [ "${distro}" == "AlmaLinux" ] || [ "${distro}" == "RockyLinux" ]; then exit 0; fi
	if [ "${distro}" == "openSUSE" ]; then
		shim-install --no-nvram
		exit 0
	fi
else
	if [ ! -z \\\$(command -v debconf-set-selections) ]; then
		echo "grub-efi-amd64 grub2/update_nvram boolean false" | debconf-set-selections
		echo "grub-efi-amd64 grub-efi/install_devices multiselect /dev/disk/by-uuid/\\\$(blkid -s UUID -o value "${efi_partition}")" | debconf-set-selections
		if [ "${distro}" != "Proxmox" ]; then dpkg-divert --divert /usr/sbin/grub-install.real --rename /usr/sbin/grub-install; fi
		cat >/usr/sbin/grub-install <<'GRUBINSTALL'
#!/bin/sh
grub-install.real "\\\$@"
if [ -f /boot/efi/EFI/"${bootloader_id}"/mmx64.efi ] && [ ! -f /boot/efi/EFI/BOOT/mmx64.efi ]; then cp /boot/efi/EFI/"${bootloader_id}"/mmx64.efi /boot/efi/EFI/BOOT/mmx64.efi; fi
GRUBINSTALL
		chmod 0755 /usr/sbin/grub-install
		if grub-install --help | grep -q force-extra-removable; then
			echo "grub-efi-amd64 grub2/force_efi_extra_removable boolean true" | debconf-set-selections
			grub-install --target=x86_64-efi --efi-directory=/boot/efi --no-nvram --force-extra-removable
		else
			grub-install --target=x86_64-efi --efi-directory=/boot/efi --no-nvram
		fi
	elif [ -f /usr/share/grub/sbat.csv ]; then
		if [ "${distro}" == "Arch" ] || [ "${distro}" == "Artix" ] || [ "${distro}" == "Manjaro" ] || [ "${distro}" == "SteamOS" ]; then
			pacman -Syu --noconfirm git fakeroot
			git clone https://aur.archlinux.org/shim-signed.git /tmp/shim-signed
			chown -R 'nobody':'nobody' /tmp/shim-signed
			su -s /bin/bash nobody -c "cd /tmp/shim-signed && makepkg -s"
			yes | pacman -U /tmp/shim-signed/*.pkg.tar.*
			mkdir -p /etc/pacman.d/hooks
			cat >/etc/pacman.d/hooks/99-secureboot-grub.hook <<PACMANHOOK
[Trigger]
Operation = Install
Operation = Upgrade
Type = File
Target = usr/lib/grub/*

[Action]
Description = Installing GRUB with grub-install
Depends = grub
When = PostTransaction
Exec = /bin/sh -c secureboot-install
PACMANHOOK
			cat >/usr/sbin/secureboot-install <<'SECUREBOOTINSTALL'
#!/bin/bash
set -e
grub-install --target=x86_64-efi --efi-directory=/boot/efi --no-nvram --sbat=/usr/share/grub/sbat.csv --modules="all_video boot btrfs cat chain configfile echo efifwsetup efinet ext2 fat font gettext gfxmenu gfxterm gfxterm_background gzio halt help hfsplus iso9660 jpeg keystatus linux loadenv loopback ls lsefi lsefimmap lsefisystab lssal memdisk minicmd normal ntfs part_apple part_msdos part_gpt password_pbkdf2 png probe reboot regexp search search_fs_uuid search_fs_file search_label sleep smbios squash4 terminal test true video xfs zfs zfscrypt zfsinfo"
mkdir -p /boot/efi/EFI/BOOT
cp /boot/efi/EFI/"${bootloader_id}"/grubx64.efi /boot/efi/EFI/BOOT/grubx64.efi
cp /usr/share/shim-signed/shimx64.efi /boot/efi/EFI/BOOT/BOOTX64.EFI
cp /usr/share/shim-signed/shimx64.efi /boot/efi/EFI/"${bootloader_id}"/shimx64.efi
cp /usr/share/shim-signed/mmx64.efi /boot/efi/EFI/BOOT/mmx64.efi
cp /usr/share/shim-signed/mmx64.efi /boot/efi/EFI/"${bootloader_id}"/mmx64.efi
if [ ! -z "\\\$(command -v sbverify)" ] && [ ! -z "\\\$(command -v sbattach)" ] && [ ! -z "\\\$(command -v sbsign)" ]; then
	for grubefi in \\\$(find /boot/efi -iname "grubx64.efi"); do
		for sig in \\\$(sbverify --list \\\$grubefi | grep '^signature' | sed 's@signature @@g' | sort -r); do sbattach --signum \\\$sig --remove \\\$grubefi; done
		sbsign --key /etc/secureboot_key/MOK.key --cert /etc/secureboot_key/MOK.crt --output \\\$grubefi \\\$grubefi
	done
fi
SECUREBOOTINSTALL
			chmod 0755 /usr/sbin/secureboot-install
			secureboot-install
		else
			grub-install --target=x86_64-efi --efi-directory=/boot/efi --no-nvram --removable --sbat=/usr/share/grub/sbat.csv --modules="all_video boot btrfs cat chain configfile echo efifwsetup efinet ext2 fat font gettext gfxmenu gfxterm gfxterm_background gzio halt help hfsplus iso9660 jpeg keystatus linux loadenv loopback ls lsefi lsefimmap lsefisystab lssal memdisk minicmd normal ntfs part_apple part_msdos part_gpt password_pbkdf2 png probe reboot regexp search search_fs_uuid search_fs_file search_label sleep smbios squash4 terminal test true video xfs zfs zfscrypt zfsinfo"
		fi
	else
		grub-install --target=x86_64-efi --efi-directory=/boot/efi --no-nvram --removable --modules="all_video boot btrfs cat chain configfile echo efifwsetup efinet ext2 fat font gettext gfxmenu gfxterm gfxterm_background gzio halt help hfsplus iso9660 jpeg keystatus linux loadenv loopback ls lsefi lsefimmap lsefisystab lssal memdisk minicmd normal ntfs part_apple part_msdos part_gpt password_pbkdf2 png probe reboot regexp search search_fs_uuid search_fs_file search_label sleep smbios squash4 terminal test true video xfs zfs zfscrypt zfsinfo"
	fi
	mkdir -p /boot/grub
	grub-mkconfig -o /boot/grub/grub.cfg
fi
for grubefi in \\\$(find /boot/efi -iname "grubx64.efi"); do
	for sig in \\\$(sbverify --list "\\\$grubefi" | grep '^signature' | sed 's@signature @@g' | sort -r); do sbattach --signum "\\\$sig" --remove "\\\$grubefi"; done
	sbsign --key /etc/secureboot_key/MOK.key --cert /etc/secureboot_key/MOK.crt --output "\\\$grubefi" "\\\$grubefi"
done
find /boot/efi -type f -iname fbx64.efi -exec rm {} \;
find /boot/efi -type f -iname bootx64.csv -exec rm {} \;
REINSTALLBOOTLOADER
chmod 0755 /usr/sbin/reinstall-bootloader
reinstall-bootloader
if [ -z "\$(find /boot/efi/EFI/BOOT/BOOTX64.EFI 2> /dev/null)" ]; then echo "Warning: The bootloader is not installed in the removable path."; fi
if [ -z "\$(find /boot/efi/EFI/"${bootloader_id}"/"${bootloader_name}" 2> /dev/null)" ]; then echo "The bootloader is not correctly installed"; exit 1; fi
INSTALLEFI
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_bootloader
}

generate_install_live()
{
if [ ! "${live}" == "Yes" ]; then return; fi
cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_live <<INSTALLLIVE
#!/bin/bash
set -e
echo "live ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
cat >/etc/lightdm/lightdm.conf <<'LIVEAUTOLOGIN'
[Seat:*]
autologin-user=live
autologin-session=cinnamon
LIVEAUTOLOGIN
cat >/usr/bin/linuxloops <<'LIVELAUNCHER'
#!/bin/bash
set -e
sudo curl -L https://raw.githubusercontent.com/sebanc/linuxloops/main/linuxloops -o /usr/bin/linuxloops.real || zenity --height=480 --width=640 --title="LinuxLoops installer" --error --text="Please make sure you have internet connectivity before running this program.\n"
sudo chmod 0755 /usr/bin/linuxloops.real
sudo bash /usr/bin/linuxloops.real "\${@}"
LIVELAUNCHER
chmod 0755 /usr/bin/linuxloops
cat >/usr/share/applications/linuxloops.desktop <<'LIVEICON'
[Desktop Entry]
Name=Linuxloops installer
Exec=linuxloops
Icon=system-software-install
Terminal=true
Type=Application
StartupNotify=false
LIVEICON
chmod 0755 /usr/share/applications/linuxloops.desktop
INSTALLLIVE
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/install_live
}

generate_cleanup()
{
cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/cleanup <<CLEANUP
#!/bin/bash
set -e
if [ ! -z "\$(command -v apt)" ]; then
	yes | DEBIAN_FRONTEND=noninteractive apt autoremove
	rm -f /etc/apt/apt.conf.d/99linuxloops
elif [ ! -z "\$(command -v dnf)" ]; then
	dnf autoremove -y
elif [ ! -z "\$(command -v emerge)" ]; then
	emerge --depclean
elif [ ! -z "\$(command -v zypper)" ]; then
	sed -i 's@solver.onlyRequires = true@# solver.onlyRequires = false@g' /etc/zypp/zypp.conf
fi
rm -f /usr/share/xsessions/lightdm-xsession.desktop
CLEANUP
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/cleanup
}

generate_selinux_fix()
{
if [ "${distro}" != "AlmaLinux" ] && [ "${distro}" != "Fedora" ] && [ "${distro}" != "RockyLinux" ]; then return; fi
cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/selinux_fix <<SELINUXFIX
#!/bin/bash
set -e
echo "Please wait while selinux permissions are being applied..."
touch /.autorelabel
if [ ! -z "${swap_size}" ] && [ "${swap_size}" -ne 0 ]; then
	mkdir -p /var/swap
	truncate -s 0 /var/swap/swapfile
	setfiles -c /etc/selinux/targeted/policy/policy.* /etc/selinux/targeted/contexts/files/file_contexts /
	chcon -h system_u:object_r:swapfile_t:s0 /var/swap/swapfile
else
	setfiles -c /etc/selinux/targeted/policy/policy.* /etc/selinux/targeted/contexts/files/file_contexts /
fi
SELINUXFIX
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/selinux_fix
}

generate_create_swap()
{
cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/create_swap <<CREATESWAP
#!/bin/bash
set -e
echo "Please wait while the swap file is being generated..."
mkdir -p /mnt/var/swap
truncate -s 0 /mnt/var/swap/swapfile
if [ "${fstype}" == "btrfs" ]; then chattr +C /mnt/var/swap/swapfile; fi
fallocate -l "${swap_size}"G /mnt/var/swap/swapfile
chmod 0600 /mnt/var/swap/swapfile
mkswap /mnt/var/swap/swapfile
CREATESWAP
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/create_swap
}

generate_efi_entry()
{
cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/efi_entry <<EFIENTRY
#!/bin/bash
set -e
if ! mountpoint -q /sys/firmware/efi/efivars; then exit 0; fi
if [ "${distro}" == "Brunch" ] || [ "${distro}" == "ChromeOS-Flex" ] || [ "${distro}" == "Tails" ]; then
	if [ "${install_type}" == "disk" ] && [ -f /sys/block/\$(echo "${destination}" | sed 's@/dev/@@g')/removable ] && [ "\$(cat /sys/block/\$(echo "${destination}" | sed 's@/dev/@@g')/removable)" -eq 0 ] && [ ! -z \$(command -v efibootmgr) ]; then
		echo "Creating EFI boot manager entry..."
		if [ "${distro}" == "Brunch" ] || [ "${distro}" == "ChromeOS-Flex" ]; then
			efibootmgr -c -d "${destination}" -p 12 -L "${distro}" -l "\efi\\${bootloader_id}\\${bootloader_name}"
		else
			efibootmgr -c -d "${destination}" -p 1 -L "${distro}" -l "\efi\\${bootloader_id}\\${bootloader_name}"
		fi
	fi
else
	if [ "${install_type}" == "disk" ] && [ -f /sys/block/\$(echo "${destination}" | sed 's@/dev/@@g')/removable ] && [ "\$(cat /sys/block/\$(echo "${destination}" | sed 's@/dev/@@g')/removable)" -eq 0 ] && [ ! -z \$(command -v efibootmgr) ]; then
		echo "Creating EFI boot manager entry..."
		efibootmgr -c -d "${destination}" -p 1 -L "${distro}" -l "\efi\\${bootloader_id}\\${bootloader_name}"
	fi
fi
EFIENTRY
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/efi_entry
}

generate_exit_chroot()
{
if [ "${distro}" == "Brunch" ] || [ "${distro}" == "ChromeOS-Flex" ] || [ "${distro}" == "Tails" ]; then return; fi
cat >"${linuxloopsdir}"/chroot/bootstrap/linuxloops/bootstrap_exit <<EXITCHROOT
#!/bin/bash
export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
export LD_LIBRARY_PATH=/usr/local/lib64:/usr/local/lib:/usr/lib64:/usr/lib:/lib64:/lib
for ROOT in \$(find /proc/*/root 2>/dev/null); do
	LINK="\$(readlink -f \${ROOT})"
	if echo "\${LINK}" | grep -q /mnt; then
		PID=\$(basename \$(dirname "\${ROOT}"))
		kill -9 \${PID}
	fi
done
sleep 5
if mountpoint -q /mnt/etc/resolv.conf; then umount /mnt/etc/resolv.conf; fi
if mountpoint -q /mnt/linuxloops; then umount /mnt/linuxloops; fi
rm -rf /mnt/linuxloops
if mountpoint -q /mnt/tmp; then umount /mnt/tmp; fi
if mountpoint -q /mnt/run; then umount /mnt/run; fi
if mountpoint -q /mnt/dev/shm; then umount /mnt/dev/shm; fi
if mountpoint -q /mnt/dev/pts; then umount /mnt/dev/pts; fi
if mountpoint -q /mnt/dev; then umount /mnt/dev; fi
if mountpoint -q /mnt/sys; then umount /mnt/sys; fi
if mountpoint -q /mnt/proc; then umount /mnt/proc; fi
if mountpoint -q /mnt/var/swap; then umount /mnt/var/swap; fi
if mountpoint -q /mnt/home; then umount /mnt/home; fi
if mountpoint -q /mnt/boot/efi; then umount /mnt/boot/efi; fi
if [ -f /linuxloops/efi_loop ]; then losetup -d \$(cat /linuxloops/efi_loop); fi
if mountpoint -q /mnt/boot; then umount /mnt/boot; fi
if [ -f /linuxloops/boot_loop ]; then losetup -d \$(cat /linuxloops/boot_loop); fi
if mountpoint -q /mnt; then umount /mnt; fi
if [ -b /dev/mapper/luks-"\$(blkid -s UUID -o value "${root_partition}")" ]; then cryptsetup luksClose luks-"\$(blkid -s UUID -o value "${root_partition}")"; fi
EXITCHROOT
chmod 0755 "${linuxloopsdir}"/chroot/bootstrap/linuxloops/bootstrap_exit
}

end_bootstrap()
{
for ROOT in $(find /proc/*/root 2>/dev/null); do
	LINK="$(readlink -f ${ROOT})"
	if echo "${LINK}" | grep -q "${linuxloopsdir}"/chroot; then
		PID=$(basename $(dirname "${ROOT}"))
		kill -9 ${PID}
	fi
done
sleep 5
if mountpoint -q "${linuxloopsdir}"/chroot/bootstrap/isomount/data; then umount "${linuxloopsdir}"/chroot/bootstrap/isomount/data; fi
if mountpoint -q "${linuxloopsdir}"/chroot/bootstrap/isomount/efi; then umount "${linuxloopsdir}"/chroot/bootstrap/isomount/efi; fi
if mountpoint -q "${linuxloopsdir}"/chroot/bootstrap/isomount/roota; then umount "${linuxloopsdir}"/chroot/bootstrap/isomount/roota; fi
if mountpoint -q "${linuxloopsdir}"/chroot/bootstrap/isomount/rootc; then umount "${linuxloopsdir}"/chroot/bootstrap/isomount/rootc; fi
if mountpoint -q "${linuxloopsdir}"/chroot/bootstrap/isomount/tmp; then umount "${linuxloopsdir}"/chroot/bootstrap/isomount/tmp; fi
if mountpoint -q "${linuxloopsdir}"/chroot/bootstrap/isomount; then umount "${linuxloopsdir}"/chroot/bootstrap/isomount; fi
if mountpoint -q "${linuxloopsdir}"/chroot/bootstrap/mnt/etc/resolv.conf; then umount "${linuxloopsdir}"/chroot/bootstrap/mnt/etc/resolv.conf; fi
if mountpoint -q "${linuxloopsdir}"/chroot/bootstrap/mnt/linuxloops; then umount "${linuxloopsdir}"/chroot/bootstrap/mnt/linuxloops; fi
if mountpoint -q "${linuxloopsdir}"/chroot/bootstrap/mnt/tmp; then umount "${linuxloopsdir}"/chroot/bootstrap/mnt/tmp; fi
if mountpoint -q "${linuxloopsdir}"/chroot/bootstrap/mnt/run; then umount "${linuxloopsdir}"/chroot/bootstrap/mnt/run; fi
if mountpoint -q "${linuxloopsdir}"/chroot/bootstrap/mnt/dev/shm; then umount "${linuxloopsdir}"/chroot/bootstrap/mnt/dev/shm; fi
if mountpoint -q "${linuxloopsdir}"/chroot/bootstrap/mnt/dev/pts; then umount "${linuxloopsdir}"/chroot/bootstrap/mnt/dev/pts; fi
if mountpoint -q "${linuxloopsdir}"/chroot/bootstrap/mnt/dev; then umount "${linuxloopsdir}"/chroot/bootstrap/mnt/dev; fi
if mountpoint -q "${linuxloopsdir}"/chroot/bootstrap/mnt/sys; then umount "${linuxloopsdir}"/chroot/bootstrap/mnt/sys; fi
if mountpoint -q "${linuxloopsdir}"/chroot/bootstrap/mnt/proc; then umount "${linuxloopsdir}"/chroot/bootstrap/mnt/proc; fi
if mountpoint -q "${linuxloopsdir}"/chroot/bootstrap/mnt/var/swap; then umount "${linuxloopsdir}"/chroot/bootstrap/mnt/var/swap; fi
if mountpoint -q "${linuxloopsdir}"/chroot/bootstrap/mnt/home; then umount "${linuxloopsdir}"/chroot/bootstrap/mnt/home; fi
if mountpoint -q "${linuxloopsdir}"/chroot/bootstrap/mnt/boot/efi; then umount "${linuxloopsdir}"/chroot/bootstrap/mnt/boot/efi; fi
if mountpoint -q "${linuxloopsdir}"/chroot/bootstrap/mnt/boot; then umount "${linuxloopsdir}"/chroot/bootstrap/mnt/boot; fi
if mountpoint -q "${linuxloopsdir}"/chroot/bootstrap/mnt; then umount "${linuxloopsdir}"/chroot/bootstrap/mnt; fi
if mountpoint -q "${linuxloopsdir}"/chroot/bootstrap/etc/resolv.conf; then umount "${linuxloopsdir}"/chroot/bootstrap/etc/resolv.conf; fi
if mountpoint -q "${linuxloopsdir}"/chroot/bootstrap/tmp; then umount "${linuxloopsdir}"/chroot/bootstrap/tmp; fi
if mountpoint -q "${linuxloopsdir}"/chroot/bootstrap/run; then umount "${linuxloopsdir}"/chroot/bootstrap/run; fi
if mountpoint -q "${linuxloopsdir}"/chroot/bootstrap/dev/shm; then umount "${linuxloopsdir}"/chroot/bootstrap/dev/shm; fi
if mountpoint -q "${linuxloopsdir}"/chroot/bootstrap/dev/pts; then umount "${linuxloopsdir}"/chroot/bootstrap/dev/pts; fi
if mountpoint -q "${linuxloopsdir}"/chroot/bootstrap/dev; then umount "${linuxloopsdir}"/chroot/bootstrap/dev; fi
if mountpoint -q "${linuxloopsdir}"/chroot/bootstrap/sys/firmware/efi/efivars; then umount "${linuxloopsdir}"/chroot/bootstrap/sys/firmware/efi/efivars; fi
if mountpoint -q "${linuxloopsdir}"/chroot/bootstrap/sys; then umount "${linuxloopsdir}"/chroot/bootstrap/sys; fi
if mountpoint -q "${linuxloopsdir}"/chroot/bootstrap/proc; then umount "${linuxloopsdir}"/chroot/bootstrap/proc; fi
if mountpoint -q "${linuxloopsdir}"/chroot/bootstrap; then umount "${linuxloopsdir}"/chroot/bootstrap; fi
if mountpoint -q "${linuxloopsdir}"/chroot; then umount "${linuxloopsdir}"/chroot; fi
rm -rf "${linuxloopsdir}"/*
}

exit_with_error()
{
if [ ! -z "${zenity}" ]; then
	zenity --height=480 --width=640 --title="LinuxLoops installer" --error --text "${1}\nInstallation failed."
else
	echo -e "${1}\nInstallation failed."
fi
exit 1
}

download_bootstrap()
{
if [ "${1}" == "iso" ]; then
	echo "Trying to download iso image from ${2}..."
	if curl -L --output /dev/null --silent --head --fail "${2}"; then
		curl -L "${2}" -o "${linuxloopsdir}"/"${distro}".iso
		if [ ! -z "${4}" ]; then
			mkdir -p "${linuxloopsdir}"/chroot/bootstrap/linuxloops "${linuxloopsdir}"/iso/rootfs "${linuxloopsdir}"/iso/level1 "${linuxloopsdir}"/iso/level2
			mount "${linuxloopsdir}"/"${distro}".iso "${linuxloopsdir}"/iso/level2
			mount "${linuxloopsdir}"/iso/level2"${3}" "${linuxloopsdir}"/iso/level1
			mount "${linuxloopsdir}"/iso/level1"${4}" "${linuxloopsdir}"/iso/rootfs
			cp -aT "${linuxloopsdir}"/iso/rootfs "${linuxloopsdir}"/chroot/bootstrap
			if [ "${distro}" == "Qubes" ]; then
				mkdir -p "${linuxloopsdir}"/chroot/bootstrap/source
				cp -a "${linuxloopsdir}"/iso/level2/Packages "${linuxloopsdir}"/chroot/bootstrap/source/
				cp -a "${linuxloopsdir}"/iso/level2/repodata "${linuxloopsdir}"/chroot/bootstrap/source/
			fi
			umount "${linuxloopsdir}"/iso/rootfs
			umount "${linuxloopsdir}"/iso/level1
			umount "${linuxloopsdir}"/iso/level2
		elif  [ ! -z "${3}" ]; then
			mkdir -p "${linuxloopsdir}"/chroot/bootstrap/linuxloops "${linuxloopsdir}"/iso/rootfs "${linuxloopsdir}"/iso/level1
			mount "${linuxloopsdir}"/"${distro}".iso "${linuxloopsdir}"/iso/level1
			mount "${linuxloopsdir}"/iso/level1"${3}" "${linuxloopsdir}"/iso/rootfs
			cp -aT "${linuxloopsdir}"/iso/rootfs "${linuxloopsdir}"/chroot/bootstrap
			umount "${linuxloopsdir}"/iso/rootfs
			umount "${linuxloopsdir}"/iso/level1
		else
			mkdir -p "${linuxloopsdir}"/chroot/bootstrap/linuxloops "${linuxloopsdir}"/iso/rootfs
			mount "${linuxloopsdir}"/"${distro}".iso "${linuxloopsdir}"/iso/rootfs
			cp -aT "${linuxloopsdir}"/iso/rootfs "${linuxloopsdir}"/chroot/bootstrap
			umount "${linuxloopsdir}"/iso/rootfs	
		fi
		rm "${linuxloopsdir}"/"${distro}".iso
		return 0
	else
		echo "Downloading iso image from ${2} failed."
	fi
elif [ "${1}" == "lxc" ]; then
	available_builds=$(curl -L https://us.lxd.images.canonical.com/images/"${2}"/"${3}"/amd64/"${4}"/ | grep 'alt="\[DIR]"' | tr '>' '\n' | grep '<a href' | cut -d'/' -f 2 | sort -r)
	for build in $available_builds; do
		echo "Trying to download lxc image from https://us.lxd.images.canonical.com/images/${2}/${3}/amd64/${4}/${build}/rootfs.tar.xz..."
		if curl -L --output /dev/null --silent --head --fail https://us.lxd.images.canonical.com/images/"${2}"/"${3}"/amd64/"${4}"/"${build}"/rootfs.tar.xz; then
			curl -L https://us.lxd.images.canonical.com/images/"${2}"/"${3}"/amd64/"${4}"/"${build}"/rootfs.tar.xz -o "${linuxloopsdir}"/"${2}".tar.xz
			if ! xz -t "${linuxloopsdir}"/"${2}".tar.xz; then rm -f "${linuxloopsdir}"/"${2}".tar.xz; continue; fi
			mkdir -p "${linuxloopsdir}"/chroot/bootstrap/linuxloops
			tar xf "${linuxloopsdir}"/"${2}".tar.xz -C "${linuxloopsdir}"/chroot/bootstrap
			rm "${linuxloopsdir}"/"${2}".tar.xz
			return 0
		else
			echo "Downloading lxc image from https://us.lxd.images.canonical.com/images/${2}/${3}/amd64/${4}/${build}/rootfs.tar.xz failed."
		fi
	done
fi
exit_with_error "The bootstrap image could not be downloaded, the LXC images server might be down."
}

init_bootstrap()
{
return_value=0
download_bootstrap $bootstrap
mount --bind "${linuxloopsdir}"/chroot "${linuxloopsdir}"/chroot
mount --make-slave "${linuxloopsdir}"/chroot
mount --bind "${linuxloopsdir}"/chroot/bootstrap "${linuxloopsdir}"/chroot/bootstrap
mount --make-slave "${linuxloopsdir}"/chroot/bootstrap
mount --bind "${linuxloopsdir}"/chroot "${linuxloopsdir}"/chroot/bootstrap/mnt
mount -t proc none "${linuxloopsdir}"/chroot/bootstrap/proc
mount -t sysfs none "${linuxloopsdir}"/chroot/bootstrap/sys
if mountpoint -q /sys/firmware/efi/efivars; then mount --bind /sys/firmware/efi/efivars "${linuxloopsdir}"/chroot/bootstrap/sys/firmware/efi/efivars; fi
mount -t devtmpfs none "${linuxloopsdir}"/chroot/bootstrap/dev
mount -t devpts none "${linuxloopsdir}"/chroot/bootstrap/dev/pts
mount -t tmpfs -o mode=1777 none "${linuxloopsdir}"/chroot/bootstrap/dev/shm
mount -t tmpfs none "${linuxloopsdir}"/chroot/bootstrap/run
mount -t tmpfs -o mode=1777 none "${linuxloopsdir}"/chroot/bootstrap/tmp
cp /etc/hostname "${linuxloopsdir}"/chroot/bootstrap/etc/hostname
cp /etc/hosts "${linuxloopsdir}"/chroot/bootstrap/etc/hosts
rm -f "${linuxloopsdir}"/chroot/bootstrap/etc/resolv.conf
touch "${linuxloopsdir}"/chroot/bootstrap/etc/resolv.conf
mount --bind /etc/resolv.conf "${linuxloopsdir}"/chroot/bootstrap/etc/resolv.conf
chroot_$(echo "${distro}" | sed 's@[ !]@@g') || (return_value=1 && return)
generate_bootstrap_init
generate_partition_script
generate_setup_and_mount_rootfs
generate_mount_efi
generare_enter_chroot
generate_install_settings
generate_install_secureboot
generate_install_surface
generate_install_nvidia
generate_install_fstab
generate_install_initramfs
generate_install_bootloader
generate_cleanup
generate_selinux_fix
generate_install_live
generate_create_swap
generate_efi_entry
generate_exit_chroot
chroot "${linuxloopsdir}"/chroot/bootstrap /linuxloops/bootstrap_init || return_value=1
if [ "${return_value}" -eq 0 ] && [ "${install_type}" == "image" ] && [ -f "${linuxloopsdir}"/chroot/bootstrap/mnt/etc/secureboot_key/MOK.der ]; then cp "${linuxloopsdir}"/chroot/bootstrap/mnt/etc/secureboot_key/MOK.der "${fullpath}".der; chown ${SUDO_UID}:${SUDO_UID} "${fullpath}".der; fi
if [ -x "${linuxloopsdir}"/chroot/bootstrap/linuxloops/bootstrap_exit ]; then chroot "${linuxloopsdir}"/chroot/bootstrap /linuxloops/bootstrap_exit || return_value=1; fi
end_bootstrap
}

start_install()
{
if mountpoint -q "${linuxloopsdir}"/chroot; then echo "Linuxloops chroot directory is already mounted, please reboot your computer before trying again..."; exit 1; fi
rm -rf "${linuxloopsdir}"/chroot
mkdir -p "${linuxloopsdir}"/chroot
if [ "${install_type}" == "disk" ]; then
	for i in ls "${fullpath}"?*; do
		umount ${i} > /dev/null 2>&1
		ret="${?}"
		if [ ! "${ret}" -eq 0 ] && [ ! "${ret}" -eq 32 ]; then exit_with_error "Automatic unmounting of partitions failed with error ${ret}. Please unmount all device partitions manually and try again."; fi
	done
	destination_device="${fullpath}"
	if (expr match "${fullpath}" ".*[0-9]$" >/dev/null); then
		partition_path="${destination_device}"p
	else
		partition_path="${destination_device}"
	fi
	
else
	echo -n > "${fullpath}"
	partition_format="$(df -T "${fullpath}" | tail -1 | cut -d' ' -f2)"
	echo "Creating image file on ${partition_format} partition."
	if [ ! -z "${wsl}" ]; then
		dd if=/dev/urandom of="${fullpath}" bs=1M count=${install_sizeMB} status=progress || exit_with_error "The image file could not be created."
	elif [ -d /home/runner/work ] || [ "${partition_format}" == "ext4" ]; then
		fallocate -l "${install_sizeMB}"M "${fullpath}" || exit_with_error "The image file could not be created."
	elif [ "${partition_format}" == "btrfs" ]; then
		chattr +C "${fullpath}"
		chattr -c "${fullpath}"
		dd if=/dev/urandom of="${fullpath}" bs=1M count=${install_sizeMB} status=progress || exit_with_error "The image file could not be created."
	else
		dd if=/dev/urandom of="${fullpath}" bs=1M count=${install_sizeMB} status=progress || exit_with_error "The image file could not be created."
	fi
	chown ${SUDO_UID}:${SUDO_UID} "${fullpath}"
	destination_device="$(losetup --show -fP "${fullpath}")" || exit_with_error "losetup command failed."
	partition_path="${destination_device}"p
fi
efi_partition="${partition_path}"1
boot_partition="${partition_path}"2
root_partition="${partition_path}"3
init_bootstrap
if [ "${install_type}" == "image" ]; then losetup -d "${destination_device}"; fi
return "${return_value}"
}

grub_config()
{
if [ ! -z "${wsl}" ]; then
	img_uuid=$(sudo -u ${SUDO_USER} /mnt/c/Windows/System32/mountvol.exe $(echo ${fullpath:5:1} | tr a-z A-Z): /L | cut -d'{' -f2 | cut -d'}' -f1)
else
	img_uuid=$(blkid -s PARTUUID -o value "$(df "${fullpath}" --output=source | sed 1d)")
fi
img_path=$(if [ $(findmnt -n -o TARGET -T ${fullpath}) == "/" ]; then echo "$(realpath ${fullpath})"; else echo "$(realpath ${fullpath})" | sed "s#$(findmnt -n -o TARGET -T ${fullpath})##g"; fi)
if [ "$(df -T "${fullpath}" | tail -1 | cut -d' ' -f2)" == "btrfs" ] && [ ! -z $(command -v btrfs) ]; then img_subvol="$(btrfs subvolume show $(findmnt -n -o TARGET -T ${fullpath}) | grep Name: | sed 's@\t\| @@g' | cut -d':' -f2)"; fi
if [ ! -z "${img_subvol}" ]; then img_path="/${img_subvol}${img_path}"; fi
if [ -z "${wsl}" ] && ([ "$(grep -o '^ID=[^,]\+' /etc/os-release | cut -d'=' -f2)" == "ubuntu" ] || [ "$(grep -o '^ID=[^,]\+' /etc/os-release | cut -d'=' -f2)" == "linuxmint" ] || [ "$(grep -o '^ID=[^,]\+' /etc/os-release | cut -d'=' -f2)" == "fedora" ] || [ "$(grep -o '^ID=[^,]\+' /etc/os-release | cut -d'=' -f2)" == "zorin" ]); then remove_tpm="\n	rmmod tpm"; fi
if [ "${distro}" == "Brunch" ]; then
config="submenu '${distro}' {
menuentry '${distro}' --class '${distro}' {${remove_tpm}
	img_path=\"${img_path}\"
	img_uuid=\"${img_uuid}\"
	search --no-floppy --set=root --file \${img_path}
	loopback loop \${img_path}
	source (loop,12)/efi/boot/settings.cfg
	if [ -z \${verbose} ] -o [ \${verbose} -eq 0 ]; then
		linux (loop,7)\${kernel} boot=local noresume noswap loglevel=7 options=\${options} chromeos_bootsplash=\${chromeos_bootsplash} \${cmdline_params} \\
			cros_secure cros_debug img_uuid=\${img_uuid} img_path=\${img_path} \\
			console= vt.global_cursor_default=0 brunch_bootsplash=\${brunch_bootsplash} quiet
	else
		linux (loop,7)\${kernel} boot=local noresume noswap loglevel=7 options=\${options} chromeos_bootsplash=\${chromeos_bootsplash} \${cmdline_params} \\
			cros_secure cros_debug img_uuid=\${img_uuid} img_path=\${img_path}
	fi
	initrd (loop,7)/lib/firmware/amd-ucode.img (loop,7)/lib/firmware/intel-ucode.img (loop,7)/initramfs.img
}
menuentry '${distro} settings' --class '${distro}-settings' {${remove_tpm}
	img_path=\"${img_path}\"
	img_uuid=\"${img_uuid}\"
	search --no-floppy --set=root --file \${img_path}
	loopback loop \${img_path}
	source (loop,12)/efi/boot/settings.cfg
	linux (loop,7)/kernel boot=local noresume noswap loglevel=7 options= chromeos_bootsplash= edit_brunch_config=1 \\
		cros_secure cros_debug img_uuid=\${img_uuid} img_path=\${img_path}
	initrd (loop,7)/lib/firmware/amd-ucode.img (loop,7)/lib/firmware/intel-ucode.img (loop,7)/initramfs.img
}
}
"
elif [ "${distro}" == "ChromeOS-Flex" ]; then
config="menuentry '${distro}' --class '${distro}' {${remove_tpm}
	img_path=\"${img_path}\"
	img_uuid=\"${img_uuid}\"
	search --no-floppy --set=root --file \${img_path}
	loopback loop \${img_path}
	if [ -f (loop,7)/bootimage.cfg ]; then source (loop,7)/bootimage.cfg; fi
	if [ -z \"\${bootimage}\" ]; then bootimage=A; fi
	linux (loop,12)/syslinux/vmlinuz.\${bootimage} img_uuid=\${img_uuid} img_path=\${img_path} bootimage=\${bootimage} loop.max_part=16 ro quiet splash boot=local noresume noswap loglevel=7 console= cros_efi kvm-intel.vmentry_l1d_flush=always loadpin.enabled=0 loadpin.enforce=0 rootfstype=ramfs ${dev_mode}
	initrd (loop,7)/initramfs.img (loop,7)/firmwares.img (loop,7)/modules.img
}
"
elif [ "${distro}" == "NixOS" ]; then
config="menuentry '${distro}' --class '${distro}' {${remove_tpm}
	img_path=\"${img_path}\"
	img_uuid=\"${img_uuid}\"
	search --no-floppy --set=root --file \"\${img_path}\"
	loopback loop \"\${img_path}\"
	linuxloops_args=\"img_path=\${img_path} img_uuid=\${img_uuid}\"
	export linuxloops_args
	if [ -f (loop,2)/grub2/grub.cfg ]; then
		configfile (loop,2)/grub2/grub.cfg
	else
		configfile (loop,2)/grub/grub.cfg
	fi
}
"
elif [ "${distro}" == "Tails" ]; then
config="menuentry '${distro}' --class '${distro}' {${remove_tpm}
	img_path=\"${img_path}\"
	img_uuid=\"${img_uuid}\"
	search --no-floppy --set=root --file \"\${img_path}\"
	loopback loop \"\${img_path}\"
	linux (loop,1)/live/vmlinuz rdinit=/linuxloops img_uuid=\${img_uuid} img_path=\${img_path} boot=live live-media=/dev/loop0p1 noautologin quiet splash
	initrd (loop,1)/live/initrd.img (loop,1)/live/linuxloops.img
}
"
else
config="menuentry '${distro}' --class '${distro}' {${remove_tpm}
	img_path=\"${img_path}\"
	img_uuid=\"${img_uuid}\"
	search --no-floppy --set=root --file \"\${img_path}\"
	loopback loop \"\${img_path}\"
	linuxloops_args=\"rdinit=/linuxloops img_path=\${img_path} img_uuid=\${img_uuid}\"
	export linuxloops_args
	if [ -f (loop,2)/grub2/grub.cfg ]; then
		configfile (loop,2)/grub2/grub.cfg
	else
		configfile (loop,2)/grub/grub.cfg
	fi
}
"
fi
echo -e "${config}" > "${fullpath}".grub.txt
chown ${SUDO_UID}:${SUDO_UID} "${fullpath}".grub.txt
if [ -f ./usb_bootloader.img ]; then
	usbboot_loop=$(losetup --show -fP ./usb_bootloader.img)
	mount "${usbboot_loop}"p1 "${linuxloopsdir}"/chroot
	echo -e "set timeout=5\n"> "${linuxloopsdir}"/chroot/efi/boot/grub.cfg
	echo -e "${config}" >> "${linuxloopsdir}"/chroot/efi/boot/grub.cfg
	umount "${linuxloopsdir}"/chroot
	losetup -d ${usbboot_loop}
	finalise="The grub config to boot ${distro} has been installed in the usb_bootloader.img file. Write this file to a usb flashdrive with Rufus, dd or any other image writing tool and boot from it."
	if [ ! -z "${zenity}" ]; then
		sudo -u ${SUDO_USER} zenity --height=480 --width=640 --title="LinuxLoops installer" --info --text="${finalise}" --ok-label="Exit"
	else
		echo -e "${finalise}"
	fi
elif [ ! -z "${wsl}" ]; then
	grubinstall="The ${distro} dual boot disk image has been created and the config needed to boot ${distro} from Grub2Win has been generated in the file:\n$(echo ${fullpath:5:1} | tr a-z A-Z):\\\\$(echo ${fullpath:7} | sed 's@\/@\\\\@g').grub.txt\n\nNow, install Grub2Win and launch it, click on \"Manage Boot Menu\" -> \"Add a new entry\" -> set \"Type\" as \"Create user section\", open the file $(echo ${fullpath:5:1} | tr a-z A-Z):\\\\$(echo ${fullpath:7} | sed 's@\/@\\\\@g').grub.txt and copy its content in the Grub2Win notepad window, save and close the Grub2Win notepad window then click \"Apply\" and \"OK\"."
	finalise="Please note that ${distro} will not be bootable and / or stable if you do not perform the below actions (Refer to Windows online resources if needed):\n- Ensure that bitlocker is disabled on the drive which contains the ${distro} image or disable it.\n- Disable fast startup.\n- Disable hibernation.\n\nOnce done, reboot your computer and select ${distro} from the Grub2Win menu."
	if [ ! -z "${zenity}" ]; then
		sudo -u ${SUDO_USER} zenity --height=480 --width=640 --title="LinuxLoops installer" --info --text="${grubinstall}" --ok-label="Next"
		sudo -u ${SUDO_USER} zenity --height=480 --width=640 --title="LinuxLoops installer" --info --text="${finalise}" --ok-label="Exit"
	else
		echo -e "${grubinstall}"
		echo -e ""
		echo -e "${finalise}"
	fi
elif [ ! -z "${brunch}" ]; then
	grubinstall="The grub config needed to boot ${distro} has been generated in the file \"${fullpath}.grub.txt\".\n\n ****************************************************************************************** \n${config}\n ****************************************************************************************** \n\nNow copy the above grub config, run \"sudo edit-brunch-config -g\" and paste it (lines between stars) at the end of the file.\n\nOnce done, press CTRL+X and then ENTER to save, reboot your computer and start ${distro}"
	if [ ! -z "${zenity}" ]; then
		sudo -u ${SUDO_USER} zenity --height=480 --width=640 --title="LinuxLoops installer" --info --text="${grubinstall}" --ok-label="Exit"
	else
		echo -e "${grubinstall}"
	fi
elif [ ! -z "${chromeos}" ]; then
	source=$(blkid --match-token LABEL=EFI-SYSTEM | head -1 | cut -d':' -f1)
	mkdir -p /mnt/stateful_partition/unencrypted/linuxloops_config/tmp
	mount "${source}" /mnt/stateful_partition/unencrypted/linuxloops_config/tmp
	rm -r /mnt/stateful_partition/unencrypted/linuxloops_config/tmp/*
	curl -L https://github.com/sebanc/linuxloops/raw/main/bootloaders/chromebook_boot.tar.gz -o /home/chronos/user/Downloads/chromebook_boot.tar.gz
	tar zxf /home/chronos/user/Downloads/chromebook_boot.tar.gz -C /mnt/stateful_partition/unencrypted/linuxloops_config/tmp
	rm -f /home/chronos/user/Downloads/chromebook_boot.tar.gz
	echo -e "set timeout=5\n"> /mnt/stateful_partition/unencrypted/linuxloops_config/tmp/efi/boot/grub.cfg
	echo -e "${config}" >> /mnt/stateful_partition/unencrypted/linuxloops_config/tmp/efi/boot/grub.cfg
	umount /mnt/stateful_partition/unencrypted/linuxloops_config/tmp
	grubinstall="The grub config needed to boot ${distro} has been added to your boot partition 12, if not already done, refer to MrChromebox instructions to allow booting from legacy hdd boot (through RW_LEGACY firmware or ALT firmware), then reboot your computer and press CTRL+L to start ${distro}."
	if [ ! -z "${zenity}" ]; then
		sudo -u ${SUDO_USER} zenity --height=480 --width=640 --title="LinuxLoops installer" --info --text="${grubinstall}" --ok-label="Exit"
	else
		echo -e "${grubinstall}"
	fi
else
	if [ "$(grep -o '^ID=[^,]\+' /etc/os-release | cut -d'=' -f2)" == "fedora" ]; then grub="grub2"; else grub="grub"; fi
	grubinstall="The grub config needed to boot ${distro} has been generated in the file \"${fullpath}.grub.txt\".\n\nIf you have a linux distro installed which uses grub as bootloader, open another terminal and run the below command to generate the grub config automatically:\nsudo cat /etc/grub.d/40_custom ${fullpath}.grub.txt | sudo tee /etc/grub.d/99_linuxloops; sudo chmod 0755 /etc/grub.d/99_linuxloops; sudo ${grub}-mkconfig -o /boot/${grub}/grub.cfg\n\nOtherwise, add this grub config (lines between stars) manually to another grub bootloader:\n\n ****************************************************************************************** \n${config}\n ****************************************************************************************** \n\nOnce the above actions are completed, you can reboot your computer and start ${distro}."
	if [ ! -z "${zenity}" ]; then
		sudo -u ${SUDO_USER} zenity --height=480 --width=640 --title="LinuxLoops installer" --info --text="${grubinstall}" --ok-label="Exit"
	else
		echo -e "${grubinstall}"
	fi
fi
}

set_credentials()
{
if [ "${distro}" != "Brunch" ] && [ "${distro}" != "ChromeOS-Flex" ] && [ "${distro}" != "Tails" ]; then
	if [ "${live}" == "Yes" ]; then
		username="live"
		userpass="linuxloops"
		hostname="linuxloops"
	else
		if [ "${encryption}" == "Yes" ]; then
			encrypted_text="You have requested encryption, please input your username and the encryption password.\nYour user account password will be set as the encryption password but you can change it later."
			password_text="encryption password"
		else
			encrypted_text="Please input your username and user account password."
			password_text="user account password"
		fi
		if [ ! -z "${zenity}" ]; then
		until false; do
			form=$(sudo -u ${SUDO_USER} zenity --height=480 --width=640 --title="LinuxLoops installer" --forms --title="Create user" --text="${encrypted_text}" --add-entry="Input your username" --add-password="Input your ${password_text}" --add-password="Confirm your ${password_text}" --ok-label="Next")
			username="$(echo ${form} | cut -d'|' -f1)"
			userpass="$(echo ${form} | cut -d'|' -f2)"
			verifuserpass="$(echo ${form} | cut -d'|' -f3)"
			if [ -z "${form}" ]; then exit 0; fi
			if [ -z "${username}" ]; then sudo -u ${SUDO_USER} zenity --height=480 --width=640 --title="LinuxLoops installer" --error --text="Please define your username.\n"; continue; fi
			if [ -z "${userpass}" ]; then sudo -u ${SUDO_USER} zenity --height=480 --width=640 --title="LinuxLoops installer" --error --text="Please define a password.\n"; continue; fi
			if echo "${username}" | grep -q '^[a-z][-a-z0-9]*\$'; then sudo -u ${SUDO_USER} zenity --height=480 --width=640 --title="LinuxLoops installer" --error --text="Username contains unsupported characters.\n"; continue; fi
			if echo "${userpass}" | grep -q '[^a-zA-Z0-9!@#&$£%µ^+-\*/=~¨]'; then sudo -u ${SUDO_USER} zenity --height=480 --width=640 --title="LinuxLoops installer" --error --text="Password contains unsupported characters.\n"; continue; fi
			if [ "${userpass}" != "${verifuserpass}" ]; then sudo -u ${SUDO_USER} zenity --height=480 --width=640 --title="LinuxLoops installer" --error --text="Passwords do not match, try again.\n"; continue; fi
			break
		done
		else
		echo -e "${encrypted_text}"
		until false; do
			read -p "Please enter your username: " username
			if [ -z "${username}" ]; then echo -e "Please define your username.\n\n"; continue; fi
			if echo "${username}" | grep -q '^[a-z][-a-z0-9]*\$'; then echo -e "Username contains unsupported characters.\n\n"; continue; fi
			break
		done
		until false; do
			read -s -p "Input your ${password_text}: " userpass
			echo ""
			read -s -p "Verify your ${password_text}: " verifuserpass
			echo ""
			if [ -z "${userpass}" ]; then echo -e "Please define a password.\n\n"; continue; fi
			if echo "${userpass}" | grep -q '[^a-zA-Z0-9!@#&$£%µ^+-\*/=~¨]'; then echo -e "Password contains unsupported characters.\n\n"; continue; fi
			if [ "${userpass}" != "${verifuserpass}" ]; then echo -e "Passwords do not match, try again.\n\n"; continue; fi
			break
		done
		fi
		hostname="$(echo "${distro}" | sed 's@[ !]@@g')-${RANDOM}"
	fi
fi
}

list_array()
{
if [ "${1}" == "available_distros" ]; then for distro in "${available_distros[@]}"; do echo -e "\"${distro}\""; done; fi
if [ "${1}" == "available_desktops" ]; then for desktop in "${available_desktops[@]}"; do echo -e "\"${desktop}\""; done ; fi
if [ "${1}" == "available_locales" ]; then for i in "${!available_locales[@]}"; do if [ "${available_locales[$i]}" == "x" ]; then echo "${available_locales[$i+1]}"; fi; done; fi
if [ "${1}" == "available_keymaps" ]; then for i in "${!available_keymaps[@]}"; do if [ "${available_keymaps[$i]}" == "x" ]; then echo "${available_keymaps[$i+1]}"; fi; done; fi
if [ "${1}" == "available_timezones" ]; then for i in "${!available_timezones[@]}"; do if [ "${available_timezones[$i]}" == "x" ]; then echo "${available_timezones[$i+1]}"; fi; done; fi
if [ "${1}" == "btrfs_supported" ]; then for distro in "${btrfs_supported[@]}"; do echo -e "\"${distro}\""; done; fi
if [ "${1}" == "nvidia_supported" ]; then for distro in "${nvidia_supported[@]}"; do echo -e "\"${distro}\""; done; fi
if [ "${1}" == "surface_supported" ]; then for distro in "${surface_supported[@]}"; do echo -e "\"${distro}\""; done; fi
if [ "${1}" == "all" ]; then
	for distro in "${available_distros[@]}"; do
		echo -en "\"${distro}\" distribution:\n\tAvailable desktops:"
		list_desktops "${distro}"
		for desktop in "${available_desktops[@]}"; do
			echo -en " \"${desktop}\""
		done
		echo -en "\n\tInstall on btrfs filesystem possible: "
		if [[ ! " ${btrfs_supported[*]} " =~ " ${distro} " ]]; then echo -en "No"; else echo -en "Yes"; fi
		echo -en "\n\tNvidia proprietary driver installation possible: "
		if [[ ! " ${nvidia_supported[*]} " =~ " ${distro} " ]]; then echo -en "No"; else echo -en "Yes"; fi
		echo -en "\n\tSurface patches installation possible: "
		if [[ ! " ${surface_supported[*]} " =~ " ${distro} " ]]; then echo -en "No"; else echo -en "Yes"; fi
		echo -e '\n'
	done
fi
}

check_home_space()
{
case "${distro}" in
	'Brunch')
		available_space_needed=7
	;;
	'ChromeOS-Flex')
		available_space_needed=7
	;;
	'Qubes')
		available_space_needed=7
	;;
	'Tails')
		available_space_needed=4
	;;
	*)
		available_space_needed=1
	;;
esac
if [ $(( ($(df -k --output=avail ${HOME} | sed 1d) / 1024 / 1024) - ${available_space_needed} )) -lt 0 ]; then
	if [ ! -z "${zenity}" ]; then
		sudo -u ${SUDO_USER} zenity --height=480 --width=640 --title="LinuxLoops installer" --error --text "To install ${distro} you need ${available_space_needed} GB of available space in your home directory but you only have $(($(df -k --output=avail ${HOME} | sed 1d) / 1024 / 1024)) GB."
	else
		echo -e "To install ${distro} you need ${available_space_needed} GB of available space in your home directory but you only have $(($(df -k --output=avail ${HOME} | sed 1d) / 1024 / 1024)) GB."
	fi
	exit 1
fi
}

install_parameters()
{
if [ "${install_type}" == "disk" ]; then
	if [ ! -z "${zenity}" ]; then
		local t
		local test
		local device
		local size
		t=0
		for i in $(lsblk -drnbpf -o NAME,SIZE); do
			if [ $((t % 2)) == 0 ]; then device=${i}; fi
			if [ $((t % 2)) == 1 ]; then
				size=$((i / 1024 /1024 / 1024))
				if [ ! -z "${device}" ] && [ ! -z "${size}" ] && [ $((size - 14)) -ge 0 ] && ! echo "${device}" | grep -q "/dev/loop" && ! echo ${device} | grep -q $(basename $(realpath "/sys/class/block/$(lsblk -oMOUNTPOINT,PKNAME -rn | grep '/ ' | cut -d' ' -f2)/..")); then
					if [ "${device}" != "/dev/$(lsblk --inverse $(realpath $(df ${0} | grep '^/' | cut -d' ' -f1)) -io NAME | cut -d'-' -f2 | tail -1)" ] && [ -z "$(grep -o 'img_uuid=[^ ,]\+' /proc/cmdline | cut -d'=' -f2)" ] || ([ ! -z "$(grep -o 'img_uuid=[^ ,]\+' /proc/cmdline | cut -d'=' -f2)" ] && [ "${device}" != "/dev/$(lsblk -ndo pkname $(blkid --match-token PARTUUID=$(grep -o 'img_uuid=[^ ,]\+' /proc/cmdline | cut -d'=' -f2) | cut -d':' -f1))" ]); then test="${test} radio ${device} ${size}"; fi
				fi
			fi
			t=$((t + 1))
		done
		destination=$(sudo -u ${SUDO_USER} zenity --height=480 --width=640 --title="LinuxLoops installer" --list --radiolist --text "Select the drive that you want to use for installation." --column "Select" --column "Device" --column "Size (in GB)" ${test} --ok-label="Next")
		if [ -z "${destination}" ]; then exit 1; fi
		fullpath="${destination}"
		install_size=$(sudo -u ${SUDO_USER} zenity --height=480 --width=640 --title="LinuxLoops installer" --scale --text "This device has $(( ($(lsblk -drnbpf -o SIZE ${destination}) / 1024 /1024 / 1024) )) GB available.\n How much would you like to allocate for ${distro} ?\n" --min-value=14 --max-value=$(( ($(lsblk -drnbpf -o SIZE ${destination}) / 1024 /1024 / 1024) )) --value=14 --step 1 --ok-label="Next")
		if [ -z "${install_size}" ]; then exit 1; fi
		if [ "${install_size}" -eq $(( ($(lsblk -drnbpf -o SIZE ${destination}) / 1024 /1024 / 1024) )) ]; then install_sizeMB=$(( ($(lsblk -drnbpf -o SIZE ${destination}) / 1024 /1024) )); else install_sizeMB=$((install_size*1024)); fi
		if [ "${distro}" != "Brunch" ] && [ "${distro}" != "ChromeOS-Flex" ] && [ "${distro}" != "Tails" ]; then
			locale=$(sudo -u ${SUDO_USER} zenity --height=480 --width=640 --title="LinuxLoops installer" --list --radiolist --text "Please select your locale (language / formats)." --column "Select" --column "Locale" --column "Description" "${available_locales[@]}" --ok-label="Next")
			if [ -z "${locale}" ]; then exit 1; fi
			keymap=$(sudo -u ${SUDO_USER} zenity --height=480 --width=640 --title="LinuxLoops installer" --list --radiolist --text "Please select your keyboard layout." --column "Select" --column "Keymap" --column "Description" "${available_keymaps[@]}" --ok-label="Next")
			if [ -z "${keymap}" ]; then exit 1; fi
			timezone=$(sudo -u ${SUDO_USER} zenity --height=480 --width=640 --title="LinuxLoops installer" --list --radiolist --text "Please select your timezone." --column "Select" --column "Timezone" "${available_timezones[@]}" --ok-label="Next")
			if [ -z "${timezone}" ]; then exit 1; fi		
			if [[ " ${btrfs_supported[*]} " =~ " ${distro} " ]]; then fstype=$(sudo -u ${SUDO_USER} zenity --height=480 --width=640 --title="LinuxLoops installer" --list --text "Which filesystem format would you like for the rootfs partition ?" --column "Filesystem" "ext4" "btrfs" --ok-label="Next"); else fstype="ext4"; fi
			if [ -z "${fstype}" ]; then exit 1; fi
			encryption=$(sudo -u ${SUDO_USER} zenity --height=480 --width=640 --title="LinuxLoops installer" --list --text "Do you want the image to be encrypted ? This is highly recommended if you intend to keep sensitive data in it, however it will slightly impacts performance." --column "Encryption" "Yes" "No" --ok-label="Next")
			if [ -z "${encryption}" ]; then exit 1; fi
			customize=$(sudo -u ${SUDO_USER} zenity --height=480 --width=640 --title="LinuxLoops installer" --list --text "Do you want to customize the install ?" --column "Customize install" "No" "Yes" --ok-label="Next")
			if [ -z "${customize}" ]; then exit 1; fi
			if [ "${customize}" == "Yes" ]; then
				if [ -z "${swap_size}" ]; then swap_size=$(sudo -u ${SUDO_USER} zenity --height=480 --width=640 --title="LinuxLoops installer" --scale --text "Please select here the swap size (swap is not mandatory, if you do not know what swap is you can select 0).\n" --min-value=0 --max-value=$(( ${install_size} - 12 )) --value=0 --step 1); fi
				if [ -z "${swap_size}" ]; then exit 1; fi
				if [[ " ${nvidia_supported[*]} " =~ " ${distro} " ]]; then nvidia=$(sudo -u ${SUDO_USER} zenity --height=480 --width=640 --title="LinuxLoops installer" --list --text "Do you want to automatically install the nvidia proprietary drivers ?" --column "Install nvidia driver" "No" "Yes" --ok-label="Next"); else nvidia="No"; fi
				if [ -z "${nvidia}" ]; then exit 1; fi
				if [[ " ${surface_supported[*]} " =~ " ${distro} " ]]; then surface=$(sudo -u ${SUDO_USER} zenity --height=480 --width=640 --title="LinuxLoops installer" --list --text "Do you want to automatically install the surface device patches from https://github.com/linux-surface ? (enable this only if you have a Microsoft Surface device)" --column "Apply Surface patches" "No" "Yes" --ok-label="Next"); else surface="No"; fi
				if [ -z "${surface}" ]; then exit 1; fi
				custom_packages=$(sudo -u ${SUDO_USER} zenity --entry --height=480 --width=640 --title="LinuxLoops installer" --text="Do you want to install additional packages ? (if so, please provide a space separated package list)" --ok-label="Next")
				custom_script_enable=$(sudo -u ${SUDO_USER} zenity --height=480 --width=640 --title="LinuxLoops installer" --list --text "Do you want to run a custom script during the install process ? (if so, select a bash script that will be run as root at the end of the install process)" --column "Run a custom script ?" "No" "Yes" --ok-label="Next")
				if [ -z "${custom_script_enable}" ]; then exit 1; fi
				if [ "${custom_script_enable}" == "Yes" ]; then
					if [ ! -z "${chromeos}" ] || [ ! -z "${brunch}" ]; then
						custom_script=$(sudo -u ${SUDO_USER} zenity --height=480 --width=640 --title="LinuxLoops installer - Select the path to your custom script" --file-selection --file-filter=*.sh --filename="/home/chronos/user/")
					else
						custom_script=$(sudo -u ${SUDO_USER} zenity --height=480 --width=640 --title="LinuxLoops installer - Select the path to your custom script" --file-selection --file-filter=*.sh --filename="$(eval echo ~${SUDO_USER})/")
					fi
					if [ -z "${custom_script}" ]; then exit 1; fi
				fi
				kernel_parameters=$(sudo -u ${SUDO_USER} zenity --entry --height=480 --width=640 --title="LinuxLoops installer" --text="Do you want to add specific kernel parameters ? (if so, please provide a space separated kernel parameters list)" --ok-label="Next")
			fi
		fi
	else
		if [ -z "${distro}" ] || [[ ! " ${available_distros[*]} " =~ " ${distro} " ]]; then echo -e "Please select a distro from the below list:"; list_array "available_distros"; exit 1; fi
		check_home_space
		list_desktops "${distro}"
		if [ -z "${desktop}" ] || [[ ! " ${available_desktops[*]} " =~ " ${desktop} " ]]; then echo -e "Please select an environment from the below list:"; list_array "available_desktops"; exit 1; fi
		if [ -z "${destination}" ]; then echo "Please provide a destination path for the image with \"-dst\" or \"--destination\" argument.\n"; exit 1; fi
		if [ ! -b "${destination}" ]; then echo "Disk ${destination} was not found."; exit 1; fi
		if [ ! "$(lsblk ${destination} -nd -o TYPE)" == "disk" ]; then echo "Linuxloops can only be installed on a full disk."; exit 1; fi
		fullpath="${destination}"
		if [ ! -z "${install_size}" ]; then if [ $(( ($(lsblk -drnbpf -o SIZE "${destination}") / 1024 /1024 / 1024) )) -lt "${install_size}" ]; then echo "You have requested an install size of ${install_size} GB but this device only has $(( ($(lsblk -drnbpf -o SIZE ${destination}) / 1024 /1024 / 1024) ))GB available."; exit 1; fi; fi
		if [ -z "${install_size}" ]; then install_sizeMB=$(( ($(lsblk -drnbpf -o SIZE "${destination}") / 1024 /1024) )); else install_sizeMB=$((install_size*1024)); fi
		if [ ! -z "${swap_size}" ] && [ "${swap_size}" -gt 0 ] && [ $(( install_size - swap_size )) -lt 12 ]; then echo "At least 12 GB should be available for the main partition, please increase the image size or reduce the swap size."; exit 1; fi
		if [ ! $(list_array "available_locales" | grep -w "${locale}") ]; then echo "Locale ${locale} is not available, supported locales are:"; echo $(list_array "available_locales" | sed -e 's@\n@ @g'); exit 1; fi
		if [ ! $(list_array "available_keymaps" | grep -w "${keymap}") ]; then echo "Keymap ${keymap} is not available, supported keympas are:"; echo $(list_array "available_keymaps" | sed -e 's@\n@ @g'); exit 1; fi
		if [ ! $(list_array "available_timezones" | grep -w "${timezone}") ]; then echo "Timezone ${timezone} is not available, supported timezones are:"; echo $(list_array "available_timezones" | sed -e 's@\n@ @g'); exit 1; fi
		if [ "${fstype}" == "btrfs" ] && [[ ! " ${btrfs_supported[*]} " =~ " ${distro} " ]]; then echo "btrfs is not available for this distro, supported distros are:"; list_array "btrfs_supported"; exit 1; fi
		if [ "${nvidia}" == "Yes" ] && [[ ! " ${nvidia_supported[*]} " =~ " ${distro} " ]]; then echo "nvidia driver is not available for this distro, supported distros are:"; list_array "nvidia_supported"; exit 1; fi
		if [ "${surface}" == "Yes" ] && [[ ! " ${surface_supported[*]} " =~ " ${distro} " ]]; then echo "Surface patches are not available for this distro, supported distros are:"; list_array "surface_supported"; exit 1; fi
		if [ "${distro}" == "Brunch" ] || [ "${distro}" == "ChromeOS-Flex" ] || [ "${distro}" == "Tails" ]; then
			if [ "${encryption}" == "Yes" ]; then echo -e "rootfs encryption is not supported with ${distro} but user data will be encrypted by default.\n"; exit 1; fi
			if [ ! -z "${swap_size}" ] && [ "${swap_size}" -ne 0 ]; then echo -e "Swap cannot be enabled by design with ${distro}.\n"; exit 1; fi
		fi
	fi
else
	if [ ! -z "${zenity}" ]; then
		local path
		if [ ! -z "${wsl}" ]; then
			path=$(sudo -u ${SUDO_USER} zenity --height=480 --width=640 --title="LinuxLoops installer - Select the path to store the ${distro} disk image" --file-selection --save --file-filter=*.img --filename="/mnt/c/Users/$(echo $(/mnt/c/Windows/System32/cmd.exe /c echo %username% 2> /dev/null) | sed 's/[^a-zA-Z0-9]//g')/${distro}.img")
		elif [ ! -z "${chromeos}" ] || [ ! -z "${brunch}" ]; then
			path=$(sudo -u ${SUDO_USER} zenity --height=480 --width=640 --title="LinuxLoops installer - Select the path to store the ${distro} disk image" --file-selection --save --file-filter=*.img --filename="/mnt/stateful_partition/unencrypted/${distro}.img")
		else
			path=$(sudo -u ${SUDO_USER} zenity --height=480 --width=640 --title="LinuxLoops installer - Select the path to store the ${distro} disk image" --file-selection --save --file-filter=*.img --filename="$(eval echo ~${SUDO_USER})/${distro}.img")
		fi
		if [ -z "${path}" ]; then exit 1; else destination="${path}"; fi
		if [[ "${destination}" == *"/"* ]] && ([ -z "$(realpath ${destination} 2> /dev/null)" ] || [ ! -d "$(echo $(realpath ${destination}) | sed 's@[^/]*$@@')" ]); then sudo -u ${SUDO_USER} zenity --height=480 --width=640 --title="LinuxLoops installer" --error --text="Desination path does not exist, please provide an existing path."; install_parameters; return; fi
		if [ "$(lsblk $(df -h --output=source $(echo $(realpath ${destination}) | sed 's![^/]*$!!') | tail -1) -no TYPE )" == "crypt" ]; then sudo -u ${SUDO_USER} zenity --height=480 --width=640 --title="LinuxLoops installer" --error --text="Linuxloops disk images cannot be booted from an encrypted partition."; install_parameters; return; fi
		rm -f "${destination}" "${destination}".der "${destination}".grub.txt
		sync
		if [[ ! ${destination} == *"/"* ]]; then path="${PWD}/"; else path="$(realpath "${destination}")"; path="$(echo ${path} | sed 's@[^/]*$@@')"; fi
		fullpath="${path}$(basename ${destination})"
		if [ ! -z "${wsl}" ] && [ ! -z "${path##/mnt/*/*}" ]; then sudo -u ${SUDO_USER} zenity --height=480 --width=640 --title="LinuxLoops installer" --error --text="The ${distro} disk image has to be installed outside of the WSL VM, please specify a path such as /mnt/\&lt;drive letter\&gt;/..."; install_parameters; return; fi
		if ([ ! -z "${chromeos}" ] || [ ! -z "${brunch}" ]) && [ ! -z "${path##/mnt/stateful_partition/unencrypted/*}" ]; then sudo -u ${SUDO_USER} zenity --height=480 --width=640 --title="LinuxLoops installer" --error --text="The ${distro} disk image has to be installed in the unencrypted data partition, please specify a path such as /mnt/stateful_partition/unencrypted/..."; install_parameters; return; fi
		if [ $(( ($(df -k --output=avail "${path}" | sed 1d) / 1024 / 1024) - 14 )) -lt 0 ]; then
			sudo -u ${SUDO_USER} zenity --height=480 --width=640 --title="LinuxLoops installer" --error --text="Not enough space to create image file, the minimum size is 14 GB. Verify that the path you have selected points to a partition with more than 14GB available."
			install_parameters
			return
		elif [ $(( ($(df -k --output=avail "${path}" | sed 1d) / 1024 / 1024) - 14 )) -eq 0 ]; then
			sudo -u ${SUDO_USER} zenity --height=480 --width=640 --title="LinuxLoops installer" --info --text="Exactly 14GB is available on this drive, the installer will proceed with the creation of a 14GB image." --ok-label="Next"
			install_size=14
		else
			install_size=$(sudo -u ${SUDO_USER} zenity --height=480 --width=640 --title="LinuxLoops installer" --scale --text "This partition has $(( ($(df -k --output=avail ${path} | sed 1d) / 1024 / 1024) )) GB available.\n How much would you like to allocate for ${distro} ?\n" --min-value=14 --max-value=$(( ($(df -k --output=avail ${path} | sed 1d) / 1024 / 1024) )) --value=14 --step 1)
		fi
		if [ -z "${install_size}" ]; then exit 1; fi
		install_sizeMB=$((install_size*1024))
		if [ "${distro}" != "Brunch" ] && [ "${distro}" != "ChromeOS-Flex" ] && [ "${distro}" != "Tails" ]; then
			locale=$(sudo -u ${SUDO_USER} zenity --height=480 --width=640 --title="LinuxLoops installer" --list --radiolist --text "Please select your locale (language / formats)." --column "Select" --column "Locale" --column "Description" "${available_locales[@]}" --ok-label="Next")
			if [ -z "${locale}" ]; then exit 1; fi
			keymap=$(sudo -u ${SUDO_USER} zenity --height=480 --width=640 --title="LinuxLoops installer" --list --radiolist --text "Please select your keyboard layout." --column "Select" --column "Keymap" --column "Description" "${available_keymaps[@]}" --ok-label="Next")
			if [ -z "${keymap}" ]; then exit 1; fi
			timezone=$(sudo -u ${SUDO_USER} zenity --height=480 --width=640 --title="LinuxLoops installer" --list --radiolist --text "Please select your timezone." --column "Select" --column "Timezone" "${available_timezones[@]}" --ok-label="Next")
			if [ -z "${timezone}" ]; then exit 1; fi			
			if [[ " ${btrfs_supported[*]} " =~ " ${distro} " ]]; then fstype=$(sudo -u ${SUDO_USER} zenity --height=480 --width=640 --title="LinuxLoops installer" --list --text "Which filesystem format would you like for the rootfs partition ?" --column "Filesystem" "ext4" "btrfs" --ok-label="Next"); else fstype="ext4"; fi
			if [ -z "${encryption}" ] && [ ! -z $(command -v cryptsetup) ]; then encryption=$(sudo -u ${SUDO_USER} zenity --height=480 --width=640 --title="LinuxLoops installer" --list --text "Do you want the image to be encrypted ? This is highly recommended if you intend to keep sensitive data in it, however it will slightly impacts performance." --column "Encryption" "Yes" "No" --ok-label="Next"); else encryption="No"; fi
			if [ -z "${encryption}" ]; then exit 1; fi
			customize=$(sudo -u ${SUDO_USER} zenity --height=480 --width=640 --title="LinuxLoops installer" --list --text "Do you want to customize the install ?" --column "Customize install" "No" "Yes" --ok-label="Next")
			if [ -z "${customize}" ]; then exit 1; fi
			if [ "${customize}" == "Yes" ]; then
				if [ -z "${swap_size}" ]; then swap_size=$(sudo -u ${SUDO_USER} zenity --height=480 --width=640 --title="LinuxLoops installer" --scale --text "Please select here the swap size (swap is not mandatory, if you do not know what swap is you can select 0).\n" --min-value=0 --max-value=$(( ${install_size} - 12 )) --value=0 --step 1); fi
				if [ -z "${swap_size}" ]; then exit 1; fi
				if [[ " ${nvidia_supported[*]} " =~ " ${distro} " ]]; then nvidia=$(sudo -u ${SUDO_USER} zenity --height=480 --width=640 --title="LinuxLoops installer" --list --text "Do you want to automatically install the nvidia proprietary drivers ?" --column "Install nvidia driver" "No" "Yes" --ok-label="Next"); else nvidia="No"; fi
				if [ -z "${nvidia}" ]; then exit 1; fi
				if [[ " ${surface_supported[*]} " =~ " ${distro} " ]]; then surface=$(sudo -u ${SUDO_USER} zenity --height=480 --width=640 --title="LinuxLoops installer" --list --text "Do you want to automatically install the surface device patches from https://github.com/linux-surface ? (enable this only if you have a Microsoft Surface device)" --column "Apply Surface patches" "No" "Yes" --ok-label="Next"); else surface="No"; fi
				if [ -z "${surface}" ]; then exit 1; fi
				custom_packages=$(sudo -u ${SUDO_USER} zenity --entry --height=480 --width=640 --title="LinuxLoops installer" --text="Do you want to install additional packages ? (if so, please provide a space separated package list)" --ok-label="Next")
				custom_script_enable=$(sudo -u ${SUDO_USER} zenity --height=480 --width=640 --title="LinuxLoops installer" --list --text "Do you want to run a custom script during the install process ? (if so, select a bash script that will be run as root at the end of the install process)" --column "Run a custom script ?" "No" "Yes" --ok-label="Next")
				if [ -z "${custom_script_enable}" ]; then exit 1; fi
				if [ "${custom_script_enable}" == "Yes" ]; then
					if [ ! -z "${chromeos}" ] || [ ! -z "${brunch}" ]; then
						custom_script=$(sudo -u ${SUDO_USER} zenity --height=480 --width=640 --title="LinuxLoops installer - Select the path to your custom script" --file-selection --file-filter=*.sh --filename="/home/chronos/user/")
					else
						custom_script=$(sudo -u ${SUDO_USER} zenity --height=480 --width=640 --title="LinuxLoops installer - Select the path to your custom script" --file-selection --file-filter=*.sh --filename="$(eval echo ~${SUDO_USER})/")
					fi
					if [ -z "${custom_script}" ]; then exit 1; fi
				fi
				kernel_parameters=$(sudo -u ${SUDO_USER} zenity --entry --height=480 --width=640 --title="LinuxLoops installer" --text="Do you want to add specific kernel parameters ? (if so, please provide a space separated kernel parameters list)" --ok-label="Next")
			fi
		fi
	else
		if [ -z "${distro}" ] || [[ ! " ${available_distros[*]} " =~ " ${distro} " ]]; then echo -e "Please select a distro from the below list:"; list_array "available_distros"; exit 1; fi
		check_home_space
		list_desktops "${distro}"
		if [ -z "${desktop}" ] || [[ ! " ${available_desktops[*]} " =~ " ${desktop} " ]]; then echo -e "Please select an environment from the below list:"; list_array "available_desktops"; exit 1; fi
		if [ -z "${destination}" ]; then echo "Please provide a destination path for the image with \"-dst\" or \"--destination\" argument.\n"; exit 1; fi
		if [ ! -z "${swap_size}" ] && [ $(( install_size - swap_size )) -lt 12 ]; then echo "At least 12 GB should be available for the main partition, please increase the image size or reduce the swap size."; exit 1; fi
		if [[ "${destination}" == *"/"* ]] && ([ -z "$(realpath ${destination} 2> /dev/null)" ] || [ ! -d "$(echo $(realpath ${destination}) | sed 's![^/]*$!!')" ]); then echo "Desination path does not exist, please provide an existing path."; exit 1; fi
		if [ "$(lsblk $(df -h --output=source $(echo $(realpath ${destination}) | sed 's![^/]*$!!') | tail -1) -no TYPE )" == "crypt" ]; then echo "Linuxloops disk images cannot be booted from an encrypted partition."; exit 1; fi
		rm -f "${destination}" "${destination}".der "${destination}".grub.txt
		sync
		if [[ ! "${destination}" == *"/"* ]]; then path="${PWD}/"; else path="$(echo $(realpath ${destination}) | sed 's![^/]*$!!')"; fi
		fullpath="${path}$(basename ${destination})"
		if [ ! -z "${wsl}" ] && [ ! -z "${path##/mnt/*}" ]; then echo "The ${distro} disk image has to be installed outside of the WSL VM, please specify a path such as /mnt/<drive letter>/..."; exit 1; fi
		if [ ! -z "${chromeos}" ] || [ ! -z "${brunch}" ] && [ ! -z "${path##/mnt/stateful_partition/unencrypted/*}" ]; then echo "The ${distro} disk image has to be installed in the unencrypted data partition, please specify a path such as /mnt/stateful_partition/unencrypted/..."; exit 1; fi
		if [ $(( ($(df -k --output=avail "${path}" | sed 1d) / 1024 / 1024) - ${install_size} )) -lt 0 ]; then echo "Not enough space to create image file, available space is $(( ($(df -k --output=avail ${path} | sed 1d) / 1024 / 1024) )) GB. If you think that this is incorrect, verify that you have correctly mounted the destination partition or if the partition is in ext4 format that there is no reserved space (cf. https://odzangba.wordpress.com/2010/02/20/how-to-free-reserved-space-on-ext4-partitions)"; exit 1; else install_sizeMB=$((install_size*1024)); fi
		if [ ! $(list_array "available_locales" | grep -w "${locale}") ]; then echo "Locale ${locale} is not available, supported locales are:"; echo $(list_array "available_locales" | sed -e 's@\n@ @g'); exit 1; fi
		if [ ! $(list_array "available_keymaps" | grep -w "${keymap}") ]; then echo "Keymap ${keymap} is not available, supported keympas are:"; echo $(list_array "available_keymaps" | sed -e 's@\n@ @g'); exit 1; fi
		if [ ! $(list_array "available_timezones" | grep -w "${timezone}") ]; then echo "Timezone ${timezone} is not available, supported timezones are:"; echo $(list_array "available_timezones" | sed -e 's@\n@ @g'); exit 1; fi
		if [ "${fstype}" == "btrfs" ] && [[ ! " ${btrfs_supported[*]} " =~ " ${distro} " ]]; then echo "btrfs is not available for this distro, supported distros are:"; list_array "btrfs_supported"; exit 1; fi
		if [ "${nvidia}" == "Yes" ] && [[ ! " ${nvidia_supported[*]} " =~ " ${distro} " ]]; then echo "nvidia driver is not available for this distro, supported distros are:"; list_array "nvidia_supported"; exit 1; fi
		if [ "${surface}" == "Yes" ] && [[ ! " ${surface_supported[*]} " =~ " ${distro} " ]]; then echo "Surface patches are not available for this distro, supported distros are:"; list_array "surface_supported"; exit 1; fi
		if [ "${distro}" == "Brunch" ] || [ "${distro}" == "ChromeOS-Flex" ] || [ "${distro}" == "Tails" ]; then
			if [ "${encryption}" == "Yes" ]; then echo -e "rootfs encryption is not supported with ${distro} but user data will be encrypted by default.\n"; exit 1; fi
			if [ ! -z "${swap_size}" ] && [ "${swap_size}" -ne 0 ]; then echo -e "Swap cannot be enabled by design with ${distro}.\n"; exit 1; fi
		fi
	fi
fi
set_credentials
if [ ! -z "${zenity}" ]; then
	if [ "${install_type}" == "disk" ]; then if ! sudo -u ${SUDO_USER} zenity --height=480 --width=640 --title="LinuxLoops installer" --question --text="WARNING: All data on device ${destination} will be erased, are you sure you want to continue ?"; then exit 1; fi; fi
	start_install >(sudo -u ${SUDO_USER} zenity --height=480 --width=640 --title="LinuxLoops installer" --progress --auto-close --pulsate --text="Installing ${distro} with ${desktop} environment.\nYou can follow the install process in the terminal window." --percentage=100) || exit_with_error "Failed to install ${distro} in chroot."
else
	if [ "${install_type}" == "disk" ]; then
		read -p "WARNING: All data on device ${destination} will be erased, are you sure you want to continue ? (type yes to continue)"$'\n' confirm
		if [ -z ${confirm} ] || [ ! ${confirm} == "yes" ]; then echo "Invalid answer ${confirm}, exiting"; exit 1; fi
	fi
	start_install || exit_with_error "Failed to install ${distro} in chroot."
fi
if [ "${install_type}" == "disk" ]; then
	install_finished="Linuxloops installation process is finished.\nYou can now reboot your computer and start ${distro} by selecting your device in the UEFI boot menu."
	if [ ! -z "${zenity}" ]; then
		sudo -u ${SUDO_USER} zenity --height=480 --width=640 --title="LinuxLoops installer" --info --text="${install_finished}" --ok-label="Exit"
	else
		echo -e "${install_finished}"
	fi
else
	grub_config
fi
}

check_dependencies()
{
if ( ! test -z {,} ); then echo "Linuxloops must be ran with \"bash\"."; exit 1; fi
if [ -z $(command -v curl) ]; then echo "\"curl\" program needs to be installed first."; exit 1; fi
if [ -z $(command -v losetup) ]; then echo "\"losetup\" program needs to be installed first."; exit 1; fi
if [ -z $(command -v tar) ]; then echo "\"tar\" program needs to be installed first."; exit 1; fi
if [ -z $(command -v xz) ]; then echo "\"xz\" program needs to be installed first."; exit 1; fi
if [ $(whoami) != "root" ]; then echo "Please run with this script with sudo."; exit 1; fi
if ! : >/dev/tcp/1.1.1.1/80; then echo -e "Internet connection not available, please make sure you are connected to the internet."; exit 1; fi
}

set_base_parameters()
{
linuxloopsdir="$(eval echo ~${SUDO_USER})"/.linuxloops
mkdir -p "${linuxloopsdir}"
if grep -qi 'Microsoft' /proc/version; then wsl=1; fi
if [ "$(grep -o 'NAME=[^,]\+' /etc/os-release | cut -d'=' -f2)" == "Chrome OS" ]; then if [ -f /etc/brunch_version ]; then brunch=1; else chromeos=1; fi; fi
}

check_dependencies
set_base_parameters
if [ ${#} -eq 0 ]; then
	if [ -z $(command -v zenity) ]; then echo "To use the GUI installer you need to install the \"zenity\" binary package."; usage; exit 1; fi
	zenity=1
	if ! sudo -u ${SUDO_USER} zenity --height=480 --width=640 --title="LinuxLoops installer" --info --text="Welcome to the LinuxLoops installer." --ok-label="Next"; then exit 0; fi
	distro=$(sudo -u ${SUDO_USER} zenity --height=480 --width=640 --title="LinuxLoops installer" --list --text "Which distribution do you want to install ?" --column "Distribution" "${available_distros[@]}" --ok-label="Next")
	if [ -z "${distro}" ]; then exit 0; fi
	check_home_space
	list_desktops ${distro}
	desktop=$(sudo -u ${SUDO_USER} zenity --height=480 --width=640 --title="LinuxLoops installer" --list --text "Which desktop environment do you want to install ?" --column "Desktop environment" "${available_desktops[@]}" --ok-label="Next")
	if [ -z "${desktop}" ]; then exit 0; fi
	if [ -z "${wsl}" ]; then install_type=$(sudo -u ${SUDO_USER} zenity --height=480 --width=640 --title="LinuxLoops installer" --list --text "Do you want to install ${distro} on a disk or in an image file ?" --column "Choose install type" "disk" "image" --ok-label="Next"); else install_type="image"; fi
	if [ "${install_type}" == "disk" ] && [ ! -d /sys/firmware/efi ]; then sudo -u ${SUDO_USER} zenity --height=480 --width=640 --title="LinuxLoops installer" --error --text "Disk installs are possible when booted in UEFI mode."; exit 1; fi
	if [ -z "${install_type}" ]; then exit 1; fi
else
	while [ ${#} -gt 0 ]; do
		case "${1}" in
			-distro | --distribution)
				shift
				distro="${1}"
			;;
			-env | --environment)
				shift
				desktop="${1}"
			;;
			-dst | --destination)
				shift
				if [ -z "${1##/dev/*}" ]; then install_type="disk"; else install_type="image"; fi
				destination="${1}"
			;;
			-s | --size)
				shift
				if [ -z "${1##*[!0-9]*}" ] || [ "${1}" -lt 0 ]; then
					echo "Provided disk image size is not a positive integer: ${1}"
					exit 1
				elif [ "${1}" -lt 14 ] ; then
					echo "Disk image size cannot be lower than 14 GB"
					exit 1
				fi
				install_size="${1}"
			;;
			-z | --swapsize)
				shift
				if [ -z "${1##*[!0-9]*}" ] || [ "${1}" -lt 0 ]; then
					echo "Provided swap size is not a positive integer: ${1}"
					exit 1
				fi
				swap_size="${1}"
			;;
			-b | --btrfs)
				fstype="btrfs"
			;;
			-e | --encrypt)
				encryption="Yes"
			;;
			-L | --locale)
				shift
				locale="${1}"
			;;
			-K | --keymap)
				shift
				keymap="${1}"
			;;
			-T | --timezone)
				shift
				timezone="${1}"
			;;
			-n | --nvidia)
				nvidia="Yes"
			;;
			-S | --surface)
				surface="Yes"
			;;
			-c | --custom-packages)
				shift
				custom_packages="${1}"
			;;
			-C | --custom-scripts)
				shift
				custom_scripts="$(sudo -u ${SUDO_USER} echo $(realpath ${1}))"
				if [ ! -f "${custom_scripts}" ]; then echo "Custom script ${1} could not be found."; exit 1; fi
			;;
			-k | --kernel-parameters)
				shift
				kernel_parameters="${1}"
			;;
			-u | --usb-live)
				live="Yes"
			;;
			-l | --list)
				list_array "all"
				exit 0
			;;
			-ll | --list-locales)
				echo -e "Available locales:\n"$(list_array "available_locales" | sed -e 's@\n@ @g')
				exit 0
			;;
			-lk | --list-keympas)
				echo -e "Available keymaps:\n"$(list_array "available_keymaps" | sed -e 's@\n@ @g')
				exit 0
			;;
			-lt | --list-timezones)
				echo -e "Available timezones:\n"$(list_array "available_timezones" | sed -e 's@\n@ @g')
				exit 0
			;;
			-h | --help)
				usage
				exit 0
			;;
			*)
				echo "${1} argument is not valid"
				usage
				exit 1
		esac
		shift
	done
	if [ "${install_type}" == "image" ] && [ -z "${install_size}" ]; then install_size=14; fi
	if [ -z "${locale}" ]; then locale="en_US"; fi
	if [ -z "${keymap}" ]; then keymap="us"; fi
	if [ -z "${timezone}" ]; then timezone="UTC"; fi
fi
install_parameters
